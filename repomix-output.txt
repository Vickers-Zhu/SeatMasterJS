This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix. The content has been processed where comments have been removed, empty lines have been removed.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*, *.*
- Files matching these patterns are excluded: **/*.log, node_modules/**/*
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files

Additional Info:
----------------

================================================================
Directory Structure
================================================================
reservations/
  components/
    PastReservationCard.js
    PastReservationCard.styles.js
    ReservationCard.js
    ReservationCard.styles.js
    ReservationLayoutView.js
  screens/
    ReservationFlow.js
    ReservationFlow.styles.js
    ReservationsScreen.js
restaurants/
  components/
    Others.js
    RestaurantInfoCard.js
    RestaurantInfoCard.styles.js
    RestaurantList.styles.js
    RestaurantMenu.js
    RestaurantTabBar.js
    Reviews.js
    Search.js
    TabNavigation.js
  hooks/
    useReservationHandler.js
    useScrollHandler.js
  screens/
    RestaurantDetailScreen.js
    RestaurantsScreen.js
settings/
  screens/
    AccountSettingsScreen.js
    AccountSettingsScreen.styles.js
    SettingsScreen.js
CustomText.js

================================================================
Files
================================================================

================
File: reservations/components/PastReservationCard.js
================
import React from "react";
import { View } from "react-native";
import { useNavigation } from "@react-navigation/native";
import { format } from "date-fns";
import styled, { useTheme } from "styled-components/native";
import { Spacer } from "../../../../components/Spacer/Spacer";
import { CustomText } from "../../../../components/CustomText/CustomText";
import {
  PastReservationCardContainer,
  CircleImage,
  InfoContainer,
  InfoText,
  StatusText,
  ViewStoreButton,
  ViewStoreButtonText,
} from "./PastReservationCard.styles";
const SelectedPastCardContainer = styled(PastReservationCardContainer)`
  background-color: ${(props) =>
    props.isSelected ? props.theme.colors.bg.secondary : "transparent"};
  border-radius: 8px;
`;
export const PastReservationCard = ({
  reservation = {},
  isSelected = false,
}) => {
  const navigation = useNavigation();
  const theme = useTheme();
  const {
    restaurant = {},
    date = "2024-04-01",
    status = "Completed",
  } = reservation;
  const formattedDate =
    typeof date === "string"
      ? format(new Date(date), "MMM d, yyyy")
      : format(date, "MMM d, yyyy");
  return (
    <SelectedPastCardContainer isSelected={isSelected}>
      <CircleImage source={{ uri: restaurant.photos[0] }} />
      <InfoContainer>
        <CustomText variant="title">{restaurant.name}</CustomText>
        <Spacer position="top" size="small" />
        <InfoText>Reserved Date: {formattedDate}</InfoText>
        <Spacer position="top" size="small" />
        <StatusText>{status}</StatusText>
      </InfoContainer>
      <ViewStoreButton
        onPress={() => {
          navigation.navigate("RestaurantDetailScreen", {
            restaurant: restaurant,
          });
        }}
      >
        <ViewStoreButtonText>View</ViewStoreButtonText>
      </ViewStoreButton>
    </SelectedPastCardContainer>
  );
};

================
File: reservations/components/PastReservationCard.styles.js
================
import styled from "styled-components/native";
import { View, Text, Image, TouchableOpacity } from "react-native";
export const PastReservationCardContainer = styled(View)`
  flex-direction: row;
  align-items: center;
  padding-left: ${(props) => props.theme.space[3]};
  padding-right: ${(props) => props.theme.space[3]};
  border-radius: 8px;
  margin-vertical: ${(props) => props.theme.space[2]};
`;
export const CircleImage = styled(Image)`
  width: 50px;
  height: 50px;
  border-radius: 25px;
`;
export const InfoContainer = styled(View)`
  flex: 1;
  margin-left: ${(props) => props.theme.space[3]};
`;
export const InfoText = styled(Text)`
  font-family: ${(props) => props.theme.fonts.body};
  font-size: ${(props) => props.theme.fontSizes.body};
  color: ${(props) => props.theme.colors.text.primary};
`;
export const StatusText = styled(Text)`
  font-family: ${(props) => props.theme.fonts.body};
  font-size: ${(props) => props.theme.fontSizes.body};
  color: ${(props) => props.theme.colors.text.primary};
`;
export const ViewStoreButton = styled(TouchableOpacity)`
  padding-vertical: ${(props) => props.theme.space[2]};
  padding-horizontal: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.ui.tertiary};
  border-radius: 25px;
`;
export const ViewStoreButtonText = styled(Text)`
  font-family: ${(props) => props.theme.fonts.body};
  font-size: ${(props) => props.theme.fontSizes.button};
  color: ${(props) => props.theme.colors.text.primary};
  text-align: center;
`;

================
File: reservations/components/ReservationCard.js
================
import React from "react";
import { View } from "react-native";
import { format, isToday, isTomorrow } from "date-fns";
import styled, { useTheme } from "styled-components/native";
import { Spacer } from "../../../../components/Spacer/Spacer";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { MaterialIcons } from "@expo/vector-icons";
import {
  ReservationCardContainer,
  ReservationCardCover,
  Info,
  Section,
  ReservationDetails,
  DetailText,
  TrackButton,
  TrackButtonText,
} from "./ReservationCard.styles";
const SelectedIndicator = styled.View`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border: 2px solid ${(props) => props.theme.colors.ui.primary};
  border-radius: 8px;
  pointer-events: none;
`;
const StatusContainer = styled.View`
  position: absolute;
  top: ${(props) => props.theme.space[2]};
  right: ${(props) => props.theme.space[2]};
  background-color: ${(props) => {
    switch (props.status) {
      case "Confirmed":
        return "#4CAF50";
      case "Pending":
        return "#FFC107";
      default:
        return "#757575";
    }
  }};
  padding: ${(props) => props.theme.space[1]} ${(props) => props.theme.space[2]};
  border-radius: 4px;
`;
const StatusText = styled(CustomText)`
  color: white;
  font-size: ${(props) => props.theme.fontSizes.caption};
  font-weight: bold;
`;
const IconRow = styled.View`
  flex-direction: row;
  align-items: center;
  margin-vertical: ${(props) => props.theme.space[1]};
`;
const formatDate = (date) => {
  if (isToday(new Date(date))) return "Today";
  if (isTomorrow(new Date(date))) return "Tomorrow";
  return format(new Date(date), "EEE, MMM d");
};
export const ReservationCard = ({ reservation = {}, isSelected = false }) => {
  const theme = useTheme();
  const {
    restaurant = {},
    date = "2024-04-01",
    time = "7:00 PM",
    seatsNumber = 4,
    people = 4,
    status = "Confirmed",
  } = reservation;
  const partySize = people || seatsNumber;
  return (
    <ReservationCardContainer elevation={0}>
      <ReservationCardCover source={{ uri: restaurant.photos[0] }} />
      <StatusContainer status={status}>
        <StatusText>{status}</StatusText>
      </StatusContainer>
      <Info>
        <CustomText variant="title">{restaurant.name}</CustomText>
        <Section>
          <ReservationDetails>
            <IconRow>
              <MaterialIcons
                name="event"
                size={16}
                color={theme.colors.text.primary}
              />
              <Spacer position="left" size="small" />
              <DetailText>{formatDate(date)}</DetailText>
            </IconRow>
            <IconRow>
              <MaterialIcons
                name="schedule"
                size={16}
                color={theme.colors.text.primary}
              />
              <Spacer position="left" size="small" />
              <DetailText>{time}</DetailText>
            </IconRow>
            <IconRow>
              <MaterialIcons
                name="people"
                size={16}
                color={theme.colors.text.primary}
              />
              <Spacer position="left" size="small" />
              <DetailText>
                {partySize} {partySize === 1 ? "person" : "people"}
              </DetailText>
            </IconRow>
          </ReservationDetails>
          <TrackButton>
            <TrackButtonText>Details</TrackButtonText>
          </TrackButton>
        </Section>
      </Info>
      {isSelected && <SelectedIndicator />}
    </ReservationCardContainer>
  );
};

================
File: reservations/components/ReservationCard.styles.js
================
import styled from "styled-components/native";
import { Image, View, TouchableOpacity, Text } from "react-native";
import { Card } from "react-native-paper";
export const ReservationCardContainer = styled(Card)`
  background-color: ${(props) => props.theme.colors.bg.primary};
  width: 98%;
  align-self: center;
  border-radius: 8px;
  /* Remove elevation for Android */
  elevation: 0;
  /* Remove shadow for iOS */
  shadow-color: transparent;
  shadow-opacity: 0;
  shadow-radius: 0px;
`;
export const ReservationCardCover = styled(Card.Cover)`
  padding: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.primary};
  height: 150px;
  border-top-left-radius: 8px;
  border-top-right-radius: 8px;
`;
export const Info = styled(View)`
  padding-left: ${(props) => props.theme.space[3]};
  padding-right: ${(props) => props.theme.space[3]};
  padding-bottom: 0;
  margin-top: -5px;
`;
export const Section = styled(View)`
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  margin-top: ${(props) => props.theme.space[2]};
`;
export const ReservationDetails = styled(View)`
  flex-direction: column;
`;
export const DetailText = styled(Text)`
  font-family: ${(props) => props.theme.fonts.body};
  font-size: ${(props) => props.theme.fontSizes.body};
  color: ${(props) => props.theme.colors.text.primary};
`;
export const TrackButton = styled(TouchableOpacity)`
  padding: ${(props) => props.theme.space[1]} ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.ui.primary};
  border-radius: 25px;
`;
export const TrackButtonText = styled(Text)`
  padding: ${(props) => props.theme.space[2]};
  font-family: ${(props) => props.theme.fonts.body};
  font-size: ${(props) => props.theme.fontSizes.body};
  color: ${(props) => props.theme.colors.bg.primary};
  text-align: center;
`;

================
File: reservations/components/ReservationLayoutView.js
================
import React, { useState, useEffect, useCallback } from "react";
import { View, TouchableOpacity, Alert } from "react-native";
import styled from "styled-components/native";
import { MaterialIcons } from "@expo/vector-icons";
import { CustomText } from "../../../../components/CustomText/CustomText";
import WebApp from "../../../../components/WebApp/WebApp";
import ErrorBoundary from "../../../../components/ErrorBoundary/ErrorBoundary";
const Container = styled.View`
  min-height: 250px;
  margin-bottom: ${(props) => props.theme.space[3]};
  border-radius: 8px;
  overflow: hidden;
  background-color: ${(props) => props.theme.colors.bg.secondary};
`;
const InfoBar = styled.View`
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.ui.tertiary};
`;
const InfoText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  color: ${(props) => props.theme.colors.text.secondary};
`;
const PartyLimitText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  color: ${(props) => props.theme.colors.text.error};
  font-weight: bold;
`;
const SelectedSeats = styled(CustomText)`
  font-weight: ${(props) => props.theme.fontWeights.bold};
  color: ${(props) => props.theme.colors.text.primary};
`;
const LegendContainer = styled.View`
  flex-direction: row;
  flex-wrap: wrap;
  padding: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.bg.primary};
  border-top-width: 1px;
  border-top-color: ${(props) => props.theme.colors.ui.tertiary};
`;
const LegendItem = styled.View`
  flex-direction: row;
  align-items: center;
  margin-right: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[1]};
`;
const LegendColor = styled.View`
  width: 12px;
  height: 12px;
  border-radius: 6px;
  margin-right: ${(props) => props.theme.space[1]};
  background-color: ${(props) => props.color};
`;
const LegendText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
/**
 * ReservationLayoutView component for selecting seats in the restaurant layout
 *
 * @param {Object} props - Component props
 * @param {Function} props.onTableSelect - Callback function when seats are selected
 * @param {number} props.partySize - Number of people in the party
 * @param {string} props.selectedTime - Selected reservation time (e.g. "19:00")
 * @param {string} props.selectedDate - Selected reservation date (formatted as YYYY-MM-DD)
 * @param {Function} props.onInteractionStart - Callback when interaction with layout starts
 * @param {Function} props.onInteractionEnd - Callback when interaction with layout ends
 * @returns {JSX.Element} The reservation layout component
 */
const ReservationLayoutView = ({
  onTableSelect,
  partySize,
  selectedTime,
  selectedDate,
  onInteractionStart,
  onInteractionEnd,
}) => {
  // State to track selected seats
  const [selectedItems, setSelectedItems] = useState([]);
  // Reset selections when party size changes
  useEffect(() => {
    setSelectedItems([]);
    if (onTableSelect) {
      onTableSelect(null);
    }
  }, [partySize, onTableSelect]);
  /**
   * Handle selection of chairs/seats from the WebApp
   * @param {Array} items - Array of selected seat IDs
   */
  const handleWebAppSelection = useCallback(
    (items) => {
      // Handle party size limitations
      if (items.length > partySize) {
        // Keep the most recent selections up to the party size limit
        const limitedItems = items.slice(-partySize);
        // Notify user about the limit
        Alert.alert(
          "Selection Limit Reached",
          `You can only select ${partySize} ${
            partySize === 1 ? "seat" : "seats"
          } based on your party size.`
        );
        // Update internal state
        setSelectedItems(limitedItems);
        // Notify parent component about selected items
        if (onTableSelect) {
          onTableSelect(limitedItems.join(","));
        }
      } else {
        // Normal selection within limits
        setSelectedItems(items);
        // Notify parent component
        if (items.length > 0 && onTableSelect) {
          onTableSelect(items.join(","));
        } else if (onTableSelect) {
          onTableSelect(null);
        }
      }
    },
    [partySize, onTableSelect]
  );
  return (
    <Container>
      <InfoBar>
        <InfoText>
          Preview available seats for {partySize}{" "}
          {partySize === 1 ? "person" : "people"} at {selectedTime}
        </InfoText>
        {selectedItems.length > 0 ? (
          <SelectedSeats>
            Selected: {selectedItems.join(", ")}
            {selectedItems.length < partySize &&
              ` (${partySize - selectedItems.length} more needed)`}
          </SelectedSeats>
        ) : (
          <PartyLimitText>Please select up to {partySize} seats</PartyLimitText>
        )}
      </InfoBar>
      <ErrorBoundary>
        <WebApp
          onInteractionStart={onInteractionStart}
          onInteractionEnd={onInteractionEnd}
          selectedItems={selectedItems}
          onSelectedItemsChange={handleWebAppSelection}
        />
      </ErrorBoundary>
      <LegendContainer>
        <LegendItem>
          <LegendColor color="#4CAF50" />
          <LegendText>Selected</LegendText>
        </LegendItem>
        <LegendItem>
          <LegendColor color="#F44336" />
          <LegendText>Occupied</LegendText>
        </LegendItem>
        <LegendItem>
          <LegendColor color="#FFC107" />
          <LegendText>Reserved</LegendText>
        </LegendItem>
      </LegendContainer>
    </Container>
  );
};
export default ReservationLayoutView;

================
File: reservations/screens/ReservationFlow.js
================
import React, { useState, useEffect, useRef, useCallback } from "react";
import {
  View,
  ScrollView,
  TouchableOpacity,
  Alert,
  FlatList,
} from "react-native";
import { MaterialIcons } from "@expo/vector-icons";
import { format, addDays, isSameDay, getDay } from "date-fns";
import { CustomText } from "../../../../components/CustomText/CustomText";
import ReservationLayoutView from "../components/ReservationLayoutView";
import { TimeScroll } from "../../../../components/TimeScroll/TimeScroll";
import { Separator } from "../../../../components/Separator/Separator";
import { Spacer } from "../../../../components/Spacer/Spacer";
import { generateTimeSlots } from "../../../merchant/reservations/utils/timeUtils";
import * as Styles from "./ReservationFlow.styles";
const getDayAvailability = (date) => {
  const day = getDay(date);
  if (day === 0 || day === 6) return "medium";
  if (day === 1) return "unavailable";
  return "high";
};
const getWeekdayName = (date) => {
  const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  return days[getDay(date)];
};
const ReservationFlow = ({ restaurant, onComplete }) => {
  const dateScrollRef = useRef(null);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [partySize, setPartySize] = useState(2);
  const [availableTimes, setAvailableTimes] = useState([]);
  const [selectedTime, setSelectedTime] = useState(null);
  const [showLayout, setShowLayout] = useState(false);
  const [selectedChairs, setSelectedChairs] = useState([]);
  const [notes, setNotes] = useState("");
  const [availability, setAvailability] = useState("high");
  const [scrollEnabled, setScrollEnabled] = useState(true);
  const [duration, setDuration] = useState(90);
  const generateDates = useCallback(() => {
    const dates = [];
    const today = new Date();
    for (let i = 0; i < 60; i++) {
      const date = addDays(today, i);
      const availability = getDayAvailability(date);
      dates.push({
        date,
        label: i === 0 ? "Today" : i === 1 ? "Tomorrow" : format(date, "MMM d"),
        weekday: getWeekdayName(date),
        availability,
        isUnavailable: availability === "unavailable",
      });
    }
    return dates;
  }, []);
  const generatePartySizeOptions = useCallback(() => {
    const maxPartySize = restaurant?.settings?.maxReservationSize || 20;
    return Array.from({ length: maxPartySize }, (_, i) => i + 1);
  }, [restaurant?.settings?.maxReservationSize]);
  const [dateOptions] = useState(generateDates);
  const [partySizeOptions] = useState(generatePartySizeOptions);
  useEffect(() => {
    const allSlots = generateTimeSlots();
    const dayOfWeek = getDay(selectedDate);
    let filteredTimes;
    if (dayOfWeek === 0 || dayOfWeek === 6) {
      filteredTimes = allSlots.filter((time) => {
        const hour = parseInt(time.split(":")[0]);
        return hour >= 10 && hour <= 22;
      });
    } else {
      filteredTimes = allSlots.filter((time) => {
        const hour = parseInt(time.split(":")[0]);
        return hour >= 11 && hour <= 21;
      });
    }
    setAvailableTimes(filteredTimes);
    if (!selectedTime || !filteredTimes.includes(selectedTime)) {
      const defaultTimeIndex = Math.floor(filteredTimes.length / 2);
      setSelectedTime(filteredTimes[defaultTimeIndex]);
    }
  }, [selectedDate]);
  useEffect(() => {
    if (!selectedTime) return;
    const hour = parseInt(selectedTime.split(":")[0]);
    if (partySize > 10) {
      setAvailability("low");
    } else if ((hour >= 18 && hour <= 20) || partySize > 6) {
      setAvailability("medium");
    } else {
      setAvailability("high");
    }
    if (partySize >= 8) {
      setDuration(120);
    } else if (partySize >= 4) {
      setDuration(90);
    } else {
      setDuration(60);
    }
  }, [selectedTime, partySize]);
  useEffect(() => {
    setSelectedChairs([]);
  }, [partySize, selectedTime]);
  const handleInteractionStart = useCallback(() => {
    setScrollEnabled(false);
  }, []);
  const handleInteractionEnd = useCallback(() => {
    setScrollEnabled(true);
  }, []);
  const handleChairSelection = useCallback((chairIds) => {
    if (chairIds) {
      setSelectedChairs(chairIds.split(","));
      console.log("Selected chairs in reserv flow:", chairIds.split(","));
    } else {
      setSelectedChairs([]);
    }
  }, []);
  const generateReservationId = () => {
    return Math.floor(Math.random() * 10000) + 1;
  };
  const handleReservePress = useCallback(() => {
    if (!selectedDate || !selectedTime) {
      Alert.alert(
        "Missing Information",
        "Please select a date and time for your reservation."
      );
      return;
    }
    if (showLayout && selectedChairs.length > 0) {
      if (selectedChairs.length < partySize) {
        Alert.alert(
          "Seat Selection Required",
          `Please select ${partySize} seats. You have selected ${selectedChairs.length}.`
        );
        return;
      }
    }
    const customerName = "Current User";
    const reservationDetails = {
      id: generateReservationId(),
      customerName,
      restaurant: restaurant,
      date: format(selectedDate, "yyyy-MM-dd"),
      time: selectedTime,
      people: partySize,
      duration: duration,
      status: "confirmed",
      note: notes,
    };
    if (selectedChairs.length > 0) {
      reservationDetails.chairs = selectedChairs;
    } else {
      reservationDetails.autoAssigned = true;
    }
    Alert.alert(
      "Reservation Confirmed!",
      `Your reservation for ${partySize} ${
        partySize > 1 ? "people" : "person"
      } at ${selectedTime} on ${format(
        selectedDate,
        "EEE, MMM d"
      )} has been confirmed.${
        selectedChairs.length === 0
          ? "\n\nYour seats will be assigned upon arrival."
          : ""
      }`,
      [
        {
          text: "OK",
          onPress: () => onComplete && onComplete(reservationDetails),
        },
      ]
    );
  }, [
    selectedDate,
    selectedTime,
    partySize,
    duration,
    selectedChairs,
    showLayout,
    notes,
    restaurant,
    onComplete,
  ]);
  const renderAvailabilityLegend = () => (
    <View style={{ flexDirection: "row", marginTop: 8, marginBottom: 16 }}>
      <Styles.AvailabilityRow>
        <View
          style={{
            width: 10,
            height: 10,
            borderRadius: 5,
            backgroundColor: "#4CAF50",
            marginRight: 4,
          }}
        />
        <Styles.AvailabilityText>High</Styles.AvailabilityText>
      </Styles.AvailabilityRow>
      <Styles.AvailabilityRow style={{ marginLeft: 12 }}>
        <View
          style={{
            width: 10,
            height: 10,
            borderRadius: 5,
            backgroundColor: "#FFC107",
            marginRight: 4,
          }}
        />
        <Styles.AvailabilityText>Limited</Styles.AvailabilityText>
      </Styles.AvailabilityRow>
      <Styles.AvailabilityRow style={{ marginLeft: 12 }}>
        <View
          style={{
            width: 10,
            height: 10,
            borderRadius: 5,
            backgroundColor: "#F44336",
            marginRight: 4,
          }}
        />
        <Styles.AvailabilityText>Few spots</Styles.AvailabilityText>
      </Styles.AvailabilityRow>
    </View>
  );
  return (
    <Styles.Container scrollEnabled={scrollEnabled}>
      <Styles.HeaderContainer>
        <CustomText variant="h4">Make a Reservation</CustomText>
      </Styles.HeaderContainer>
      {}
      <Styles.DateSelectorContainer>
        <Styles.SectionTitle>Date</Styles.SectionTitle>
        <Styles.DateItemsContainer>
          <FlatList
            ref={dateScrollRef}
            horizontal
            showsHorizontalScrollIndicator={false}
            data={dateOptions}
            keyExtractor={(item, index) => `date-${index}`}
            renderItem={({ item }) => (
              <Styles.DateOption
                selected={isSameDay(selectedDate, item.date)}
                unavailable={item.isUnavailable}
                onPress={() =>
                  !item.isUnavailable && setSelectedDate(item.date)
                }
              >
                <Styles.DateText selected={isSameDay(selectedDate, item.date)}>
                  {item.label}
                </Styles.DateText>
                <Styles.WeekdayText
                  selected={isSameDay(selectedDate, item.date)}
                >
                  {item.weekday}
                </Styles.WeekdayText>
                {!item.isUnavailable && (
                  <Styles.AvailabilityIndicator
                    level={item.availability}
                    selected={isSameDay(selectedDate, item.date)}
                  />
                )}
              </Styles.DateOption>
            )}
            initialNumToRender={7}
            maxToRenderPerBatch={10}
          />
        </Styles.DateItemsContainer>
      </Styles.DateSelectorContainer>
      {}
      <Styles.PartySelectorContainer>
        <Styles.SectionTitle>Party Size</Styles.SectionTitle>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          <Styles.PartyOptionsContainer>
            {partySizeOptions.map((size) => (
              <Styles.PartyOption
                key={`size-${size}`}
                selected={partySize === size}
                onPress={() => setPartySize(size)}
              >
                <Styles.PartyText selected={partySize === size}>
                  {size}
                </Styles.PartyText>
              </Styles.PartyOption>
            ))}
          </Styles.PartyOptionsContainer>
        </ScrollView>
      </Styles.PartySelectorContainer>
      {}
      <Styles.TimeContainer>
        <Styles.SectionTitle>Time</Styles.SectionTitle>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          <Styles.TimeOptionsContainer>
            {availableTimes.map((time, index) => {
              const hour = parseInt(time.split(":")[0]);
              let timeAvailability = "high";
              if (hour >= 18 && hour <= 20) {
                timeAvailability = "medium";
              } else if (hour === 21) {
                timeAvailability = "low";
              }
              return (
                <Styles.TimeOption
                  key={`time-${index}`}
                  selected={selectedTime === time}
                  availability={timeAvailability}
                  onPress={() => setSelectedTime(time)}
                >
                  <Styles.TimeText selected={selectedTime === time}>
                    {time}
                  </Styles.TimeText>
                  <Styles.TimeAvailabilityIndicator
                    level={timeAvailability}
                    selected={selectedTime === time}
                  />
                </Styles.TimeOption>
              );
            })}
          </Styles.TimeOptionsContainer>
        </ScrollView>
        {renderAvailabilityLegend()}
      </Styles.TimeContainer>
      <Separator type="full" />
      {}
      <Styles.ToggleButton onPress={() => setShowLayout(!showLayout)}>
        <MaterialIcons
          name={showLayout ? "visibility-off" : "visibility"}
          size={24}
          color="#262626"
        />
        <Styles.ToggleText>
          {showLayout ? "Hide Seating Layout" : "Select Your Seats"}
        </Styles.ToggleText>
      </Styles.ToggleButton>
      {}
      {showLayout && (
        <Styles.LayoutContainer>
          <ReservationLayoutView
            onTableSelect={handleChairSelection}
            partySize={partySize}
            selectedTime={selectedTime}
            selectedDate={format(selectedDate, "yyyy-MM-dd")}
            onInteractionStart={handleInteractionStart}
            onInteractionEnd={handleInteractionEnd}
          />
        </Styles.LayoutContainer>
      )}
      {}
      <Styles.SectionTitle>Special Requests (Optional)</Styles.SectionTitle>
      <Styles.NotesInput
        multiline
        placeholder="Add any special requests or dietary requirements..."
        value={notes}
        onChangeText={setNotes}
        textAlignVertical="top"
      />
      {}
      <Styles.ReserveButton onPress={handleReservePress}>
        <Styles.ReserveButtonText>Reserve Now</Styles.ReserveButtonText>
      </Styles.ReserveButton>
      <View style={{ height: 40 }} />
    </Styles.Container>
  );
};
export default ReservationFlow;

================
File: reservations/screens/ReservationFlow.styles.js
================
import styled from "styled-components/native";
import { CustomText } from "../../../../components/CustomText/CustomText";
export const Container = styled.ScrollView`
  flex: 1;
  background-color: ${(props) => props.theme.colors.bg.primary};
  padding-horizontal: ${(props) => props.theme.space[3]};
`;
export const HeaderContainer = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  margin-top: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[3]};
`;
// Enhanced Date Selector
export const DateSelectorContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const DateItemsContainer = styled.View`
  margin-vertical: ${(props) => props.theme.space[2]};
`;
export const DateOption = styled.TouchableOpacity`
  padding-vertical: ${(props) => props.theme.space[2]};
  padding-horizontal: ${(props) => props.theme.space[3]};
  margin-right: ${(props) => props.theme.space[2]};
  background-color: ${(props) =>
    props.selected
      ? props.theme.colors.ui.primary
      : props.theme.colors.bg.secondary};
  border-radius: 20px;
  min-width: 80px;
  align-items: center;
  ${(props) =>
    props.unavailable &&
    `
    opacity: 0.5;
  `}
  elevation: ${(props) => (props.selected ? 3 : 0)};
  shadow-opacity: ${(props) => (props.selected ? 0.2 : 0)};
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const DateText = styled(CustomText)`
  color: ${(props) =>
    props.selected
      ? props.theme.colors.text.inverse
      : props.theme.colors.text.primary};
  font-size: ${(props) => props.theme.fontSizes.caption};
  font-weight: ${(props) =>
    props.selected
      ? props.theme.fontWeights.bold
      : props.theme.fontWeights.regular};
`;
export const WeekdayText = styled(CustomText)`
  color: ${(props) =>
    props.selected
      ? props.theme.colors.text.inverse
      : props.theme.colors.text.secondary};
  font-size: ${(props) => props.theme.fontSizes.caption};
  margin-top: 2px;
`;
export const AvailabilityIndicator = styled.View`
  width: 6px;
  height: 6px;
  border-radius: 3px;
  margin-top: 2px;
  background-color: ${(props) => {
    if (props.selected) return props.theme.colors.text.inverse;
    switch (props.level) {
      case "high":
        return "#4CAF50";
      case "medium":
        return "#FFC107";
      case "low":
        return "#F44336";
      default:
        return "#BDBDBD";
    }
  }};
`;
// Enhanced Party Size Selector
export const PartySelectorContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const PartyOptionsContainer = styled.View`
  flex-direction: row;
  flex-wrap: wrap;
  margin-top: ${(props) => props.theme.space[2]};
`;
export const PartyOption = styled.TouchableOpacity`
  min-width: 50px;
  height: 50px;
  margin-right: ${(props) => props.theme.space[2]};
  margin-bottom: ${(props) => props.theme.space[2]};
  background-color: ${(props) =>
    props.selected
      ? props.theme.colors.ui.primary
      : props.theme.colors.bg.secondary};
  border-radius: 25px;
  align-items: center;
  justify-content: center;
  elevation: ${(props) => (props.selected ? 3 : 0)};
  shadow-opacity: ${(props) => (props.selected ? 0.2 : 0)};
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const PartyText = styled(CustomText)`
  color: ${(props) =>
    props.selected
      ? props.theme.colors.text.inverse
      : props.theme.colors.text.primary};
  font-size: ${(props) => props.theme.fontSizes.body};
  font-weight: ${(props) =>
    props.selected
      ? props.theme.fontWeights.bold
      : props.theme.fontWeights.regular};
`;
// Enhanced Time Selector
export const TimeContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const TimeOptionsContainer = styled.View`
  flex-direction: row;
  flex-wrap: wrap;
  margin-top: ${(props) => props.theme.space[2]};
`;
export const TimeOption = styled.TouchableOpacity`
  min-width: 80px;
  padding-vertical: ${(props) => props.theme.space[2]};
  padding-horizontal: ${(props) => props.theme.space[2]};
  margin-right: ${(props) => props.theme.space[2]};
  margin-bottom: ${(props) => props.theme.space[2]};
  background-color: ${(props) =>
    props.selected
      ? props.theme.colors.ui.primary
      : props.theme.colors.bg.secondary};
  border-radius: 12px;
  align-items: center;
  justify-content: center;
  ${(props) =>
    props.availability === "low" &&
    `
    border: 1px solid #F44336;
  `}
  ${(props) =>
    props.availability === "medium" &&
    `
    border: 1px solid #FFC107;
  `}
  elevation: ${(props) => (props.selected ? 3 : 0)};
  shadow-opacity: ${(props) => (props.selected ? 0.2 : 0)};
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const TimeText = styled(CustomText)`
  color: ${(props) =>
    props.selected
      ? props.theme.colors.text.inverse
      : props.theme.colors.text.primary};
  font-size: ${(props) => props.theme.fontSizes.body};
  font-weight: ${(props) =>
    props.selected
      ? props.theme.fontWeights.bold
      : props.theme.fontWeights.regular};
`;
export const TimeAvailabilityIndicator = styled.View`
  width: 10px;
  height: 10px;
  border-radius: 5px;
  margin-top: 4px;
  background-color: ${(props) => {
    if (props.selected) return props.theme.colors.text.inverse;
    switch (props.level) {
      case "high":
        return "#4CAF50";
      case "medium":
        return "#FFC107";
      case "low":
        return "#F44336";
      default:
        return "#BDBDBD";
    }
  }};
`;
export const AvailabilityRow = styled.View`
  flex-direction: row;
  align-items: center;
  margin-top: ${(props) => props.theme.space[2]};
`;
export const AvailabilityText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  color: ${(props) => props.theme.colors.text.secondary};
  margin-left: ${(props) => props.theme.space[1]};
`;
// Summary Section
export const SummaryContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const SummaryBox = styled.View`
  background-color: ${(props) => props.theme.colors.bg.secondary};
  border-radius: 10px;
  padding: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const SummaryRow = styled.View`
  flex-direction: row;
  align-items: center;
  margin-bottom: ${(props) => props.theme.space[2]};
`;
export const SummaryText = styled(CustomText)`
  margin-left: ${(props) => props.theme.space[2]};
  font-size: ${(props) => props.theme.fontSizes.body};
`;
export const ToggleButton = styled.TouchableOpacity`
  flex-direction: row;
  align-items: center;
  padding: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.bg.secondary};
  border-radius: 8px;
  margin-bottom: ${(props) => props.theme.space[2]};
  elevation: 1;
  shadow-opacity: 0.1;
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const ToggleText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.body};
  margin-left: ${(props) => props.theme.space[2]};
`;
export const LayoutContainer = styled.View`
  min-height: 250px;
  margin-bottom: ${(props) => props.theme.space[3]};
  border-radius: 12px;
  overflow: hidden;
  background-color: ${(props) => props.theme.colors.bg.secondary};
  elevation: 1;
  shadow-opacity: 0.1;
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const NotesInput = styled.TextInput`
  padding: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.secondary};
  border-radius: 12px;
  margin-bottom: ${(props) => props.theme.space[3]};
  min-height: 100px;
  color: ${(props) => props.theme.colors.text.primary};
  elevation: 1;
  shadow-opacity: 0.1;
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const ReserveButton = styled.TouchableOpacity`
  background-color: ${(props) => props.theme.colors.ui.primary};
  padding: ${(props) => props.theme.space[3]};
  border-radius: 12px;
  align-items: center;
  justify-content: center;
  margin-bottom: ${(props) => props.theme.space[4]};
  elevation: 3;
  shadow-opacity: 0.2;
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const ReserveButtonText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.inverse};
  font-size: ${(props) => props.theme.fontSizes.button};
  font-weight: ${(props) => props.theme.fontWeights.bold};
`;
export const SectionTitle = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.body};
  font-weight: ${(props) => props.theme.fontWeights.bold};
  margin-bottom: ${(props) => props.theme.space[2]};
`;
export const InfoText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  color: ${(props) => props.theme.colors.text.secondary};
  margin-bottom: ${(props) => props.theme.space[2]};
  font-style: italic;
`;

================
File: reservations/screens/ReservationsScreen.js
================
import React, { useState, useEffect, useRef } from "react";
import styled from "styled-components/native";
import {
  ScrollView,
  TouchableOpacity,
  View,
  Alert,
  TouchableWithoutFeedback,
} from "react-native";
import { useNavigation } from "@react-navigation/native";
import { MaterialIcons } from "@expo/vector-icons";
import { format, isToday, isTomorrow, isPast, parseISO } from "date-fns";
import { reservations } from "../../../../data/mockData";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import { Spacer } from "../../../../components/Spacer/Spacer";
import { Separator } from "../../../../components/Separator/Separator";
import { ReservationCard } from "../components/ReservationCard";
import { PastReservationCard } from "../components/PastReservationCard";
import { useReservation } from "../../../../services/ReservationContext";
import { FadeInView } from "../../../../components/FadeInView/FadeInView";
const Container = styled(SafeArea)`
  flex: 1;
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
const TabBar = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: space-around;
  padding: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.bg.primary};
  border-bottom-width: 1px;
  border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
`;
const Tab = styled(TouchableOpacity)`
  align-items: center;
  padding: ${(props) => props.theme.space[2]};
  border-bottom-width: 2px;
  border-bottom-color: ${(props) =>
    props.active ? props.theme.colors.ui.primary : "transparent"};
`;
const TabText = styled(CustomText)`
  color: ${(props) =>
    props.active
      ? props.theme.colors.ui.primary
      : props.theme.colors.text.primary};
  font-weight: ${(props) => (props.active ? "bold" : "normal")};
`;
const SectionTitle = styled(CustomText)`
  margin-left: ${(props) => props.theme.space[2]};
  padding-left: ${(props) => props.theme.space[2]};
  padding-top: ${(props) => props.theme.space[2]};
`;
const EmptyState = styled.View`
  padding: ${(props) => props.theme.space[4]};
  align-items: center;
  justify-content: center;
`;
const EmptyStateText = styled(CustomText)`
  text-align: center;
  color: ${(props) => props.theme.colors.text.secondary};
  margin-top: ${(props) => props.theme.space[2]};
`;
const ActionButton = styled(TouchableOpacity)`
  flex-direction: row;
  align-items: center;
  justify-content: center;
  background-color: ${(props) => props.theme.colors.ui.primary};
  padding: ${(props) => props.theme.space[2]};
  border-radius: 8px;
  margin-top: ${(props) => props.theme.space[3]};
`;
const ActionButtonText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.inverse};
  font-weight: bold;
  margin-left: ${(props) => props.theme.space[1]};
`;
const ReservationDetails = styled.View`
  background-color: ${(props) => props.theme.colors.bg.secondary};
  padding: ${(props) => props.theme.space[3]};
  margin: ${(props) => props.theme.space[3]};
  border-radius: 8px;
  z-index: 10;
`;
const DetailRow = styled.View`
  flex-direction: row;
  align-items: flex-start;
  margin-bottom: ${(props) => props.theme.space[2]};
`;
const DetailIcon = styled(MaterialIcons)`
  margin-right: ${(props) => props.theme.space[2]};
  color: ${(props) => props.theme.colors.text.secondary};
`;
const DetailInfo = styled.View`
  flex: 1;
`;
const DetailLabel = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.secondary};
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
const DetailValue = styled(CustomText)`
  font-weight: ${(props) => props.theme.fontWeights.bold};
`;
const DetailsActions = styled.View`
  flex-direction: row;
  justify-content: space-around;
  margin-top: ${(props) => props.theme.space[3]};
`;
const DetailsActionButton = styled(TouchableOpacity)`
  align-items: center;
  padding: ${(props) => props.theme.space[2]};
`;
const StatusBadge = styled.View`
  background-color: ${(props) => {
    switch (props.status) {
      case "Confirmed":
        return "#4CAF50";
      case "Pending":
        return "#FFC107";
      case "Completed":
        return "#9E9E9E";
      case "Cancelled":
        return "#F44336";
      default:
        return "#757575";
    }
  }};
  padding: ${(props) => props.theme.space[1]} ${(props) => props.theme.space[2]};
  border-radius: 4px;
  align-self: flex-start;
  margin-bottom: ${(props) => props.theme.space[2]};
`;
const StatusText = styled(CustomText)`
  color: white;
  font-size: ${(props) => props.theme.fontSizes.caption};
  font-weight: bold;
`;
// Card related components
const CardContainer = styled.View`
  position: relative;
`;
const DetailButtonOverlay = styled(TouchableOpacity)`
  position: absolute;
  right: 10px;
  bottom: 10px;
  height: 50px;
  width: 80px;
  z-index: 100;
`;
const ViewButtonOverlay = styled(TouchableOpacity)`
  position: absolute;
  right: 10px;
  top: 0;
  bottom: 0;
  width: 60px;
  z-index: 100;
  justify-content: center;
`;
// Adding a backdrop to close the details
const Backdrop = styled(TouchableWithoutFeedback)`
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  z-index: 5;
`;
export const ReservationsScreen = () => {
  const navigation = useNavigation();
  const [activeTab, setActiveTab] = useState("upcoming");
  const [selectedReservation, setSelectedReservation] = useState(null);
  const scrollViewRef = useRef(null);
  const {
    isLoading,
    getUpcomingReservations,
    getPastReservations,
    cancelReservation,
  } = useReservation();
  // For the demo, we'll use mock data since the context isn't fully implemented
  // In a real app, this would use the context data
  const upcomingReservations = reservations.filter(
    (reservation) =>
      reservation.status === "Confirmed" || reservation.status === "Pending"
  );
  const pastReservations = reservations.filter(
    (reservation) => reservation.status === "Completed"
  );
  // Reset selected reservation when tab changes
  useEffect(() => {
    setSelectedReservation(null);
  }, [activeTab]);
  const formatDate = (dateString) => {
    if (!dateString) return "";
    const date = new Date(dateString);
    if (isToday(date)) return "Today";
    if (isTomorrow(date)) return "Tomorrow";
    return format(date, "EEE, MMM d, yyyy");
  };
  const handleReservationPress = (reservation) => {
    setSelectedReservation(
      selectedReservation?.id === reservation.id ? null : reservation
    );
  };
  const closeDetails = () => {
    setSelectedReservation(null);
  };
  const handleCancelReservation = () => {
    Alert.alert(
      "Cancel Reservation",
      "Are you sure you want to cancel this reservation?",
      [
        {
          text: "No",
          style: "cancel",
        },
        {
          text: "Yes, Cancel",
          style: "destructive",
          onPress: async () => {
            // In a real app, this would use the context
            // await cancelReservation(selectedReservation.id);
            Alert.alert("Cancelled", "Your reservation has been cancelled.");
            setSelectedReservation(null);
          },
        },
      ]
    );
  };
  const handleModifyReservation = () => {
    // Navigate to restaurant detail screen with the reservation data
    navigation.navigate("RestaurantDetailScreen", {
      restaurant: selectedReservation.restaurant,
      openReservationView: true,
      // We'd also pass the existing reservation data to pre-fill the form
    });
  };
  const renderEmptyState = () => (
    <EmptyState>
      <MaterialIcons name="event-busy" size={60} color="#757575" />
      <EmptyStateText>
        {activeTab === "upcoming"
          ? "You don't have any upcoming reservations"
          : "You don't have any past reservations"}
      </EmptyStateText>
      {activeTab === "upcoming" && (
        <ActionButton onPress={() => navigation.navigate("Restaurants")}>
          <MaterialIcons name="add" size={20} color="white" />
          <ActionButtonText>Make a Reservation</ActionButtonText>
        </ActionButton>
      )}
    </EmptyState>
  );
  const renderReservationDetails = () => {
    if (!selectedReservation) return null;
    const isPastReservation = selectedReservation.status === "Completed";
    const formattedDuration = selectedReservation.duration
      ? `${Math.floor(selectedReservation.duration / 60)}h${
          selectedReservation.duration % 60 > 0
            ? ` ${selectedReservation.duration % 60}m`
            : ""
        }`
      : "";
    return (
      <>
        <Backdrop onPress={closeDetails}>
          <View style={{ flex: 1 }} />
        </Backdrop>
        <ReservationDetails>
          <StatusBadge status={selectedReservation.status}>
            <StatusText>{selectedReservation.status}</StatusText>
          </StatusBadge>
          <DetailRow>
            <DetailIcon name="restaurant" size={20} />
            <DetailInfo>
              <DetailLabel>Restaurant</DetailLabel>
              <DetailValue>{selectedReservation.restaurant.name}</DetailValue>
            </DetailInfo>
          </DetailRow>
          <DetailRow>
            <DetailIcon name="event" size={20} />
            <DetailInfo>
              <DetailLabel>Date & Time</DetailLabel>
              <DetailValue>
                {formatDate(selectedReservation.date)} at{" "}
                {selectedReservation.time}
                {formattedDuration && ` (${formattedDuration})`}
              </DetailValue>
            </DetailInfo>
          </DetailRow>
          <DetailRow>
            <DetailIcon name="people" size={20} />
            <DetailInfo>
              <DetailLabel>Party Size</DetailLabel>
              <DetailValue>
                {selectedReservation.people || selectedReservation.seatsNumber}{" "}
                people
              </DetailValue>
            </DetailInfo>
          </DetailRow>
          {selectedReservation.chairs &&
            selectedReservation.chairs.length > 0 && (
              <DetailRow>
                <DetailIcon name="event-seat" size={20} />
                <DetailInfo>
                  <DetailLabel>Seating</DetailLabel>
                  <DetailValue>
                    Seats: {selectedReservation.chairs.join(", ")}
                  </DetailValue>
                </DetailInfo>
              </DetailRow>
            )}
          {selectedReservation.counterSeatId && (
            <DetailRow>
              <DetailIcon name="event-seat" size={20} />
              <DetailInfo>
                <DetailLabel>Seating</DetailLabel>
                <DetailValue>
                  Counter Seat: {selectedReservation.counterSeatId}
                </DetailValue>
              </DetailInfo>
            </DetailRow>
          )}
          {selectedReservation.note && (
            <DetailRow>
              <DetailIcon name="notes" size={20} />
              <DetailInfo>
                <DetailLabel>Special Requests</DetailLabel>
                <DetailValue>{selectedReservation.note}</DetailValue>
              </DetailInfo>
            </DetailRow>
          )}
          {!isPastReservation && (
            <DetailsActions>
              <DetailsActionButton onPress={handleModifyReservation}>
                <MaterialIcons name="edit" size={24} color="#262626" />
                <CustomText>Modify</CustomText>
              </DetailsActionButton>
              <DetailsActionButton
                onPress={() => {
                  navigation.navigate("RestaurantDetailScreen", {
                    restaurant: selectedReservation.restaurant,
                  });
                }}
              >
                <MaterialIcons name="info" size={24} color="#262626" />
                <CustomText>Details</CustomText>
              </DetailsActionButton>
              <DetailsActionButton onPress={handleCancelReservation}>
                <MaterialIcons name="cancel" size={24} color="#F44336" />
                <CustomText style={{ color: "#F44336" }}>Cancel</CustomText>
              </DetailsActionButton>
            </DetailsActions>
          )}
        </ReservationDetails>
      </>
    );
  };
  return (
    <Container>
      <TabBar>
        <Tab
          active={activeTab === "upcoming"}
          onPress={() => setActiveTab("upcoming")}
        >
          <TabText active={activeTab === "upcoming"}>Upcoming</TabText>
        </Tab>
        <Tab active={activeTab === "past"} onPress={() => setActiveTab("past")}>
          <TabText active={activeTab === "past"}>Past</TabText>
        </Tab>
      </TabBar>
      {selectedReservation && renderReservationDetails()}
      <ScrollView ref={scrollViewRef} onScrollBeginDrag={closeDetails}>
        {activeTab === "upcoming" && (
          <>
            {upcomingReservations.length > 0 ? (
              <>
                <SectionTitle variant="title">
                  Upcoming Reservations
                </SectionTitle>
                {upcomingReservations.map((reservation, index) => (
                  <FadeInView key={reservation.id} duration={300 + index * 100}>
                    <CardContainer>
                      <ReservationCard
                        reservation={reservation}
                        isSelected={selectedReservation?.id === reservation.id}
                      />
                      <DetailButtonOverlay
                        onPress={() => handleReservationPress(reservation)}
                      />
                    </CardContainer>
                    {index < upcomingReservations.length - 1 && (
                      <Separator type="full" />
                    )}
                  </FadeInView>
                ))}
              </>
            ) : (
              renderEmptyState()
            )}
          </>
        )}
        {activeTab === "past" && (
          <>
            {pastReservations.length > 0 ? (
              <>
                <SectionTitle variant="title">Past Reservations</SectionTitle>
                <Spacer position="top" size="small" />
                {pastReservations.map((reservation, index) => (
                  <FadeInView key={reservation.id} duration={300 + index * 100}>
                    <CardContainer>
                      <PastReservationCard
                        reservation={reservation}
                        isSelected={selectedReservation?.id === reservation.id}
                      />
                      <ViewButtonOverlay
                        onPress={() => handleReservationPress(reservation)}
                      />
                    </CardContainer>
                    {index < pastReservations.length - 1 && (
                      <Separator type="partial" />
                    )}
                  </FadeInView>
                ))}
              </>
            ) : (
              renderEmptyState()
            )}
          </>
        )}
      </ScrollView>
    </Container>
  );
};

================
File: restaurants/components/Others.js
================
import React from "react";
import { View, Text } from "react-native";
import { List, Divider } from "react-native-paper";
const Others = () => (
  <View>
    <Text style={{ fontSize: 24, margin: 16 }}>Others</Text>
    <List.Accordion
      title="Others"
      left={(props) => <List.Icon {...props} icon="dots-horizontal" />}
    >
      {Array.from({ length: 50 }, (_, index) => (
        <List.Item key={index} title={`Other ${index + 1}`} />
      ))}
    </List.Accordion>
    <Divider />
  </View>
);
export default Others;

================
File: restaurants/components/RestaurantInfoCard.js
================
import React from "react";
import { View } from "react-native";
import { SvgXml } from "react-native-svg";
import { Spacer } from "../../../../components/Spacer/Spacer";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { Favourite } from "../../../../components/Favourite/Favourite";
import star from "../../../../../assets/icons/star";
import open from "../../../../../assets/icons/open";
import {
  RestaurantCard,
  RestaurantCardCover,
  Address,
  Info,
  Section,
  Rating,
  OperationStatus,
  Icon,
} from "./RestaurantInfoCard.styles";
export const RestaurantInfoCard = ({ restaurant = {}, elevation = 5 }) => {
  const {
    name = "Sick Eats",
    icon = "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
    photos = [
      "https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8Zm9vZHxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60",
    ],
    address = "100 random sick avenue",
    isOpenNow = true,
    rating = 4,
    isClosedTemporarily = true,
    placeId,
  } = restaurant;
  const ratingArray = Array.from(new Array(Math.floor(rating)));
  return (
    <RestaurantCard elevation={elevation}>
      <View>
        <Favourite restaurant={restaurant} />
        <RestaurantCardCover key={name} source={{ uri: photos[0] }} />
      </View>
      <Info>
        <CustomText variant="label">{name}</CustomText>
        <Section>
          <Rating>
            {ratingArray.map((_, i) => (
              <SvgXml
                key={`star-${placeId}-${i}`}
                xml={star}
                width={20}
                height={20}
              />
            ))}
          </Rating>
          <OperationStatus>
            {isClosedTemporarily && (
              <CustomText variant="error">CLOSED TEMPORARILY</CustomText>
            )}
            {isOpenNow && <SvgXml xml={open} width={20} height={20} />}
            <Spacer position="left" size="large">
              <Icon source={{ uri: icon }} />
            </Spacer>
          </OperationStatus>
        </Section>
        <Address>{address}</Address>
      </Info>
    </RestaurantCard>
  );
};

================
File: restaurants/components/RestaurantInfoCard.styles.js
================
import { Image, View, Text } from 'react-native';
import { Card } from 'react-native-paper';
import styled from 'styled-components/native';
export const RestaurantCard = styled(Card)`
  background-color: ${(props) => props.theme.colors.bg.primary};
  width: 95%;
  align-self: center;
`;
export const RestaurantCardCover = styled(Card.Cover)`
  padding: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
export const Address = styled(Text)`
  font-family: ${(props) => props.theme.fonts.body};
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
export const Info = styled(View)`
  padding: ${(props) => props.theme.space[3]};
`;
export const Section = styled(View)`
  flex-direction: row;
  align-items: center;
`;
export const Rating = styled(View)`
  flex-direction: row;
  padding-top: ${(props) => props.theme.space[2]};
  padding-bottom: ${(props) => props.theme.space[2]};
`;
export const OperationStatus = styled(View)`
  flex: 1;
  flex-direction: row;
  justify-content: flex-end;
`;
export const Icon = styled(Image)`
  width: 15px;
  height: 15px;
`;

================
File: restaurants/components/RestaurantList.styles.js
================
import { FlatList } from "react-native";
import { Button } from "react-native-paper";
import styled from "styled-components/native";
import { colors } from "../../../../infrastructure/theme/colors";
export const RestaurantList = styled(FlatList).attrs({
  contentContainerStyle: {
    padding: 16,
  },
})``;
export const OrderButton = styled(Button).attrs({
  color: colors.brand.primary,
})`
  padding: ${(props) => props.theme.space[2]};
  width: 80%;
  align-self: center;
`;

================
File: restaurants/components/RestaurantMenu.js
================
import React from "react";
import { View, Text } from "react-native";
import { List, Divider } from "react-native-paper";
const RestaurantMenu = () => (
  <View>
    <Text style={{ fontSize: 24, margin: 16 }}>Menu</Text>
    <List.Accordion
      title="Menu"
      left={(props) => <List.Icon {...props} icon="bread-slice" />}
    >
      {Array.from({ length: 30 }, (_, index) => (
        <List.Item key={index} title={`Item ${index + 1}`} />
      ))}
    </List.Accordion>
    <Divider />
  </View>
);
export default RestaurantMenu;

================
File: restaurants/components/RestaurantTabBar.js
================
import React, { useRef, useEffect, useCallback, useState } from "react";
import { View, TouchableOpacity, Animated, StyleSheet } from "react-native";
import { useTheme } from "styled-components/native";
const TabBar = (props) => {
  const { routes, navigationState, scrollToTab, setIndex } = props;
  const theme = useTheme();
  const indicatorPosition = useRef(
    new Animated.Value(navigationState.index * (100 / routes.length))
  ).current;
  const [animationProgress, setAnimationProgress] = useState(
    navigationState.index
  );
  const animationRef = useRef(null);
  useEffect(() => {
    if (animationRef.current) {
      animationRef.current.stop();
    }
    animationRef.current = Animated.timing(indicatorPosition, {
      toValue: navigationState.index * (100 / routes.length),
      duration: 100,
      useNativeDriver: false,
    });
    animationRef.current.start();
    const listenerId = indicatorPosition.addListener(({ value }) => {
      const currentSegmentValue = value / (100 / routes.length);
      const closestIndex = Math.round(currentSegmentValue);
      if (closestIndex !== animationProgress) {
        setAnimationProgress(closestIndex);
      }
    });
    return () => {
      indicatorPosition.removeListener(listenerId);
    };
  }, [navigationState.index, routes.length, indicatorPosition]);
  const handleTabPress = useCallback(
    (route, index) => {
      if (navigationState.index !== index && scrollToTab) {
        scrollToTab(route.key, index);
      }
    },
    [scrollToTab, navigationState.index]
  );
  return (
    <View style={[styles.tabBar, { backgroundColor: theme.colors.bg.primary }]}>
      {routes.map((route, i) => {
        const isActive = animationProgress === i;
        return (
          <TouchableOpacity
            key={route.key}
            style={styles.tabItem}
            onPress={() => handleTabPress(route, i)}
            activeOpacity={0.7}
          >
            <Animated.Text
              style={{
                color: isActive
                  ? theme.colors.text.primary
                  : theme.colors.text.secondary,
                fontFamily: theme.fonts.body,
                fontSize: parseInt(theme.fontSizes.body, 10),
                fontWeight: isActive ? "bold" : "normal",
              }}
            >
              {route.title}
            </Animated.Text>
          </TouchableOpacity>
        );
      })}
      {}
      <Animated.View
        style={[
          styles.indicator,
          {
            backgroundColor: theme.colors.text.primary,
            left: indicatorPosition.interpolate({
              inputRange: [0, 100],
              outputRange: ["0%", "100%"],
            }),
            width: `${100 / routes.length}%`,
          },
        ]}
      />
    </View>
  );
};
const styles = StyleSheet.create({
  tabBar: {
    flexDirection: "row",
    height: 48,
    elevation: 0,
    shadowOpacity: 0,
    borderBottomWidth: 1,
    borderBottomColor: "#F0F0F0",
    position: "relative",
    backgroundColor: "white",
  },
  tabItem: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 12,
  },
  indicator: {
    position: "absolute",
    bottom: 0,
    height: 2,
    borderRadius: 1,
  },
});
export default TabBar;

================
File: restaurants/components/Reviews.js
================
import React from "react";
import { View, Text } from "react-native";
import { List, Divider } from "react-native-paper";
const Reviews = () => (
  <View>
    <Text style={{ fontSize: 24, margin: 16 }}>Reviews</Text>
    <List.Accordion
      title="Reviews"
      left={(props) => <List.Icon {...props} icon="star" />}
    >
      {Array.from({ length: 50 }, (_, index) => (
        <List.Item key={index} title={`Review ${index + 1}`} />
      ))}
    </List.Accordion>
    <Divider />
  </View>
);
export default Reviews;

================
File: restaurants/components/Search.js
================
import React, { useContext, useState, useEffect } from "react";
import { View } from "react-native";
import { Searchbar } from "react-native-paper";
import styled from "styled-components/native";
const SearchContainer = styled(View)`
  padding: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.brand.secondary};
`;
export const Search = () => {
  keyword = "TestKeyword";
  const [searchKeyword, setSearchKeyword] = useState(keyword);
  useEffect(() => {
    setSearchKeyword(keyword);
  }, [keyword]);
  return (
    <SearchContainer>
      <Searchbar
        placeholder="Search"
        value={searchKeyword}
        onChangeText={(text) => setSearchKeyword(text)}
        style={{ backgroundColor: "#ffffff" }}
      />
    </SearchContainer>
  );
};

================
File: restaurants/components/TabNavigation.js
================
import React from "react";
import { TabView, SceneMap } from "react-native-tab-view";
import { Animated } from "react-native";
import RestaurantMenu from "./RestaurantMenu";
import Reviews from "./Reviews";
import Others from "./Others";
import TabBar from "./RestaurantTabBar";
const renderSceneMap = {
  menu: RestaurantMenu,
  reviews: Reviews,
  others: Others,
};
const TabNavigation = ({
  index,
  setIndex,
  routes,
  layout,
  renderOpacity,
  scrollToTab,
  heights,
}) => {
  const renderScene = SceneMap(renderSceneMap);
  const handleIndexChange = (newIndex) => {
    if (scrollToTab && routes[newIndex]) {
      scrollToTab(routes[newIndex].key, newIndex);
    }
  };
  return (
    <Animated.View style={{ opacity: renderOpacity }}>
      <TabView
        navigationState={{ index, routes }}
        renderScene={renderScene}
        renderTabBar={(props) => (
          <TabBar
            {...props}
            routes={routes}
            scrollToTab={scrollToTab}
            setIndex={setIndex}
          />
        )}
        onIndexChange={handleIndexChange}
        initialLayout={{ width: layout.width }}
        swipeEnabled={true}
      />
    </Animated.View>
  );
};
export default TabNavigation;

================
File: restaurants/hooks/useReservationHandler.js
================
import { useState } from "react";
import { Animated } from "react-native";
const useReservationHandler = () => {
  const [isReservation, setIsReservation] = useState(false);
  const [isShowReservationContent, setIsShowReservationContent] =
    useState(false);
  const [opacity] = useState(new Animated.Value(1));
  const animateAndSwitch = (newIsReservation) => {
    Animated.timing(opacity, {
      toValue: 0,
      duration: 200,
      useNativeDriver: true,
    }).start(() => {
      setIsReservation(newIsReservation);
      setTimeout(() => {
        setIsShowReservationContent(newIsReservation);
        Animated.timing(opacity, {
          toValue: 1,
          duration: 200,
          useNativeDriver: true,
        }).start();
      }, 200);
    });
  };
  return {
    isReservation,
    isShowReservationContent,
    opacity,
    animateAndSwitch,
  };
};
export default useReservationHandler;

================
File: restaurants/hooks/useScrollHandler.js
================
import { useState, useCallback } from "react";
const useScrollHandler = (routes, heights, setIndex) => {
  const handleScroll = useCallback(
    (event) => {
      const scrollYValue = event.nativeEvent.contentOffset.y;
      let accumulatedHeight =
        heights.restaurantInfoCard + heights.ReservationButton + heights.switch;
      for (let i = 0; i < routes.length; i++) {
        if (
          scrollYValue <
          accumulatedHeight + (heights.content[routes[i].key] || 0) / 2
        ) {
          setIndex(i);
          break;
        }
        accumulatedHeight += heights.content[routes[i].key] || 0;
      }
    },
    [routes, heights, setIndex]
  );
  return handleScroll;
};
export default useScrollHandler;

================
File: restaurants/screens/RestaurantDetailScreen.js
================
import React, { useState, useRef, useEffect, useCallback } from "react";
import {
  Animated,
  Dimensions,
  View,
  TouchableOpacity,
  Modal,
  StatusBar,
  Platform,
  Pressable,
} from "react-native";
import styled from "styled-components/native";
import { MaterialIcons } from "@expo/vector-icons";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import SwitchContainer from "../../../../components/Switch/Switch";
import WebApp from "../../../../components/WebApp/WebApp";
import ErrorBoundary from "../../../../components/ErrorBoundary/ErrorBoundary";
import { BackButton } from "../../../../components/BackButton/BackButton";
import { RestaurantInfoCard } from "../components/RestaurantInfoCard";
import RestaurantMenu from "../components/RestaurantMenu";
import Reviews from "../components/Reviews";
import Others from "../components/Others";
import TabNavigation from "../components/TabNavigation";
import useScrollHandler from "../hooks/useScrollHandler";
import useReservationHandler from "../hooks/useReservationHandler";
import ReservationFlow from "../../reservations/screens/ReservationFlow";
import { EditButton } from "../../../merchant/settings/components/EditButton";
export const Header = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: center;
  padding: ${(props) => props.theme.space[2]};
  position: relative;
  background-color: ${(props) => props.theme.colors.bg.primary};
  margin-bottom: ${(props) => props.theme.space[2]};
`;
const Spacing = styled.View`
  padding-bottom: ${(props) => props.theme.space[2]};
`;
const ReservationButton = styled(TouchableOpacity)`
  background-color: ${(props) => props.theme.colors.ui.primary};
  padding: ${(props) => props.theme.space[2]};
  border-radius: 8px;
  align-items: center;
  justify-content: center;
  margin-horizontal: ${(props) => props.theme.space[3]};
  margin-vertical: ${(props) => props.theme.space[2]};
`;
const ReservationButtonText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.inverse};
  font-size: ${(props) => props.theme.fontSizes.body};
  font-weight: ${(props) => props.theme.fontWeights.bold};
`;
const ModalContainer = styled.View`
  flex: 1;
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
const ModalHeader = styled.View`
  flex-direction: row;
  align-items: center;
  padding: ${(props) => props.theme.space[3]};
  border-bottom-width: 1px;
  border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
  margin-top: ${(props) => (Platform.OS === "ios" ? props.theme.space[4] : 0)};
`;
const ModalTitle = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.title};
  font-weight: ${(props) => props.theme.fontWeights.bold};
  flex: 1;
  text-align: center;
`;
const CloseButton = styled(TouchableOpacity)`
  padding: ${(props) => props.theme.space[2]};
`;
const formatAddressToString = (address) => {
  if (!address) return "Default Address";
  const { street, city, state, postalCode, country } = address;
  const parts = [street, city, state, postalCode, country].filter(Boolean);
  return parts.join(", ");
};
export const RestaurantDetailScreen = ({ route, navigation }) => {
  const initialRestaurant = route.params?.restaurant || {};
  const [restaurant, setRestaurant] = useState(initialRestaurant);
  const isMerchantView = route.params?.isMerchantView || false;
  const openReservationView = route.params?.openReservationView || false;
  const [showReservationModal, setShowReservationModal] =
    useState(openReservationView);
  useEffect(() => {
    if (!restaurant.address) {
      setRestaurant((prev) => ({
        ...prev,
        address: {
          street: "",
          city: "",
          state: "",
          postalCode: "",
        },
      }));
    }
  }, []);
  // Update restaurant if coming back from edit screen
  useEffect(() => {
    if (route.params?.updatedRestaurant) {
      setRestaurant(route.params.updatedRestaurant);
    }
  }, [route.params?.updatedRestaurant]);
  const layout = useRef(Dimensions.get("window")).current;
  const [index, setIndex] = useState(0);
  const [routes] = useState([
    { key: "menu", title: "Menu" },
    { key: "reviews", title: "Reviews" },
    { key: "others", title: "Others" },
  ]);
  const scrollY = useRef(new Animated.Value(0)).current;
  const scrollViewRef = useRef(null);
  const [heights, setHeights] = useState({
    restaurantInfoCard: 0,
    ReservationButton: 0,
    switch: 0,
    content: {},
  });
  const { isReservation, isShowReservationContent, opacity, animateAndSwitch } =
    useReservationHandler();
  const [scrollEnabled, setScrollEnabled] = useState(true);
  const handleScroll = useScrollHandler(routes, heights, setIndex);
  const scrollToTab = useCallback(
    (tabKey, newIndex) => {
      let yPosition =
        heights.restaurantInfoCard + heights.ReservationButton + heights.switch;
      for (let i = 0; i < routes.length; i++) {
        if (routes[i].key === tabKey) break;
        yPosition += heights.content[routes[i].key] || 0;
      }
      scrollViewRef.current?.scrollTo({
        y: yPosition,
        animated: false,
      });
      setIndex(newIndex);
    },
    [heights, routes]
  );
  const handleInteractionStart = () => {
    setScrollEnabled(false);
  };
  const handleInteractionEnd = () => {
    setScrollEnabled(true);
  };
  const handleEditPress = () => {
    navigation.navigate("RestaurantEdit", {
      restaurant: restaurant,
    });
  };
  const handleCloseModal = () => {
    setShowReservationModal(false);
  };
  const handleReservationComplete = (reservationDetails) => {
    setShowReservationModal(false);
    setTimeout(() => {
      navigation.navigate("Reservations");
    }, 500);
  };
  return (
    <SafeArea>
      <Header>
        <BackButton />
        <CustomText variant="title">
          {isMerchantView ? "Restaurant Details" : "Restaurant"}
        </CustomText>
        {isMerchantView && (
          <EditButton position="absolute" onPress={handleEditPress} />
        )}
      </Header>
      <View style={{ flex: 1 }}>
        <Animated.ScrollView
          scrollEnabled={scrollEnabled}
          ref={scrollViewRef}
          scrollEventThrottle={16}
          onScroll={Animated.event(
            [{ nativeEvent: { contentOffset: { y: scrollY } } }],
            { listener: handleScroll, useNativeDriver: false }
          )}
          stickyHeaderIndices={isReservation ? [] : [3]}
        >
          <Spacing
            onLayout={(event) =>
              setHeights({
                ...heights,
                restaurantInfoCard: event.nativeEvent.layout.height,
              })
            }
          >
            <RestaurantInfoCard
              restaurant={{
                ...restaurant,
                address: formatAddressToString(restaurant.address),
                icon:
                  restaurant.icon ||
                  "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
                isOpenNow:
                  restaurant.isOpenNow !== undefined
                    ? restaurant.isOpenNow
                    : true,
                rating: restaurant.rating || 4,
                isClosedTemporarily: restaurant.isClosedTemporarily || false,
                placeId: restaurant.id || restaurant.placeId || "1",
              }}
              elevation={0}
            />
          </Spacing>
          <View
            onLayout={(event) =>
              setHeights({
                ...heights,
                ReservationButton: event.nativeEvent.layout.height,
              })
            }
          >
            {!isMerchantView && (
              <ReservationButton onPress={() => setShowReservationModal(true)}>
                <ReservationButtonText>
                  Make a Reservation
                </ReservationButtonText>
              </ReservationButton>
            )}
          </View>
          <View
            onLayout={(event) =>
              setHeights({
                ...heights,
                switch: event.nativeEvent.layout.height,
              })
            }
          >
            <SwitchContainer
              isOn={isReservation}
              setIsOn={(newValue) => animateAndSwitch(newValue)}
              leftLabel="General"
              rightLabel="Reservation"
              variant="default"
            />
          </View>
          {!isShowReservationContent && !isReservation && (
            <TabNavigation
              index={index}
              setIndex={setIndex}
              routes={routes}
              layout={layout}
              scrollToTab={scrollToTab}
              heights={heights}
            />
          )}
          {!isShowReservationContent &&
            !isReservation &&
            routes.map((route) => (
              <Animated.View key={route.key} style={{ opacity }}>
                <View
                  onLayout={(event) =>
                    setHeights({
                      ...heights,
                      content: {
                        ...heights.content,
                        [route.key]: event.nativeEvent.layout.height,
                      },
                    })
                  }
                >
                  {React.createElement(
                    route.key === "menu"
                      ? RestaurantMenu
                      : route.key === "reviews"
                      ? Reviews
                      : Others
                  )}
                </View>
              </Animated.View>
            ))}
          {isShowReservationContent && isReservation && (
            <Animated.View style={{ opacity, flex: 1 }}>
              <ErrorBoundary>
                <WebApp
                  onInteractionStart={handleInteractionStart}
                  onInteractionEnd={handleInteractionEnd}
                />
              </ErrorBoundary>
            </Animated.View>
          )}
        </Animated.ScrollView>
      </View>
      <Modal
        visible={showReservationModal}
        animationType="slide"
        transparent={false}
        onRequestClose={handleCloseModal}
      >
        <StatusBar barStyle="dark-content" />
        <ModalContainer>
          <ModalHeader>
            <CloseButton onPress={handleCloseModal} activeOpacity={0.7}>
              <MaterialIcons name="close" size={24} color="#262626" />
            </CloseButton>
            <ModalTitle>Reservation</ModalTitle>
            <View style={{ width: 24 }} />
          </ModalHeader>
          <ReservationFlow
            restaurant={restaurant}
            onComplete={handleReservationComplete}
          />
        </ModalContainer>
      </Modal>
    </SafeArea>
  );
};

================
File: restaurants/screens/RestaurantsScreen.js
================
import React, { useContext, useState } from "react";
import { View, TouchableOpacity } from "react-native";
import { ActivityIndicator, Colors } from "react-native-paper";
import styled from "styled-components/native";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import { FadeInView } from "../../../../components/FadeInView/FadeInView";
import { Spacer } from "../../../../components/Spacer/Spacer";
import { restaurants } from "../../../../data/mockData";
import { Search } from "../components/Search";
import { RestaurantList } from "../components/RestaurantList.styles";
import { RestaurantInfoCard } from "../components/RestaurantInfoCard";
const LoadingContainer = styled(View)`
  position: absolute;
  top: 50%;
  left: 50%;
`;
const Loading = styled(ActivityIndicator)`
  margin-left: -25px;
`;
export const RestaurantsScreen = ({ navigation }) => {
  const [isToggled, setIsToggled] = useState(false);
  return (
    <SafeArea>
      <Search
        isFavouritesToggled={isToggled}
        onFavouritesToggle={() => setIsToggled(!isToggled)}
      />
      <RestaurantList
        data={restaurants}
        renderItem={({ item }) => {
          return (
            <TouchableOpacity
              onPress={() =>
                navigation.navigate("RestaurantDetailScreen", {
                  restaurant: item,
                })
              }
            >
              <Spacer position="bottom" size="large">
                <FadeInView>
                  <RestaurantInfoCard restaurant={item} />
                </FadeInView>
              </Spacer>
            </TouchableOpacity>
          );
        }}
        keyExtractor={(item) => item.name}
      />
    </SafeArea>
  );
};

================
File: settings/screens/AccountSettingsScreen.js
================
import React from "react";
import { Avatar } from "react-native-paper";
import { MaterialIcons } from "@expo/vector-icons";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { BackButton } from "../../../../components/BackButton/BackButton";
import { users } from "../../../../data/mockData";
import {
  SettingsContainer,
  Header,
  SectionTitle,
  ProfileContainer,
  SettingsItemRow,
  SettingsItemText,
  SectionContainer,
} from "./AccountSettingsScreen.styles";
export const AccountSettingsScreen = () => {
  const user = users[0];
  const basicInfoItems = [
    {
      title: "Name",
      value: user.username,
      icon: "account-circle",
      onPress: () => console.log("Navigate to edit name"),
    },
    {
      title: "Phone Number",
      value: user.phoneNumber,
      icon: "phone",
      onPress: () => console.log("Navigate to edit phone"),
    },
    {
      title: "Email",
      value: user.email,
      icon: "email",
      onPress: () => console.log("Navigate to edit email"),
    },
  ];
  const privacyItems = [
    {
      title: "Password",
      value: "Change your password",
      icon: "lock",
      onPress: () => console.log("Navigate to change password"),
    },
    {
      title: "Privacy Settings",
      value: "Manage your data",
      icon: "security",
      onPress: () => console.log("Navigate to privacy settings"),
    },
  ];
  const preferencesItems = [
    {
      title: "Notifications",
      value: "Customize your alerts",
      icon: "notifications",
      onPress: () => console.log("Navigate to notifications"),
    },
    {
      title: "Language",
      value: "English",
      icon: "language",
      onPress: () => console.log("Navigate to language settings"),
    },
    {
      title: "Appearance",
      value: "Light mode",
      icon: "palette",
      onPress: () => console.log("Navigate to appearance settings"),
    },
  ];
  const renderSettingsItems = (items) => {
    return items.map((item, index) => (
      <SettingsItemRow key={index} onPress={item.onPress}>
        <MaterialIcons name={item.icon} size={24} color="#262626" />
        <SettingsItemText>
          <CustomText variant="body" style={{ fontWeight: "bold" }}>
            {item.title}
          </CustomText>
          <CustomText variant="body" style={{ color: "#757575" }}>
            {item.value}
          </CustomText>
        </SettingsItemText>
        <MaterialIcons name="chevron-right" size={24} color="#757575" />
      </SettingsItemRow>
    ));
  };
  return (
    <SafeArea>
      <SettingsContainer showsVerticalScrollIndicator={false}>
        <Header>
          <BackButton />
          <CustomText variant="title">Account Settings</CustomText>
        </Header>
        {}
        <ProfileContainer>
          <Avatar.Image size={80} source={user.profileImage} />
        </ProfileContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">BASIC INFO</SectionTitle>
          {renderSettingsItems(basicInfoItems)}
        </SectionContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">PRIVACY & SECURITY</SectionTitle>
          {renderSettingsItems(privacyItems)}
        </SectionContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">PREFERENCES</SectionTitle>
          {renderSettingsItems(preferencesItems)}
        </SectionContainer>
      </SettingsContainer>
    </SafeArea>
  );
};

================
File: settings/screens/AccountSettingsScreen.styles.js
================
import styled from "styled-components/native";
import { ScrollView, TouchableOpacity } from "react-native";
import { CustomText } from "../../../../components/CustomText/CustomText";
export const SettingsContainer = styled(ScrollView)`
  background-color: ${(props) => props.theme.colors.bg.primary};
  flex: 1;
  margin: ${(props) => props.theme.space[1]};
`;
export const Header = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: center;
  padding: ${(props) => props.theme.space[2]};
  position: relative;
  margin-bottom: ${(props) => props.theme.space[2]};
`;
export const CloseButtonWrapper = styled.View`
  position: absolute;
  left: ${(props) => props.theme.space[2]};
`;
export const SectionTitle = styled(CustomText)`
  font-weight: ${(props) => props.theme.fontWeights.bold};
  color: ${(props) => props.theme.colors.text.secondary};
  font-size: ${(props) => props.theme.fontSizes.caption};
  margin-bottom: ${(props) => props.theme.space[2]};
  margin-left: ${(props) => props.theme.space[3]};
`;
export const SectionContainer = styled.View`
  margin-top: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const ProfileContainer = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: center;
  padding: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[2]};
`;
export const SettingsItemRow = styled(TouchableOpacity)`
  flex-direction: row;
  align-items: center;
  padding-vertical: ${(props) => props.theme.space[3]};
  padding-horizontal: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
export const SettingsItemText = styled.View`
  flex: 1;
  margin-left: ${(props) => props.theme.space[3]};
`;

================
File: settings/screens/SettingsScreen.js
================
import React from "react";
import { View, TouchableOpacity } from "react-native";
import { Avatar } from "react-native-paper";
import { MaterialIcons } from "@expo/vector-icons";
import styled from "styled-components/native";
import { useAuthentication } from "../../../../services/AuthenticationContext";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { users } from "../../../../data/mockData";
const SettingsContainer = styled.ScrollView`
  background-color: ${(props) => props.theme.colors.bg.primary};
  flex: 1;
  margin: ${(props) => props.theme.space[1]};
`;
const ProfileContainer = styled.View`
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.primary};
  margin-bottom: ${(props) => props.theme.space[2]};
`;
const UserInfoContainer = styled.View`
  flex: 1;
  margin-right: ${(props) => props.theme.space[2]};
  align-items: flex-start;
`;
const AvatarContainer = styled.View`
  align-items: center;
  justify-content: center;
`;
const EmailText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.secondary};
`;
const SectionTitle = styled(CustomText)`
  padding: ${(props) => props.theme.space[3]};
  font-weight: ${(props) => props.theme.fontWeights.bold};
  color: ${(props) => props.theme.colors.text.secondary};
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
const SettingsItemRow = styled(TouchableOpacity)`
  flex-direction: row;
  align-items: center;
  padding-vertical: ${(props) => props.theme.space[3]};
  padding-horizontal: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
const SettingsItemText = styled.View`
  flex: 1;
  margin-left: ${(props) => props.theme.space[3]};
`;
const SectionContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const SettingsScreen = ({ navigation }) => {
  const { onLogout } = useAuthentication();
  const user = users[0];
  const accountItems = [
    {
      title: "Account Settings",
      subtitle: "Manage your personal information",
      icon: "manage-accounts",
      onPress: () => navigation.navigate("AccountSettings"),
    },
    {
      title: "Reservations",
      subtitle: "View and manage your restaurant reservations",
      icon: "book-online",
      onPress: () => navigation.navigate("Reservations"),
    },
    {
      title: "Payment Methods",
      subtitle: "Manage your saved payment options",
      icon: "payment",
      onPress: () => navigation.navigate("PaymentMethods"),
    },
  ];
  const preferencesItems = [
    {
      title: "Notifications",
      subtitle: "Manage your notification settings",
      icon: "notifications",
      onPress: () => {},
    },
    {
      title: "Language",
      subtitle: "Change your preferred language",
      icon: "translate",
      onPress: () => {},
    },
    {
      title: "Appearance",
      subtitle: "Customize the app's look and feel",
      icon: "palette",
      onPress: () => {},
    },
  ];
  const supportItems = [
    {
      title: "Help",
      subtitle: "Get support and read FAQs",
      icon: "help",
      onPress: () => {},
    },
    {
      title: "About",
      subtitle: "Learn more about SeatMaster",
      icon: "info",
      onPress: () => {},
    },
    {
      title: "Logout",
      subtitle: "Sign out from your account",
      icon: "logout",
      iconColor: (props) => props.theme.colors.text.error,
      onPress: onLogout,
    },
  ];
  const renderSettingsItems = (items) => {
    return items.map((item, index) => (
      <SettingsItemRow key={index} onPress={item.onPress}>
        <MaterialIcons
          name={item.icon}
          size={24}
          color={item.iconColor || "#262626"}
        />
        <SettingsItemText>
          <CustomText variant="body" style={{ fontWeight: "bold" }}>
            {item.title}
          </CustomText>
          <CustomText variant="body" style={{ color: "#757575" }}>
            {item.subtitle}
          </CustomText>
        </SettingsItemText>
        <MaterialIcons name="chevron-right" size={24} color="#757575" />
      </SettingsItemRow>
    ));
  };
  return (
    <SafeArea>
      <SettingsContainer>
        {}
        <ProfileContainer>
          <UserInfoContainer>
            <CustomText variant="h3">{user.username}</CustomText>
            <EmailText variant="caption">{user.email}</EmailText>
            <EmailText variant="caption">{user.phoneNumber}</EmailText>
          </UserInfoContainer>
          <AvatarContainer>
            <TouchableOpacity onPress={() => {}}>
              <Avatar.Image
                size={80}
                source={user.profileImage}
                backgroundColor={(props) => props.theme.colors.brand.primary}
              />
            </TouchableOpacity>
          </AvatarContainer>
        </ProfileContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">ACCOUNT</SectionTitle>
          {renderSettingsItems(accountItems)}
        </SectionContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">PREFERENCES</SectionTitle>
          {renderSettingsItems(preferencesItems)}
        </SectionContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">SUPPORT</SectionTitle>
          {renderSettingsItems(supportItems)}
        </SectionContainer>
      </SettingsContainer>
    </SafeArea>
  );
};

================
File: CustomText.js
================
import { Text } from "react-native";
import styled from "styled-components";
const defaultTextStyles = (theme) => `
  font-family: ${theme.fonts.body};
  font-weight: ${theme.fontWeights.regular};
  color: ${theme.colors.text.primary};
  flex-wrap: wrap;
  margin-top: 0px;
  margin-bottom: 0px;
`;
const title = (theme) => `
  font-size: ${theme.fontSizes.title};
  font-weight: ${theme.fontWeights.medium};
`;
const h5 = (theme) => `
  font-size: ${theme.fontSizes.h5};
`;
const h4 = (theme) => `
  font-size: ${theme.fontSizes.h4};
`;
const h3 = (theme) => `
  font-size: ${theme.fontSizes.h3};
`;
const h2 = (theme) => `
  font-size: ${theme.fontSizes.h2};
`;
const h1 = (theme) => `
  font-size: ${theme.fontSizes.h1};
`;
const body = (theme) => `
  font-size: ${theme.fontSizes.body};
`;
const hint = (theme) => `
  font-size: ${theme.fontSizes.body};
`;
const error = (theme) => `
  color: ${theme.colors.text.error};
`;
const caption = (theme) => `
  font-size: ${theme.fontSizes.caption};
  font-weight: ${theme.fontWeights.bold};
`;
const label = (theme) => `
  font-family: ${theme.fonts.heading};
  font-size: ${theme.fontSizes.body};
  font-weight: ${theme.fontWeights.medium};
`;
const variants = {
  body,
  hint,
  error,
  label,
  caption,
  title,
  h5,
  h4,
  h3,
  h2,
  h1,
};
export const CustomText = styled(Text)`
  ${({ theme }) => defaultTextStyles(theme)};
  ${({ variant, theme }) => variants[variant](theme)};
`;
CustomText.defaultProps = {
  variant: "body",
};



================================================================
End of Codebase
================================================================
