This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix. The content has been processed where comments have been removed, empty lines have been removed.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/**/*, *.*
- Files matching these patterns are excluded: **/*.log, node_modules/**/*
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  components/
    BackButton/
      BackButton.js
    CustomText/
      CustomText.js
    ErrorBoundary/
      ErrorBoundary.js
    FadeInView/
      FadeInView.js
    Favourite/
      Favourite.js
    GlobalWrapper/
      GlobalWrapper.js
    LanguageSelector/
      LanguageSelector.js
    SafeArea/
      SafeArea.js
    Separator/
      Separator.js
      Separator.styles.js
    Spacer/
      Spacer.js
    Switch/
      Switch.js
      Switch.styles.js
      SwitchAlternate.styles.js
    TimeScroll/
      TimeScroll.js
    WebApp/
      styles.js
      useStaticServer.js
      WebApp.js
  data/
    mockData.js
    mockEditRestaurantData.js
  features/
    auth/
      components/
        CountryListItem.js
        CountryListItem.styles.js
        LoginDropDownPicker.js
        LoginDropDownPicker.styles.js
      screens/
        LoginScreen.js
        LoginScreen.styles.js
    customer/
      reservations/
        components/
          PastReservationCard.js
          PastReservationCard.styles.js
          ReservationCard.js
          ReservationCard.styles.js
          ReservationLayoutView.js
        screens/
          ReservationFlow.js
          ReservationFlow.styles.js
          ReservationsScreen.js
      restaurants/
        components/
          Others.js
          RestaurantInfoCard.js
          RestaurantInfoCard.styles.js
          RestaurantList.styles.js
          RestaurantMenu.js
          RestaurantTabBar.js
          Reviews.js
          Search.js
          TabNavigation.js
        hooks/
          useReservationHandler.js
          useScrollHandler.js
        screens/
          RestaurantDetailScreen.js
          RestaurantsScreen.js
      settings/
        screens/
          AccountSettingsScreen.js
          AccountSettingsScreen.styles.js
          SettingsScreen.js
    merchant/
      dashboard/
        components/
          CounterSeats.js
          SeatView.js
          SharedTableStyles.styles.js
          TableMatrix.js
        screens/
          MerchantHomeScreen.js
      reservations/
        components/
          ReservationComponents.js
          ReservationComponents.styles.js
          ReservationsGrid.js
          ReservationsMailbox.js
        screens/
          MerchantReservationsScreen.js
        utils/
          timeUtils.js
      settings/
        components/
          EditButton.js
        screens/
          MerchantProfileScreen.js
          MerchantProfileScreen.styles.js
          MerchantSettingsScreen.js
          RestaurantEditScreen.js
          RestaurantEditScreen.styles.js
  infrastructure/
    navigation/
      AppNavigator.js
      AuthNavigator.js
      CheckoutNavigator.js
      index.js
      MerchantNavigator.js
      ReservationsNavigator.js
      RestaurantsNavigator.js
      SettingsNavigator.js
    options/
      GlobalScreenOptions.js
    theme/
      colors.js
      fonts.js
      index.js
      sizes.js
      spacing.js
  services/
    i18n/
      locales/
        en/
          en.js
        ja/
          ja.js
        zh/
          zh.js
      index.js
    AuthenticationContext.js
    LanguageContext.js
    ReservationContext.js
.cursorignore
.gitignore
App.js
app.json
babel.config.js
eas.json
metro.config.js
package.json
repomix-bundle.txt
repomix.config.js
repomix.config.json
tsconfig.json

================================================================
Files
================================================================

================
File: src/components/BackButton/BackButton.js
================
import React from "react";
import { TouchableOpacity } from "react-native";
import { MaterialIcons } from "@expo/vector-icons";
import { useNavigation } from "@react-navigation/native";
import styled from "styled-components/native";
const ButtonWrapper = styled.View`
  position: ${(props) => props.position || "absolute"};
  left: ${(props) => props.theme.space[2]};
  top: ${(props) => props.top || "auto"};
  z-index: 10;
`;
export const BackButton = ({
  onPress,
  position,
  top,
  size = 24,
  color = "#262626",
}) => {
  const navigation = useNavigation();
  const handlePress = () => {
    if (onPress) {
      onPress();
    } else {
      navigation.goBack();
    }
  };
  return (
    <ButtonWrapper position={position} top={top}>
      <TouchableOpacity onPress={handlePress}>
        <MaterialIcons name="arrow-back" size={size} color={color} />
      </TouchableOpacity>
    </ButtonWrapper>
  );
};

================
File: src/components/CustomText/CustomText.js
================
import { Text } from "react-native";
import styled from "styled-components";
const defaultTextStyles = (theme) => `
  font-family: ${theme.fonts.body};
  font-weight: ${theme.fontWeights.regular};
  color: ${theme.colors.text.primary};
  flex-wrap: wrap;
  margin-top: 0px;
  margin-bottom: 0px;
`;
const title = (theme) => `
  font-size: ${theme.fontSizes.title};
  font-weight: ${theme.fontWeights.medium};
`;
const h5 = (theme) => `
  font-size: ${theme.fontSizes.h5};
`;
const h4 = (theme) => `
  font-size: ${theme.fontSizes.h4};
`;
const h3 = (theme) => `
  font-size: ${theme.fontSizes.h3};
`;
const h2 = (theme) => `
  font-size: ${theme.fontSizes.h2};
`;
const h1 = (theme) => `
  font-size: ${theme.fontSizes.h1};
`;
const body = (theme) => `
  font-size: ${theme.fontSizes.body};
`;
const hint = (theme) => `
  font-size: ${theme.fontSizes.body};
`;
const error = (theme) => `
  color: ${theme.colors.text.error};
`;
const caption = (theme) => `
  font-size: ${theme.fontSizes.caption};
  font-weight: ${theme.fontWeights.bold};
`;
const label = (theme) => `
  font-family: ${theme.fonts.heading};
  font-size: ${theme.fontSizes.body};
  font-weight: ${theme.fontWeights.medium};
`;
const variants = {
  body,
  hint,
  error,
  label,
  caption,
  title,
  h5,
  h4,
  h3,
  h2,
  h1,
};
export const CustomText = styled(Text)`
  ${({ theme }) => defaultTextStyles(theme)};
  ${({ variant, theme }) => variants[variant](theme)};
`;
CustomText.defaultProps = {
  variant: "body",
};

================
File: src/components/ErrorBoundary/ErrorBoundary.js
================
import React from "react";
import { TouchableOpacity } from "react-native";
import styled from "styled-components/native";
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }
  componentDidCatch(error, errorInfo) {
    this.setState({ errorInfo });
    console.error("ErrorBoundary caught an error:", error, errorInfo);
  }
  resetError = () => {
    this.setState({ hasError: false, error: null, errorInfo: null });
  };
  render() {
    if (this.state.hasError) {
      return (
        <ErrorContainer>
          <ErrorTitle>Something went wrong.</ErrorTitle>
          <ErrorMessage>
            We're sorry for the inconvenience. Please try again later.
          </ErrorMessage>
          {}
          <RetryButton onPress={this.resetError}>
            <RetryButtonText>Try Again</RetryButtonText>
          </RetryButton>
          {}
          {__DEV__ && this.state.errorInfo && (
            <ErrorDetails>
              <ErrorDetailsTitle>Error Details:</ErrorDetailsTitle>
              <ErrorDetailsText>{this.state.error.toString()}</ErrorDetailsText>
              <ErrorDetailsText>
                {this.state.errorInfo.componentStack}
              </ErrorDetailsText>
            </ErrorDetails>
          )}
        </ErrorContainer>
      );
    }
    return this.props.children;
  }
}
const ErrorContainer = styled.View`
  flex: 1;
  justify-content: center;
  align-items: center;
  padding: ${({ theme }) => theme.space[3]};
  background-color: ${({ theme }) => theme.colors.bg.secondary};
`;
const ErrorTitle = styled.Text`
  font-size: ${({ theme }) => theme.fontSizes.title};
  font-weight: ${({ theme }) => theme.fontWeights.bold};
  color: ${({ theme }) => theme.colors.text.error};
  margin-bottom: ${({ theme }) => theme.space[2]};
`;
const ErrorMessage = styled.Text`
  font-size: ${({ theme }) => theme.fontSizes.body};
  color: ${({ theme }) => theme.colors.text.primary};
  text-align: center;
  margin-bottom: ${({ theme }) => theme.space[3]};
`;
const RetryButton = styled(TouchableOpacity)`
  padding-vertical: ${({ theme }) => theme.space[2]};
  padding-horizontal: ${({ theme }) => theme.space[3]};
  background-color: ${({ theme }) => theme.colors.ui.primary};
  border-radius: 5px;
`;
const RetryButtonText = styled.Text`
  font-size: ${({ theme }) => theme.fontSizes.button};
  color: ${({ theme }) => theme.colors.text.inverse};
  font-weight: ${({ theme }) => theme.fontWeights.bold};
`;
const ErrorDetails = styled.View`
  margin-top: ${({ theme }) => theme.space[3]};
  padding: ${({ theme }) => theme.space[2]};
  background-color: #f8d7da;
  border-radius: 5px;
`;
const ErrorDetailsTitle = styled.Text`
  font-size: ${({ theme }) => theme.fontSizes.body};
  font-weight: ${({ theme }) => theme.fontWeights.bold};
  color: ${({ theme }) => theme.colors.text.error};
  margin-bottom: ${({ theme }) => theme.space[1]};
`;
const ErrorDetailsText = styled.Text`
  font-size: ${({ theme }) => theme.fontSizes.caption};
  color: ${({ theme }) => theme.colors.text.error};
`;
export default ErrorBoundary;

================
File: src/components/FadeInView/FadeInView.js
================
import React, { useRef, useEffect } from 'react';
import { Animated } from 'react-native';
export const FadeInView = ({ duration = 1500, ...props }) => {
  const fadeAnim = useRef(new Animated.Value(0)).current;
  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: duration,
      useNativeDriver: true,
    }).start();
  }, [fadeAnim, duration]);
  return (
    <Animated.View
      style={{
        ...props.style,
        opacity: fadeAnim,
      }}
    >
      {props.children}
    </Animated.View>
  );
};

================
File: src/components/Favourite/Favourite.js
================
import React, { useContext } from 'react';
import { TouchableOpacity } from 'react-native';
import styled from 'styled-components/native';
import { AntDesign } from '@expo/vector-icons';
const FavouriteButton = styled(TouchableOpacity)`
  position: absolute;
  top: 25px;
  right: 25px;
  z-index: 9;
`;
export const Favourite = ({ restaurant }) => {
  return (
    <FavouriteButton
    >
      <AntDesign
        name={false ? 'heart' : 'hearto'}
        size={24}
        color={false ? 'red' : 'white'}
      />
    </FavouriteButton>
  );
};

================
File: src/components/GlobalWrapper/GlobalWrapper.js
================
import React from 'react';
import { StatusBar as RNStatusBar, View } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
import styled from 'styled-components/native';
const StatusBarBackground = styled(View)`
  background-color: ${(props) => props.backgroundColor || 'transparent'};
`;
const CustomStatusBar = ({ backgroundColor }) => {
  const insets = useSafeAreaInsets();
  return (
    <StatusBarBackground style={{ height: insets.top }} backgroundColor={backgroundColor} />
  );
};
export const GlobalWrapper = ({ children }) => (
  <SafeAreaProvider>
    <RNStatusBar barStyle="dark-content" />
    <CustomStatusBar backgroundColor="white" />
    {children}
  </SafeAreaProvider>
);

================
File: src/components/LanguageSelector/LanguageSelector.js
================
import React, { useState } from "react";
import { TouchableOpacity, View } from "react-native";
import { MaterialIcons } from "@expo/vector-icons";
import styled from "styled-components/native";
import { useTranslation } from "react-i18next";
import { CustomText } from "../CustomText/CustomText";
const languages = [
  { code: "en", label: "English" },
  { code: "ja", label: "日本語" },
  { code: "zh", label: "中文" },
];
const LanguageButton = styled(TouchableOpacity)`
  flex-direction: row;
  align-items: center;
  background-color: ${(props) => props.theme.colors.bg.secondary};
  padding: ${(props) => props.theme.space[2]} ${(props) => props.theme.space[3]};
  border-radius: 15px;
`;
const LanguageText = styled(CustomText)`
  margin-right: ${(props) => props.theme.space[2]};
  font-size: ${(props) => props.theme.fontSizes.body};
`;
const DropdownContainer = styled.View`
  position: absolute;
  top: 100%;
  left: 0;
  margin-top: 5px;
  background-color: ${(props) => props.theme.colors.bg.primary};
  border-radius: 8px;
  padding: ${(props) => props.theme.space[2]};
  min-width: 160px;
  shadow-opacity: 0.2;
  shadow-radius: 3px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
  elevation: 5;
  z-index: 1000;
`;
const LanguageOption = styled(TouchableOpacity)`
  padding: ${(props) => props.theme.space[2]} ${(props) => props.theme.space[3]};
  border-bottom-width: ${(props) => (props.isLast ? "0" : "0.5px")};
  border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
`;
const LanguageSelector = ({
  currentLanguage = "en",
  onChangeLanguage,
  style,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const { t } = useTranslation("common");
  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };
  const handleSelectLanguage = (languageCode) => {
    if (onChangeLanguage) {
      onChangeLanguage(languageCode);
    }
    setIsOpen(false);
  };
  return (
    <View style={[{ position: "relative" }, style]}>
      <LanguageButton onPress={toggleDropdown}>
        <LanguageText>{t("languages." + currentLanguage)}</LanguageText>
        <MaterialIcons
          name={isOpen ? "keyboard-arrow-up" : "keyboard-arrow-down"}
          size={22}
          color="#262626"
        />
      </LanguageButton>
      {isOpen && (
        <DropdownContainer>
          {languages.map((language, index) => (
            <LanguageOption
              key={language.code}
              isLast={index === languages.length - 1}
              onPress={() => handleSelectLanguage(language.code)}
            >
              <LanguageText>{t("languages." + language.code)}</LanguageText>
            </LanguageOption>
          ))}
        </DropdownContainer>
      )}
    </View>
  );
};
export default LanguageSelector;

================
File: src/components/SafeArea/SafeArea.js
================
import { StatusBar, SafeAreaView } from 'react-native';
import styled from 'styled-components';
export const SafeArea = styled(SafeAreaView)`
  flex: 1;
  ${StatusBar.currentHeight && `margin-top: ${StatusBar.currentHeight}px`};
  background-color: ${(props) => props.theme.colors.bg.primary};
`;

================
File: src/components/Separator/Separator.js
================
import React from "react";
import PropTypes from "prop-types";
import { SeparatorFull, SeparatorPartial } from "./Separator.styles";
export const Separator = ({ type }) => {
  return type === "full" ? <SeparatorFull /> : <SeparatorPartial />;
};
Separator.propTypes = {
  type: PropTypes.oneOf(["full", "partial"]),
};

================
File: src/components/Separator/Separator.styles.js
================
import styled from "styled-components/native";
export const SeparatorFull = styled.View`
  height: 1px;
  background-color: rgba(0, 0, 0, 0.1);
  width: 100%;
  margin-vertical: ${(props) => props.theme.space[3]};
`;
export const SeparatorPartial = styled.View`
  height: 1px;
  background-color: rgba(0, 0, 0, 0.1);
  width: 80%;
  margin-vertical: ${(props) => props.theme.space[2]};
  margin-left: 66px;
`;

================
File: src/components/Spacer/Spacer.js
================
import React from 'react';
import { View } from 'react-native';
import styled, { useTheme } from 'styled-components/native';
const sizeVariant = {
  small: 1,
  medium: 2,
  large: 3,
  xl: 4,
  xxl: 5,
};
const positionVariant = {
  top: 'marginTop',
  left: 'marginLeft',
  right: 'marginRight',
  bottom: 'marginBottom',
};
const getVariant = (position, size, theme) => {
  const sizeIndex = sizeVariant[size];
  const property = positionVariant[position];
  const value = theme.space[sizeIndex];
  return `${property}:${value}`;
};
const SpacerView = styled(View)`
  ${({ variant }) => variant};
`;
export const Spacer = ({ position = 'top', size = 'small', children }) => {
  const theme = useTheme();
  const variant = getVariant(position, size, theme);
  return <SpacerView variant={variant}>{children}</SpacerView>;
};

================
File: src/components/Switch/Switch.js
================
import React, { useRef, useEffect } from "react";
import { Animated, TouchableWithoutFeedback } from "react-native";
import * as DefaultStyles from "./Switch.styles";
import * as AltStyles from "./SwitchAlternate.styles";
const SwitchContainer = ({
  isOn,
  setIsOn,
  leftLabel,
  rightLabel,
  variant = "default",
}) => {
  const Styles = variant === "alternate" ? AltStyles : DefaultStyles;
  const capsulePosition = useRef(new Animated.Value(isOn ? 96 : 0)).current;
  useEffect(() => {
    Animated.timing(capsulePosition, {
      toValue: isOn ? 96 : 0,
      duration: 200,
      useNativeDriver: false,
    }).start();
  }, [isOn]);
  return (
    <Styles.Container>
      <Styles.SwitchBackground>
        <Styles.Capsule style={{ left: capsulePosition }} />
        <TouchableWithoutFeedback onPress={() => setIsOn(false)}>
          <Styles.TextWrapper>
            {}
            <Styles.Label active={!isOn}>{leftLabel}</Styles.Label>
          </Styles.TextWrapper>
        </TouchableWithoutFeedback>
        <TouchableWithoutFeedback onPress={() => setIsOn(true)}>
          <Styles.TextWrapper>
            {}
            <Styles.Label active={isOn}>{rightLabel}</Styles.Label>
          </Styles.TextWrapper>
        </TouchableWithoutFeedback>
      </Styles.SwitchBackground>
    </Styles.Container>
  );
};
export default SwitchContainer;

================
File: src/components/Switch/Switch.styles.js
================
import styled from "styled-components/native";
import { Animated, Text } from "react-native";
export const Container = styled.View`
  flex-direction: row;
  justify-content: center;
  align-items: center;
  margin: 10px;
`;
export const SwitchBackground = styled.View`
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  background-color: ${(props) => props.theme.colors.ui.disabled};
  border-radius: 25px;
  width: 200px;
  height: 50px;
  padding: 3px;
`;
export const Capsule = styled(Animated.View)`
  position: absolute;
  width: 50%;
  height: 100%;
  background-color: ${(props) => props.theme.colors.bg.primary};
  border-radius: 25px;
  margin: 3px;
`;
export const TextWrapper = styled.View`
  flex: 1;
  align-items: center;
  justify-content: center;
`;
export const Label = styled(Text)`
  font-size: ${(props) => props.theme.fontSizes.button};
  color: ${(props) => props.theme.colors.text.primary};
`;

================
File: src/components/Switch/SwitchAlternate.styles.js
================
import styled from "styled-components/native";
import { Animated, Text } from "react-native";
export const Container = styled.View`
  flex-direction: row;
  justify-content: center;
  align-items: center;
  margin: ${(props) => props.theme.space[2]};
`;
export const SwitchBackground = styled.View`
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  background-color: ${(props) =>
    props.theme.colors.ui.disabled};
  border-radius: 25px;
  width: 200px;
  height: 50px;
  padding: ${(props) => props.theme.space[1]};
`;
export const Capsule = styled(Animated.View)`
  position: absolute;
  width: 50%;
  height: 100%;
  background-color: ${(props) =>
    props.theme.colors.ui.primary};
  border-radius: 25px;
  margin: ${(props) => props.theme.space[1]};
`;
export const TextWrapper = styled.View`
  flex: 1;
  align-items: center;
  justify-content: center;
`;
export const Label = styled(Text)`
  font-size: ${(props) => props.theme.fontSizes.button};
  font-family: ${(props) => props.theme.fonts.body};
  color: ${(props) =>
    props.active
      ? props.theme.colors.text.inverse
      : props.theme.colors.text.primary};
`;

================
File: src/components/TimeScroll/TimeScroll.js
================
import React, { useRef } from "react";
import styled from "styled-components/native";
import { Animated } from "react-native";
import { LinearGradient } from "expo-linear-gradient";
const ITEM_HEIGHT = 50;
const VISIBLE_ITEMS = 5;
const CONTAINER_HEIGHT = ITEM_HEIGHT * VISIBLE_ITEMS;
const CONTAINER_WIDTH = 60;
const PADDING_VERTICAL = (CONTAINER_HEIGHT - ITEM_HEIGHT) / 2;
const Container = styled.View`
  height: ${CONTAINER_HEIGHT}px;
  width: ${CONTAINER_WIDTH}px;
  background-color: ${(props) => props.theme.colors.bg.secondary};
  overflow: hidden;
  border-radius: 30px;
  position: relative;
`;
const StyledAnimatedItem = styled(Animated.View)`
  height: ${ITEM_HEIGHT}px;
  justify-content: center;
  align-items: center;
`;
const TimeText = styled.Text`
  color: ${(props) => props.theme.colors.text.primary};
  font-size: 18px;
  font-family: ${(props) => props.theme.fonts.body};
`;
export const TimeScroll = ({
  times,
  selectedTime,
  onTimeChange,
  containerHeight = CONTAINER_HEIGHT,
  containerWidth = CONTAINER_WIDTH,
  itemHeight = ITEM_HEIGHT,
  visibleItems = VISIBLE_ITEMS,
}) => {
  const scrollY = useRef(new Animated.Value(0)).current;
  const paddingVertical = (containerHeight - itemHeight) / 2;
  const handleMomentumScrollEnd = (event) => {
    const offsetY = event.nativeEvent.contentOffset.y;
    const index = Math.round(offsetY / itemHeight);
    if (index >= 0 && index < times.length) {
      onTimeChange(times[index]);
    }
  };
  return (
    <Container style={{ height: containerHeight, width: containerWidth }}>
      <Animated.ScrollView
        contentContainerStyle={{ paddingVertical: paddingVertical }}
        showsVerticalScrollIndicator={false}
        snapToInterval={itemHeight}
        decelerationRate="fast"
        bounces={false}
        onMomentumScrollEnd={handleMomentumScrollEnd}
        onScroll={Animated.event(
          [{ nativeEvent: { contentOffset: { y: scrollY } } }],
          { useNativeDriver: true }
        )}
        scrollEventThrottle={16}
      >
        {times.map((time, index) => {
          const inputRange = [
            (index - 1) * itemHeight,
            index * itemHeight,
            (index + 1) * itemHeight,
          ];
          const scale = scrollY.interpolate({
            inputRange,
            outputRange: [0.7, 1, 0.7],
            extrapolate: "clamp",
          });
          const opacity = scrollY.interpolate({
            inputRange,
            outputRange: [0.3, 1, 0.3],
            extrapolate: "clamp",
          });
          const rotateX = scrollY.interpolate({
            inputRange,
            outputRange: ["30deg", "0deg", "-30deg"],
            extrapolate: "clamp",
          });
          return (
            <StyledAnimatedItem
              key={index}
              style={{
                height: itemHeight,
                transform: [{ perspective: 1000 }, { rotateX }, { scale }],
                opacity,
              }}
            >
              <TimeText>{time}</TimeText>
            </StyledAnimatedItem>
          );
        })}
      </Animated.ScrollView>
      {}
      <LinearGradient
        colors={["rgba(241,241,241,1)", "rgba(241,241,241,0)"]}
        style={{
          position: "absolute",
          top: 0,
          left: 0,
          right: 0,
          height: 20,
        }}
        pointerEvents="none"
      />
      {}
      <LinearGradient
        colors={["rgba(241,241,241,0)", "rgba(241,241,241,1)"]}
        style={{
          position: "absolute",
          bottom: 0,
          left: 0,
          right: 0,
          height: 20,
        }}
        pointerEvents="none"
      />
    </Container>
  );
};
export default TimeScroll;

================
File: src/components/WebApp/styles.js
================
import styled from "styled-components/native";
import { WebView } from "react-native-webview";
import { TouchableOpacity, Text, View } from "react-native";
export const Container = styled.View`
  width: 100%;
  height: ${({ height }) => height}px;
  background-color: ${({ theme }) => theme.colors.bg.primary};
`;
// Styled WebView
export const StyledWebView = styled(WebView)`
  flex: 1;
  width: 100%;
`;
// Footer container
export const Footer = styled.View`
  padding: ${({ theme }) => theme.space[3]};
  background-color: ${({ theme }) => theme.colors.ui.tertiary};
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
`;
// Text displaying selected chairs
export const SelectedText = styled(Text)`
  flex: 1;
  margin-right: ${({ theme }) => theme.space[2]};
  color: ${({ theme }) => theme.colors.text.primary};
  font-size: ${({ theme }) => theme.fontSizes.body};
  font-family: ${({ theme }) => theme.fonts.body};
`;
// Cancel button
export const CancelButton = styled(TouchableOpacity)`
  padding: ${({ theme }) => theme.space[2]};
  background-color: ${({ theme }) => theme.colors.ui.error};
  border-radius: 4px;
`;
// Text inside the Cancel button
export const CancelButtonText = styled(Text)`
  color: ${({ theme }) => theme.colors.text.inverse};
  font-size: ${({ theme }) => theme.fontSizes.button};
  font-family: ${({ theme }) => theme.fonts.body};
  text-align: center;
`;

================
File: src/components/WebApp/useStaticServer.js
================
import { useEffect, useState } from "react";
import StaticServer from "react-native-static-server";
import RNFS from "react-native-fs";
const useStaticServer = () => {
  const [url, setUrl] = useState("");
  useEffect(() => {
    let server = null;
    const startServer = async () => {
      const path = `${RNFS.MainBundlePath}/3d_build`; // Ensure this path exists and contains your web app
      console.log(`Inner webapp path verified: ${path}`);
      // Generate a random port between 8000 and 9000 to avoid caching issues
      const randomPort = Math.floor(Math.random() * 1000) + 8000;
      // Add a cache-busting timestamp query parameter
      const timestamp = Date.now();
      server = new StaticServer(randomPort, path, { localOnly: true });
      try {
        let serverUrl = await server.start();
        // Append cache-busting parameter
        serverUrl = `${serverUrl}?t=${timestamp}`;
        setUrl(serverUrl);
        console.log(`Server hosting at: ${serverUrl}`);
      } catch (error) {
        console.error("Failed to start server:", error);
      }
    };
    startServer();
    return () => {
      if (server) {
        server.stop();
      }
    };
  }, []);
  return url;
};
export default useStaticServer;

================
File: src/components/WebApp/WebApp.js
================
import React, { useEffect, useRef, useState, useCallback } from "react";
import { View, ActivityIndicator } from "react-native";
import { WebView } from "react-native-webview";
import styled from "styled-components/native";
import useStaticServer from "./useStaticServer";
import {
  Container,
  StyledWebView,
  Footer,
  SelectedText,
  CancelButton,
  CancelButtonText,
} from "./styles";
const WebApp = ({
  onInteractionStart,
  onInteractionEnd,
  onSelectedItemsChange,
  selectedItems: initialSelectedItems = [],
}) => {
  const serverUrl = useStaticServer();
  const webViewRef = useRef(null);
  const [webViewHeight, setWebViewHeight] = useState(200);
  const [internalSelectedItems, setInternalSelectedItems] =
    useState(initialSelectedItems);
  const [occupiedItems, setOccupiedItems] = useState(["CHAIR1", "CHAIR4"]);
  const [isServerReady, setIsServerReady] = useState(false);
  const [currentModel, setCurrentModel] = useState("kitchen");
  const [availableItems, setAvailableItems] = useState([]);
  const [isInitialized, setIsInitialized] = useState(false);
  useEffect(() => {
    if (serverUrl) {
      setIsServerReady(true);
    }
  }, [serverUrl]);
  const cancelSelection = () => {
    setInternalSelectedItems([]);
    if (onSelectedItemsChange) {
      onSelectedItemsChange([]);
    }
  };
  const sendItemsToWebView = useCallback(() => {
    if (webViewRef.current) {
      const script = `
        (function() {
          if (window.updateItems) {
            window.updateItems({
              selectedItems: ${JSON.stringify(internalSelectedItems)},
              occupiedItems: ${JSON.stringify(occupiedItems)}
            });
          }
        })();
        true;
      `;
      webViewRef.current.injectJavaScript(script);
    }
  }, [internalSelectedItems, occupiedItems]);
  useEffect(() => {
    if (isInitialized) {
      sendItemsToWebView();
    }
  }, [internalSelectedItems, occupiedItems, sendItemsToWebView, isInitialized]);
  const handleWebViewLoaded = useCallback(() => {
    setIsInitialized(true);
    setTimeout(() => {
      sendItemsToWebView();
    }, 300);
  }, [sendItemsToWebView]);
  const changeRestaurantModel = useCallback(
    (modelKey) => {
      if (webViewRef.current) {
        const script = `
        (function() {
          if (window.changeRestaurantModel) {
            window.changeRestaurantModel('${modelKey}');
          }
        })();
        true;
      `;
        webViewRef.current.injectJavaScript(script);
        setCurrentModel(modelKey);
        setInternalSelectedItems([]);
        if (onSelectedItemsChange) {
          onSelectedItemsChange([]);
        }
      }
    },
    [onSelectedItemsChange]
  );
  const handleWebViewMessage = useCallback(
    (event) => {
      try {
        const messageData = JSON.parse(event.nativeEvent.data);
        switch (messageData.type) {
          case "itemClicked":
            if (occupiedItems.includes(messageData.id)) {
              return;
            }
            const newSelectedItems = internalSelectedItems.includes(
              messageData.id
            )
              ? internalSelectedItems.filter((id) => id !== messageData.id)
              : [...internalSelectedItems, messageData.id];
            setInternalSelectedItems(newSelectedItems);
            if (onSelectedItemsChange) {
              onSelectedItemsChange(newSelectedItems);
            }
            break;
          case "contentHeight":
            const height = Number(messageData.height);
            if (height > 0 && height !== webViewHeight) {
              setWebViewHeight(height);
            }
            break;
          case "interactionStart":
            if (onInteractionStart) {
              onInteractionStart();
            }
            break;
          case "interactionEnd":
            if (onInteractionEnd) {
              onInteractionEnd();
            }
            break;
          case "modelChanged":
            setAvailableItems(messageData.availableItems || []);
            setCurrentModel(messageData.modelKey);
            setInternalSelectedItems([]);
            if (onSelectedItemsChange) {
              onSelectedItemsChange([]);
            }
            break;
          case "webViewReady":
            handleWebViewLoaded();
            console.log("WebView is ready");
            break;
          default:
            console.warn("Unhandled message type:", messageData.type);
        }
      } catch (error) {
        console.error("Failed to parse message from WebView:", error);
      }
    },
    [
      occupiedItems,
      webViewHeight,
      onInteractionStart,
      onInteractionEnd,
      onSelectedItemsChange,
      internalSelectedItems,
    ]
  );
  return (
    <View style={{ flex: 1 }}>
      {isServerReady ? (
        <Container height={webViewHeight}>
          <StyledWebView
            ref={webViewRef}
            source={{ uri: serverUrl }}
            scrollEnabled={false}
            cacheEnabled={false}
            cacheMode="LOAD_NO_CACHE"
            incognito={true}
            thirdPartyCookiesEnabled={false}
            originWhitelist={["*"]}
            onError={(syntheticEvent) => {
              const { nativeEvent } = syntheticEvent;
              console.warn("WebView error: ", nativeEvent);
            }}
            onMessage={handleWebViewMessage}
            onLoadEnd={() => {
              sendItemsToWebView();
            }}
          />
        </Container>
      ) : (
        <View
          style={{ flex: 1, justifyContent: "center", alignItems: "center" }}
        >
          <ActivityIndicator size="large" color="#0000ff" />
        </View>
      )}
      <Footer>
        <SelectedText>
          Selected Items: {internalSelectedItems.join(", ") || "None"}
        </SelectedText>
        <CancelButton onPress={cancelSelection}>
          <CancelButtonText>Cancel Selection</CancelButtonText>
        </CancelButton>
      </Footer>
    </View>
  );
};
export default WebApp;

================
File: src/data/mockData.js
================
export const restaurants = [
  {
    name: "La Piazza",
    icon: "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
    photos: [
      "https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8Zm9vZHxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60",
    ],
    address: "123 Piazza Street",
    isOpenNow: true,
    rating: 4.5,
    isClosedTemporarily: false,
    placeId: "1",
  },
  {
    name: "Sushi World",
    icon: "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
    photos: ["https://images.unsplash.com/photo-1553621042-f6e147245754"],
    address: "456 Sushi Lane",
    isOpenNow: true,
    rating: 5,
    isClosedTemporarily: false,
    placeId: "2",
  },
  {
    name: "Burger House",
    icon: "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
    photos: ["https://images.unsplash.com/photo-1550547660-d9450f859349"],
    address: "789 Burger Blvd",
    isOpenNow: false,
    rating: 3.8,
    isClosedTemporarily: false,
    placeId: "3",
  },
  {
    name: "Ocean Breeze Café",
    icon: "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
    photos: [
      "https://images.unsplash.com/photo-1544511916-0148ccdeb877?auto=format&fit=crop&w=400&q=60",
    ],
    address: "101 Ocean Drive",
    isOpenNow: true,
    rating: 4.2,
    isClosedTemporarily: false,
    placeId: "4",
  },
];
export const reservations = [
  {
    id: 1,
    customerName: "John Doe",
    restaurant: restaurants[0],
    date: "2024-04-01",
    time: "19:00",
    people: 4,
    seatsNumber: 4,
    duration: 90,
    tableId: 2,
    chairs: ["2A", "2B", "2C", "2D"],
    status: "Confirmed",
    note: "Anniversary dinner",
  },
  {
    id: 2,
    customerName: "Jane Smith",
    restaurant: restaurants[1],
    date: "2024-03-15",
    time: "18:30",
    people: 2,
    seatsNumber: 2,
    duration: 60,
    tableId: 3,
    chairs: ["3A", "3B"],
    status: "Completed",
    note: "",
  },
  {
    id: 3,
    customerName: "Mike Johnson",
    restaurant: restaurants[2],
    date: "2024-03-20",
    time: "18:00",
    people: 3,
    seatsNumber: 3,
    duration: 90,
    tableId: 4,
    chairs: ["4A", "4B", "4C"],
    status: "Completed",
    note: "Window seat preferred",
  },
  {
    id: 4,
    customerName: "Sarah Williams",
    restaurant: restaurants[3],
    date: "2024-03-28",
    time: "18:00",
    people: 3,
    seatsNumber: 3,
    duration: 90,
    tableId: 5,
    chairs: ["5A", "5B", "5C"],
    status: "Completed",
    note: "",
  },
  {
    id: 5,
    customerName: "David Brown",
    restaurant: restaurants[0],
    date: "2024-04-15",
    time: "20:00",
    people: 1,
    seatsNumber: 1,
    duration: 60,
    counterSeatId: "C5",
    isCounterSeat: true,
    status: "Confirmed",
    note: "Solo dining",
  },
  {
    id: 6,
    customerName: "Emily Chen",
    restaurant: restaurants[2],
    date: "2024-04-10",
    time: "12:30",
    people: 2,
    seatsNumber: 2,
    duration: 60,
    tableId: 8,
    chairs: ["8A", "8B"],
    status: "Pending",
    note: "Business lunch",
  },
];
export const countryCodes = [
  {
    flag: "🇺🇸",
    countryName: "United States",
    code: "+1",
  },
  {
    flag: "🇬🇧",
    countryName: "United Kingdom",
    code: "+44",
  },
  {
    flag: "🇨🇦",
    countryName: "Canada",
    code: "+1",
  },
  {
    flag: "🇦🇺",
    countryName: "Australia",
    code: "+61",
  },
  {
    flag: "🇳🇿",
    countryName: "New Zealand",
    code: "+64",
  },
  {
    flag: "🇮🇳",
    countryName: "India",
    code: "+91",
  },
  {
    flag: "🇨🇳",
    countryName: "China",
    code: "+86",
  },
  {
    flag: "🇯🇵",
    countryName: "Japan",
    code: "+81",
  },
];
export const users = [
  {
    username: "Vickers Zhu",
    email: "****@example.com",
    profileImage: require("../../assets/images/user_profile.jpg"),
    phoneNumber: "+81 **** ****",
  },
];
export const tableStatuses = {
  "0-1": { id: 1, row: 0, col: 1, status: "empty" },
  "0-2": { id: 2, row: 0, col: 2, status: "empty" },
  "1-0": { id: 3, row: 1, col: 0, status: "empty" },
  "1-1": { id: 4, row: 1, col: 1, status: "occupied" },
  "1-2": { id: 5, row: 1, col: 2, status: "empty" },
  "1-3": { id: 6, row: 1, col: 3, status: "empty" },
  "2-0": { id: 7, row: 2, col: 0, status: "reserved" },
  "2-1": { id: 8, row: 2, col: 1, status: "empty" },
  "2-2": { id: 9, row: 2, col: 2, status: "empty" },
  "2-3": { id: 10, row: 2, col: 3, status: "occupied" },
  "3-1": { id: 11, row: 3, col: 1, status: "empty" },
  "3-2": { id: 12, row: 3, col: 2, status: "empty" },
};
export const seatingData = {
  tables: [
    {
      id: 1,
      chairs: [
        { id: "1A", status: "occupied" },
        { id: "1B", status: "empty" },
        { id: "1C", status: "empty" },
      ],
    },
    {
      id: 2,
      chairs: [
        { id: "2A", status: "empty" },
        { id: "2B", status: "empty" },
        { id: "2C", status: "reserved" },
        { id: "2D", status: "reserved" },
      ],
    },
    {
      id: 3,
      chairs: ["3A", "3B", "3C", "3D", "3E", "3F", "3G", "3H", "3I", "3J"].map(
        (chairId, index) => {
          if (index === 2 || index === 5) {
            return { id: chairId, status: "occupied" };
          }
          return { id: chairId, status: "empty" };
        }
      ),
    },
    {
      id: 4,
      chairs: [
        { id: "4A", status: "empty" },
        { id: "4B", status: "occupied" },
        { id: "4C", status: "empty" },
        { id: "4D", status: "empty" },
      ],
    },
    {
      id: 5,
      chairs: [
        { id: "5A", status: "empty" },
        { id: "5B", status: "reserved" },
        { id: "5C", status: "empty" },
      ],
    },
    {
      id: 6,
      chairs: [
        { id: "6A", status: "occupied" },
        { id: "6B", status: "occupied" },
      ],
    },
    {
      id: 7,
      chairs: ["7A", "7B", "7C", "7D", "7E", "7F", "7G", "7H", "7I", "7J"].map(
        (chairId, index) => {
          return index % 3 === 0
            ? { id: chairId, status: "reserved" }
            : { id: chairId, status: "empty" };
        }
      ),
    },
    {
      id: 8,
      chairs: [
        { id: "8A", status: "empty" },
        { id: "8B", status: "occupied" },
      ],
    },
    {
      id: 9,
      chairs: [
        { id: "9A", status: "empty" },
        { id: "9B", status: "empty" },
        { id: "9C", status: "reserved" },
      ],
    },
    {
      id: 10,
      chairs: [
        "10A",
        "10B",
        "10C",
        "10D",
        "10E",
        "10F",
        "10G",
        "10H",
        "10I",
        "10J",
      ].map((chairId, index) => {
        if (index === 4) return { id: chairId, status: "occupied" };
        if (index === 7) return { id: chairId, status: "reserved" };
        return { id: chairId, status: "empty" };
      }),
    },
    {
      id: 11,
      chairs: [
        { id: "11A", status: "empty" },
        { id: "11B", status: "empty" },
      ],
    },
    {
      id: 12,
      chairs: [
        { id: "12A", status: "occupied" },
        { id: "12B", status: "empty" },
        { id: "12C", status: "empty" },
      ],
    },
  ],
  counterSeats: Array.from({ length: 30 }, (_, i) => ({
    id: `C${i + 1}`,
    status: i % 5 === 0 ? "occupied" : i % 7 === 0 ? "reserved" : "empty",
  })),
};
export const merchantReservations = [
  {
    id: 1,
    customerName: "John Smith",
    people: 2,
    time: "11:00",
    duration: 90,
    tableId: 2,
    chairs: ["2A", "2B"],
    status: "confirmed",
    note: "Anniversary celebration",
  },
  {
    id: 2,
    customerName: "Emma Wilson",
    people: 4,
    time: "12:30",
    duration: 120,
    tableId: 4,
    chairs: ["4A", "4B", "4C", "4D"],
    status: "pending",
    note: "Window seat preferred",
  },
  {
    id: 3,
    customerName: "David Lee",
    people: 1,
    time: "13:00",
    duration: 60,
    tableId: 6,
    chairs: ["6A"],
    status: "confirmed",
    note: "",
  },
  {
    id: 4,
    customerName: "Sarah Johnson",
    people: 3,
    time: "15:30",
    duration: 90,
    tableId: 1,
    chairs: ["1A", "1B", "1C"],
    status: "confirmed",
    note: "Allergic to nuts",
  },
  {
    id: 5,
    customerName: "Michael Brown",
    people: 2,
    time: "18:00",
    duration: 120,
    tableId: 5,
    chairs: ["5A", "5B"],
    status: "confirmed",
    note: "Birthday celebration",
  },
  {
    id: 9,
    customerName: "Lisa Wong",
    people: 3,
    time: "17:00",
    duration: 90,
    tableId: 7,
    chairs: ["7A", "7D", "7G"],
    status: "confirmed",
    note: "Family dinner",
  },
  {
    id: 10,
    customerName: "Tom Garcia",
    people: 2,
    time: "19:00",
    duration: 60,
    tableId: 10,
    chairs: ["10E"],
    status: "confirmed",
    note: "Quick business dinner",
  },
  {
    id: 11,
    customerName: "Rachel Kim",
    people: 2,
    time: "16:30",
    duration: 90,
    tableId: 12,
    chairs: ["12A"],
    status: "confirmed",
    note: "Late lunch",
  },
  {
    id: 12,
    customerName: "Mark Rodriguez",
    people: 1,
    time: "20:00",
    duration: 60,
    tableId: 8,
    chairs: ["8B"],
    status: "confirmed",
    note: "Solo dinner",
  },
  {
    id: 6,
    customerName: "Alex Chen",
    people: 1,
    time: "10:00",
    duration: 60,
    counterSeatId: "C3",
    isCounterSeat: true,
    status: "confirmed",
    note: "Business breakfast",
  },
  {
    id: 7,
    customerName: "Jessica Miller",
    people: 1,
    time: "14:00",
    duration: 90,
    counterSeatId: "C7",
    isCounterSeat: true,
    status: "confirmed",
    note: "Solo diner",
  },
  {
    id: 8,
    customerName: "Robert Taylor",
    people: 1,
    time: "19:30",
    duration: 60,
    counterSeatId: "C15",
    isCounterSeat: true,
    status: "pending",
    note: "Late dinner",
  },
  {
    id: 13,
    customerName: "Emily Chen",
    people: 1,
    time: "11:30",
    duration: 45,
    counterSeatId: "C10",
    isCounterSeat: true,
    status: "confirmed",
    note: "Quick lunch",
  },
  {
    id: 14,
    customerName: "Alex Johnson",
    people: 1,
    time: "17:45",
    duration: 75,
    counterSeatId: "C20",
    isCounterSeat: true,
    status: "confirmed",
    note: "After-work drink",
  },
];
export const timeSlots = [
  "09:00",
  "09:30",
  "10:00",
  "10:30",
  "11:00",
  "11:30",
  "12:00",
  "12:30",
  "13:00",
  "13:30",
  "14:00",
  "14:30",
  "15:00",
  "15:30",
  "16:00",
  "16:30",
  "17:00",
  "17:30",
  "18:00",
  "18:30",
  "19:00",
  "19:30",
  "20:00",
  "20:30",
  "21:00",
  "21:30",
  "22:00",
  "22:30",
];
export const merchantProfile = {
  name: "Restaurant Owner",
  email: "restaurant@example.com",
  restaurantName: "Gourmet Delights",
  profileImage: require("../../assets/images/user_profile.jpg"),
  phoneNumber: "+81 80 6748 5678",
};

================
File: src/data/mockEditRestaurantData.js
================
export const sampleRestaurantData = {
  id: "rest-123456",
  name: "La Piazza Ristorante",
  description: "Authentic Italian cuisine with a modern twist",
  cuisine: ["Italian", "Mediterranean"],
  address: {
    street: "123 Piazza Street",
    city: "San Francisco",
    state: "CA",
    postalCode: "94110",
    country: "USA",
    coordinates: {
      latitude: 37.7598,
      longitude: -122.4271,
    },
  },
  phoneNumber: "+1 (415) 555-1234",
  email: "info@lapiazzasf.com",
  website: "https://www.lapiazzasf.com",
  photos: [
    "https://images.unsplash.com/photo-1504674900247-0877df9cc836",
    "https://images.unsplash.com/photo-1621275471769-e6aa344546d5",
    "https://images.unsplash.com/photo-1544025162-d76694265947",
  ],
  logo: "https://example.com/logo.png",
  coverImage: "https://images.unsplash.com/photo-1504754524776-8f4f37790ca0",
  businessHours: {
    monday: { open: "11:00", close: "22:00", isClosed: false },
    tuesday: { open: "11:00", close: "22:00", isClosed: false },
    wednesday: { open: "11:00", close: "22:00", isClosed: false },
    thursday: { open: "11:00", close: "22:00", isClosed: false },
    friday: { open: "11:00", close: "23:00", isClosed: false },
    saturday: { open: "10:00", close: "23:00", isClosed: false },
    sunday: { open: "10:00", close: "21:00", isClosed: false },
  },
  isOpenNow: true,
  isClosedTemporarily: false,
  holidayHours: [
    {
      date: "2025-12-24",
      open: "11:00",
      close: "15:00",
      isClosed: false,
    },
    {
      date: "2025-12-25",
      open: "",
      close: "",
      isClosed: true,
    },
  ],
  capacity: {
    totalSeats: 80,
    indoorSeats: 60,
    outdoorSeats: 20,
    privateRooms: [
      {
        name: "Wine Cellar",
        capacity: 12,
      },
    ],
  },
  features: {
    hasWifi: true,
    hasParking: true,
    isWheelchairAccessible: true,
    allowsPets: false,
    hasOutdoorSeating: true,
    hasTakeout: true,
    hasDelivery: true,
    acceptsReservations: true,
  },
  menu: {
    categories: [
      {
        name: "Appetizers",
        items: [
          {
            name: "Bruschetta",
            description:
              "Grilled bread rubbed with garlic and topped with tomatoes, olive oil, salt, and pepper",
            price: 9.99,
            image: "https://example.com/bruschetta.jpg",
            dietaryFlags: ["Vegetarian"],
          },
        ],
      },
      {
        name: "Pasta",
        items: [
          {
            name: "Spaghetti Carbonara",
            description:
              "Spaghetti with a creamy sauce of eggs, cheese, pancetta, and black pepper",
            price: 18.99,
            image: "https://example.com/carbonara.jpg",
            dietaryFlags: [],
          },
        ],
      },
    ],
  },
  rating: 4.7,
  reviewCount: 253,
  socialMedia: {
    instagram: "https://instagram.com/lapiazzasf",
    facebook: "https://facebook.com/lapiazzasf",
    twitter: "https://twitter.com/lapiazzasf",
    yelp: "https://yelp.com/biz/la-piazza-ristorante-san-francisco",
  },
  settings: {
    reservationTimeSlotDuration: 30,
    maxReservationSize: 20,
    reservationLeadTime: 1,
    automaticConfirmation: true,
  },
};

================
File: src/features/auth/components/CountryListItem.js
================
import React from "react";
import {
  ListItemContainer,
  FlagText,
  CodeText,
} from "./CountryListItem.styles";
import { TouchableOpacity } from "react-native";
const CountryListItem = ({ item, onPress }) => (
  <TouchableOpacity onPress={() => onPress(item)} activeOpacity={0.6}>
    <ListItemContainer>
      <FlagText>{item.flag}</FlagText>
      <CodeText>{item.code}</CodeText>
    </ListItemContainer>
  </TouchableOpacity>
);
export default CountryListItem;

================
File: src/features/auth/components/CountryListItem.styles.js
================
import styled from "styled-components/native";
import { View, Text } from "react-native";
export const ListItemContainer = styled(View)`
  flex-direction: row;
  align-items: center;
  padding-vertical: ${(props) => props.theme.space[2]};
  padding-horizontal: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.bg.primary};
  border-bottom-width: 0.5px;
  border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
`;
export const CountryInfoContainer = styled(View)`
  flex-direction: row;
  align-items: center;
  flex: 1;
  margin-right: ${(props) => props.theme.space[2]};
`;
export const FlagText = styled(Text)`
  font-size: 20px;
  margin-right: ${(props) => props.theme.space[2]};
`;
export const CountryNameText = styled(Text)`
  font-family: ${(props) => props.theme.fonts.body};
  font-size: ${(props) => props.theme.fontSizes.body};
  color: ${(props) => props.theme.colors.text.primary};
  flex: 1;
`;
export const CodeText = styled(Text)`
  font-family: ${(props) => props.theme.fonts.body};
  font-size: 16px;
  font-weight: ${(props) => props.theme.fontWeights.medium};
  color: ${(props) => props.theme.colors.text.primary};
`;

================
File: src/features/auth/components/LoginDropDownPicker.js
================
import React, { useState, useEffect } from "react";
import { MaterialIcons } from "@expo/vector-icons";
import {
  DropdownContainer,
  PlaceholderText,
  SelectedItemWrapper,
  FlagText,
  CodeText,
  StyledDropDownPicker,
} from "./LoginDropDownPicker.styles";
import CountryListItem from "./CountryListItem";
import { useTheme } from "styled-components/native";
const LoginDropDownPicker = ({
  countryCodes,
  selectedCountry,
  setSelectedCountry,
  style,
}) => {
  const [open, setOpen] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const theme = useTheme();
  useEffect(() => {
    if (selectedCountry && countryCodes) {
      const item = countryCodes.find(
        (item) => item.countryName === selectedCountry
      );
      setSelectedItem(item);
    }
  }, [selectedCountry, countryCodes]);
  const handleSelectItem = (item) => {
    setSelectedCountry(item.countryName);
    setOpen(false);
  };
  const dropdownItems = countryCodes.map((item) => ({
    label: `${item.flag}  ${item.code}`,
    value: item.countryName,
    countryName: item.countryName,
    code: item.code,
    flag: item.flag,
  }));
  return (
    <DropdownContainer style={style}>
      <StyledDropDownPicker
        open={open}
        value={selectedCountry}
        items={dropdownItems}
        setOpen={setOpen}
        setValue={(val) => {
          const item = countryCodes.find((item) => item.countryName === val);
          setSelectedCountry(item?.countryName);
        }}
        listMode="SCROLLVIEW"
        renderListItem={({ item }) => (
          <CountryListItem item={item} onPress={handleSelectItem} />
        )}
      />
    </DropdownContainer>
  );
};
export default LoginDropDownPicker;

================
File: src/features/auth/components/LoginDropDownPicker.styles.js
================
import styled from "styled-components/native";
import DropDownPicker from "react-native-dropdown-picker";
import { View, Text } from "react-native";
export const DropdownContainer = styled(View)`
  position: relative;
  background-color: ${(props) => props.theme.colors.bg.secondary};
  border-radius: 8px;
`;
export const PlaceholderText = styled(Text)`
  color: ${(props) => props.theme.colors.text.disabled};
  font-family: ${(props) => props.theme.fonts.body};
  font-size: 16px;
  padding-horizontal: ${(props) => props.theme.space[2]};
`;
export const SelectedItemWrapper = styled(View)`
  flex-direction: row;
  align-items: center;
  padding-horizontal: ${(props) => props.theme.space[2]};
`;
export const FlagText = styled(Text)`
  font-size: 20px;
  margin-right: ${(props) => props.theme.space[2]};
`;
export const CodeText = styled(Text)`
  font-family: ${(props) => props.theme.fonts.body};
  font-size: 16px;
  font-weight: ${(props) => props.theme.fontWeights.medium};
  color: ${(props) => props.theme.colors.text.primary};
`;
export const StyledDropDownPicker = styled(DropDownPicker).attrs(
  ({ theme }) => ({
    style: {
      backgroundColor: theme.colors.bg.secondary,
      borderColor: theme.colors.ui.tertiary,
      borderRadius: 8,
      minHeight: 50,
      borderWidth: 1,
      width: "100%",
    },
    dropDownContainerStyle: {
      position: "absolute",
      width: "100%",
      backgroundColor: theme.colors.bg.primary,
      borderColor: theme.colors.ui.tertiary,
      borderWidth: 1,
      borderTopWidth: 0,
      borderBottomLeftRadius: 8,
      borderBottomRightRadius: 8,
      elevation: 5,
      shadowColor: "#000",
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.1,
      shadowRadius: 4,
      zIndex: 1000,
    },
    placeholderStyle: {
      color: theme.colors.text.disabled,
      fontFamily: theme.fonts.body,
      fontSize: 16,
    },
    selectedItemContainerStyle: {
      flexDirection: 'row',
      alignItems: 'center',
      paddingHorizontal: parseInt(theme.space[2]),
    },
    listItemContainerStyle: {
      height: 50,
      flexDirection: 'row',
      alignItems: 'center',
    },
    listParentContainerStyle: {
      maxHeight: 250,
    },
    itemSeparatorStyle: {
      backgroundColor: theme.colors.ui.tertiary,
      height: 0.5,
    },
  })
)`
  z-index: 2000;
`;

================
File: src/features/auth/screens/LoginScreen.js
================
import React, { useState } from "react";
import { View } from "react-native";
import { Formik } from "formik";
import * as yup from "yup";
import { countryCodes } from "../../../data/mockData";
import {
  Container,
  TopRightContainer,
  Logo,
  InputContainer,
  FlexContainer,
  TextInput,
  Button,
  ButtonText,
  LinkText,
  ErrorText,
  TitleText,
} from "./LoginScreen.styles";
import { useAuthentication } from "../../../services/AuthenticationContext";
import { useLanguage } from "../../../services/LanguageContext";
import LoginDropDownPicker from "../components/LoginDropDownPicker";
import SwitchContainer from "../../../components/Switch/Switch";
import LanguageSelector from "../../../components/LanguageSelector/LanguageSelector";
const validationSchema = yup.object().shape({
  phone: yup
    .string()
    .required("Phone number is required")
    .matches(/^\d+$/, "Phone number must contain only digits"),
  password: yup
    .string()
    .min(6, "Password must be at least 6 characters")
    .required("Password is required"),
});
export const LoginScreen = ({ navigation }) => {
  const [selectedCountry, setSelectedCountry] = useState("United States");
  const [containerWidth, setContainerWidth] = useState(380);
  const [isMerchant, setIsMerchant] = useState(false);
  const { onLogin, isLoading, error } = useAuthentication();
  const { currentLanguage, changeLanguage } = useLanguage();
  const handleLogin = (values) => {
    const selectedCode =
      countryCodes.find((country) => country.countryName === selectedCountry)
        ?.code || "+1";
    onLogin(
      `${selectedCode}${values.phone}`,
      values.password,
      isMerchant ? "merchant" : "customer"
    );
  };
  return (
    <Container>
      <LanguageSelector
        currentLanguage={currentLanguage}
        onChangeLanguage={changeLanguage}
        style={{
          position: "absolute",
          top: 20,
          left: 20,
          zIndex: 1000,
        }}
      />
      {}
      <TopRightContainer style={{ transform: [{ scale: 0.8 }] }}>
        <SwitchContainer
          isOn={isMerchant}
          setIsOn={setIsMerchant}
          leftLabel="Customer"
          rightLabel="Merchant"
          variant="alternate"
        />
      </TopRightContainer>
      <Logo source={require("../../../../assets/images/splash copy.png")} />
      <TitleText variant="title">Login</TitleText>
      <Formik
        initialValues={{ phone: "", password: "" }}
        validationSchema={validationSchema}
        onSubmit={handleLogin}
      >
        {({
          handleChange,
          handleBlur,
          handleSubmit,
          values,
          errors,
          touched,
          isValid,
        }) => (
          <>
            <InputContainer
              style={{ zIndex: 2000, elevation: 2000 }}
              onLayout={(event) => {
                const { width } = event.nativeEvent.layout;
                setContainerWidth(width);
              }}
            >
              <FlexContainer>
                <View
                  style={{
                    flex: 0.31,
                    marginRight: "2%",
                    zIndex: 9000,
                    elevation: 9000,
                  }}
                >
                  <LoginDropDownPicker
                    countryCodes={countryCodes}
                    selectedCountry={selectedCountry}
                    setSelectedCountry={setSelectedCountry}
                    containerWidth={containerWidth}
                  />
                </View>
                <View style={{ flex: 0.69 }}>
                  <TextInput
                    placeholder="Phone number"
                    placeholderTextColor="#9C9C9C"
                    keyboardType="number-pad"
                    onChangeText={handleChange("phone")}
                    onBlur={handleBlur("phone")}
                    value={values.phone}
                  />
                </View>
              </FlexContainer>
              {errors.phone && touched.phone && (
                <ErrorText>{errors.phone}</ErrorText>
              )}
            </InputContainer>
            <InputContainer>
              <TextInput
                placeholder="Password"
                placeholderTextColor="#9C9C9C"
                secureTextEntry
                autoCapitalize="none"
                onChangeText={handleChange("password")}
                onBlur={handleBlur("password")}
                value={values.password}
              />
              {errors.password && touched.password && (
                <ErrorText>{errors.password}</ErrorText>
              )}
            </InputContainer>
            <Button onPress={handleSubmit} disabled={!isValid}>
              <ButtonText> {isLoading ? "Logging in..." : "Login"} </ButtonText>
            </Button>
            {error && <ErrorText>{error}</ErrorText>}
            <LinkText onPress={() => console.log("Navigate to SignUp")}>
              Don't have an account? Sign Up
            </LinkText>
          </>
        )}
      </Formik>
    </Container>
  );
};

================
File: src/features/auth/screens/LoginScreen.styles.js
================
import styled from "styled-components/native";
import { CustomText } from "../../../components/CustomText/CustomText";
export const Container = styled.View`
  flex: 1;
  justify-content: flex-start;
  align-items: center;
  background-color: ${(props) => props.theme.colors.bg.primary};
  padding: ${(props) => props.theme.space[4]};
`;
export const Logo = styled.Image`
  height: 100px;
  width: 100px;
  margin-bottom: ${(props) => props.theme.space[4]};
`;
export const InputContainer = styled.View`
  width: 100%;
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const TextInput = styled.TextInput`
  width: 100%;
  padding: ${(props) => props.theme.space[3]};
  font-size: ${(props) => props.theme.fontSizes.body};
  color: ${(props) => props.theme.colors.text.primary};
  background-color: ${(props) => props.theme.colors.bg.secondary};
  border-radius: ${(props) => props.theme.space[2]};
`;
export const FlexContainer = styled.View`
  z-index: 9999;
  elevation: 9999;
  flex-direction: row;
  align-items: center;
  width: 100%;
`;
export const Button = styled.TouchableOpacity`
  width: 90%;
  padding: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.ui.primary};
  border-radius: ${(props) => props.theme.space[1]};
  align-items: center;
  margin-top: ${(props) => props.theme.space[3]};
`;
export const ButtonText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.inverse};
  font-size: ${(props) => props.theme.fontSizes.body};
`;
export const LinkText = styled(CustomText)`
  margin-top: ${(props) => props.theme.space[2]};
  color: ${(props) => props.theme.colors.text.secondary};
  text-decoration: underline;
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
export const ErrorText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.error};
  font-size: ${(props) => props.theme.fontSizes.caption};
  margin-top: ${(props) => props.theme.space[1]};
`;
export const TitleText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.primary};
  padding-bottom: ${(props) => props.theme.space[4]};
  font-size: ${(props) => props.theme.fontSizes.title};
`;
export const TopRightContainer = styled.View`
  position: absolute;
  top: ${(props) => props.theme.space[0]};
  right: ${(props) => props.theme.space[0]};
  z-index: 10000;
`;

================
File: src/features/customer/reservations/components/PastReservationCard.js
================
import React from "react";
import { View } from "react-native";
import { useNavigation } from "@react-navigation/native";
import { format } from "date-fns";
import styled, { useTheme } from "styled-components/native";
import { Spacer } from "../../../../components/Spacer/Spacer";
import { CustomText } from "../../../../components/CustomText/CustomText";
import {
  PastReservationCardContainer,
  CircleImage,
  InfoContainer,
  InfoText,
  StatusText,
  ViewStoreButton,
  ViewStoreButtonText,
} from "./PastReservationCard.styles";
const SelectedPastCardContainer = styled(PastReservationCardContainer)`
  background-color: ${(props) =>
    props.isSelected ? props.theme.colors.bg.secondary : "transparent"};
  border-radius: 8px;
`;
export const PastReservationCard = ({
  reservation = {},
  isSelected = false,
}) => {
  const navigation = useNavigation();
  const theme = useTheme();
  const {
    restaurant = {},
    date = "2024-04-01",
    status = "Completed",
  } = reservation;
  const formattedDate =
    typeof date === "string"
      ? format(new Date(date), "MMM d, yyyy")
      : format(date, "MMM d, yyyy");
  return (
    <SelectedPastCardContainer isSelected={isSelected}>
      <CircleImage source={{ uri: restaurant.photos[0] }} />
      <InfoContainer>
        <CustomText variant="title">{restaurant.name}</CustomText>
        <Spacer position="top" size="small" />
        <InfoText>Reserved Date: {formattedDate}</InfoText>
        <Spacer position="top" size="small" />
        <StatusText>{status}</StatusText>
      </InfoContainer>
      <ViewStoreButton
        onPress={() => {
          navigation.navigate("RestaurantDetailScreen", {
            restaurant: restaurant,
          });
        }}
      >
        <ViewStoreButtonText>View</ViewStoreButtonText>
      </ViewStoreButton>
    </SelectedPastCardContainer>
  );
};

================
File: src/features/customer/reservations/components/PastReservationCard.styles.js
================
import styled from "styled-components/native";
import { View, Text, Image, TouchableOpacity } from "react-native";
export const PastReservationCardContainer = styled(View)`
  flex-direction: row;
  align-items: center;
  padding-left: ${(props) => props.theme.space[3]};
  padding-right: ${(props) => props.theme.space[3]};
  border-radius: 8px;
  margin-vertical: ${(props) => props.theme.space[2]};
`;
export const CircleImage = styled(Image)`
  width: 50px;
  height: 50px;
  border-radius: 25px;
`;
export const InfoContainer = styled(View)`
  flex: 1;
  margin-left: ${(props) => props.theme.space[3]};
`;
export const InfoText = styled(Text)`
  font-family: ${(props) => props.theme.fonts.body};
  font-size: ${(props) => props.theme.fontSizes.body};
  color: ${(props) => props.theme.colors.text.primary};
`;
export const StatusText = styled(Text)`
  font-family: ${(props) => props.theme.fonts.body};
  font-size: ${(props) => props.theme.fontSizes.body};
  color: ${(props) => props.theme.colors.text.primary};
`;
export const ViewStoreButton = styled(TouchableOpacity)`
  padding-vertical: ${(props) => props.theme.space[2]};
  padding-horizontal: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.ui.tertiary};
  border-radius: 25px;
`;
export const ViewStoreButtonText = styled(Text)`
  font-family: ${(props) => props.theme.fonts.body};
  font-size: ${(props) => props.theme.fontSizes.button};
  color: ${(props) => props.theme.colors.text.primary};
  text-align: center;
`;

================
File: src/features/customer/reservations/components/ReservationCard.js
================
import React from "react";
import { View } from "react-native";
import { format, isToday, isTomorrow } from "date-fns";
import styled, { useTheme } from "styled-components/native";
import { Spacer } from "../../../../components/Spacer/Spacer";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { MaterialIcons } from "@expo/vector-icons";
import {
  ReservationCardContainer,
  ReservationCardCover,
  Info,
  Section,
  ReservationDetails,
  DetailText,
  TrackButton,
  TrackButtonText,
} from "./ReservationCard.styles";
const SelectedIndicator = styled.View`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border: 2px solid ${(props) => props.theme.colors.ui.primary};
  border-radius: 8px;
  pointer-events: none;
`;
const StatusContainer = styled.View`
  position: absolute;
  top: ${(props) => props.theme.space[2]};
  right: ${(props) => props.theme.space[2]};
  background-color: ${(props) => {
    switch (props.status) {
      case "Confirmed":
        return "#4CAF50";
      case "Pending":
        return "#FFC107";
      default:
        return "#757575";
    }
  }};
  padding: ${(props) => props.theme.space[1]} ${(props) => props.theme.space[2]};
  border-radius: 4px;
`;
const StatusText = styled(CustomText)`
  color: white;
  font-size: ${(props) => props.theme.fontSizes.caption};
  font-weight: bold;
`;
const IconRow = styled.View`
  flex-direction: row;
  align-items: center;
  margin-vertical: ${(props) => props.theme.space[1]};
`;
const formatDate = (date) => {
  if (isToday(new Date(date))) return "Today";
  if (isTomorrow(new Date(date))) return "Tomorrow";
  return format(new Date(date), "EEE, MMM d");
};
export const ReservationCard = ({ reservation = {}, isSelected = false }) => {
  const theme = useTheme();
  const {
    restaurant = {},
    date = "2024-04-01",
    time = "7:00 PM",
    seatsNumber = 4,
    people = 4,
    status = "Confirmed",
  } = reservation;
  const partySize = people || seatsNumber;
  return (
    <ReservationCardContainer elevation={0}>
      <ReservationCardCover source={{ uri: restaurant.photos[0] }} />
      <StatusContainer status={status}>
        <StatusText>{status}</StatusText>
      </StatusContainer>
      <Info>
        <CustomText variant="title">{restaurant.name}</CustomText>
        <Section>
          <ReservationDetails>
            <IconRow>
              <MaterialIcons
                name="event"
                size={16}
                color={theme.colors.text.primary}
              />
              <Spacer position="left" size="small" />
              <DetailText>{formatDate(date)}</DetailText>
            </IconRow>
            <IconRow>
              <MaterialIcons
                name="schedule"
                size={16}
                color={theme.colors.text.primary}
              />
              <Spacer position="left" size="small" />
              <DetailText>{time}</DetailText>
            </IconRow>
            <IconRow>
              <MaterialIcons
                name="people"
                size={16}
                color={theme.colors.text.primary}
              />
              <Spacer position="left" size="small" />
              <DetailText>
                {partySize} {partySize === 1 ? "person" : "people"}
              </DetailText>
            </IconRow>
          </ReservationDetails>
          <TrackButton>
            <TrackButtonText>Details</TrackButtonText>
          </TrackButton>
        </Section>
      </Info>
      {isSelected && <SelectedIndicator />}
    </ReservationCardContainer>
  );
};

================
File: src/features/customer/reservations/components/ReservationCard.styles.js
================
import styled from "styled-components/native";
import { Image, View, TouchableOpacity, Text } from "react-native";
import { Card } from "react-native-paper";
export const ReservationCardContainer = styled(Card)`
  background-color: ${(props) => props.theme.colors.bg.primary};
  width: 98%;
  align-self: center;
  border-radius: 8px;
  /* Remove elevation for Android */
  elevation: 0;
  /* Remove shadow for iOS */
  shadow-color: transparent;
  shadow-opacity: 0;
  shadow-radius: 0px;
`;
export const ReservationCardCover = styled(Card.Cover)`
  padding: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.primary};
  height: 150px;
  border-top-left-radius: 8px;
  border-top-right-radius: 8px;
`;
export const Info = styled(View)`
  padding-left: ${(props) => props.theme.space[3]};
  padding-right: ${(props) => props.theme.space[3]};
  padding-bottom: 0;
  margin-top: -5px;
`;
export const Section = styled(View)`
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  margin-top: ${(props) => props.theme.space[2]};
`;
export const ReservationDetails = styled(View)`
  flex-direction: column;
`;
export const DetailText = styled(Text)`
  font-family: ${(props) => props.theme.fonts.body};
  font-size: ${(props) => props.theme.fontSizes.body};
  color: ${(props) => props.theme.colors.text.primary};
`;
export const TrackButton = styled(TouchableOpacity)`
  padding: ${(props) => props.theme.space[1]} ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.ui.primary};
  border-radius: 25px;
`;
export const TrackButtonText = styled(Text)`
  padding: ${(props) => props.theme.space[2]};
  font-family: ${(props) => props.theme.fonts.body};
  font-size: ${(props) => props.theme.fontSizes.body};
  color: ${(props) => props.theme.colors.bg.primary};
  text-align: center;
`;

================
File: src/features/customer/reservations/components/ReservationLayoutView.js
================
import React, { useState, useEffect, useCallback } from "react";
import { View, TouchableOpacity, Alert } from "react-native";
import styled from "styled-components/native";
import { MaterialIcons } from "@expo/vector-icons";
import { CustomText } from "../../../../components/CustomText/CustomText";
import WebApp from "../../../../components/WebApp/WebApp";
import ErrorBoundary from "../../../../components/ErrorBoundary/ErrorBoundary";
const Container = styled.View`
  min-height: 250px;
  margin-bottom: ${(props) => props.theme.space[3]};
  border-radius: 8px;
  overflow: hidden;
  background-color: ${(props) => props.theme.colors.bg.secondary};
`;
const InfoBar = styled.View`
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.ui.tertiary};
`;
const InfoText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  color: ${(props) => props.theme.colors.text.secondary};
`;
const PartyLimitText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  color: ${(props) => props.theme.colors.text.error};
  font-weight: bold;
`;
const SelectedSeats = styled(CustomText)`
  font-weight: ${(props) => props.theme.fontWeights.bold};
  color: ${(props) => props.theme.colors.text.primary};
`;
const LegendContainer = styled.View`
  flex-direction: row;
  flex-wrap: wrap;
  padding: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.bg.primary};
  border-top-width: 1px;
  border-top-color: ${(props) => props.theme.colors.ui.tertiary};
`;
const LegendItem = styled.View`
  flex-direction: row;
  align-items: center;
  margin-right: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[1]};
`;
const LegendColor = styled.View`
  width: 12px;
  height: 12px;
  border-radius: 6px;
  margin-right: ${(props) => props.theme.space[1]};
  background-color: ${(props) => props.color};
`;
const LegendText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
/**
 * ReservationLayoutView component for selecting seats in the restaurant layout
 *
 * @param {Object} props - Component props
 * @param {Function} props.onTableSelect - Callback function when seats are selected
 * @param {number} props.partySize - Number of people in the party
 * @param {string} props.selectedTime - Selected reservation time (e.g. "19:00")
 * @param {string} props.selectedDate - Selected reservation date (formatted as YYYY-MM-DD)
 * @param {Function} props.onInteractionStart - Callback when interaction with layout starts
 * @param {Function} props.onInteractionEnd - Callback when interaction with layout ends
 * @returns {JSX.Element} The reservation layout component
 */
const ReservationLayoutView = ({
  onTableSelect,
  partySize,
  selectedTime,
  selectedDate,
  onInteractionStart,
  onInteractionEnd,
}) => {
  // State to track selected seats
  const [selectedItems, setSelectedItems] = useState([]);
  // Reset selections when party size changes
  useEffect(() => {
    setSelectedItems([]);
    if (onTableSelect) {
      onTableSelect(null);
    }
  }, [partySize, onTableSelect]);
  /**
   * Handle selection of chairs/seats from the WebApp
   * @param {Array} items - Array of selected seat IDs
   */
  const handleWebAppSelection = useCallback(
    (items) => {
      // Handle party size limitations
      if (items.length > partySize) {
        // Keep the most recent selections up to the party size limit
        const limitedItems = items.slice(-partySize);
        // Notify user about the limit
        Alert.alert(
          "Selection Limit Reached",
          `You can only select ${partySize} ${
            partySize === 1 ? "seat" : "seats"
          } based on your party size.`
        );
        // Update internal state
        setSelectedItems(limitedItems);
        // Notify parent component about selected items
        if (onTableSelect) {
          onTableSelect(limitedItems.join(","));
        }
      } else {
        // Normal selection within limits
        setSelectedItems(items);
        // Notify parent component
        if (items.length > 0 && onTableSelect) {
          onTableSelect(items.join(","));
        } else if (onTableSelect) {
          onTableSelect(null);
        }
      }
    },
    [partySize, onTableSelect]
  );
  return (
    <Container>
      <InfoBar>
        <InfoText>
          Preview available seats for {partySize}{" "}
          {partySize === 1 ? "person" : "people"} at {selectedTime}
        </InfoText>
        {selectedItems.length > 0 ? (
          <SelectedSeats>
            Selected: {selectedItems.join(", ")}
            {selectedItems.length < partySize &&
              ` (${partySize - selectedItems.length} more needed)`}
          </SelectedSeats>
        ) : (
          <PartyLimitText>Please select up to {partySize} seats</PartyLimitText>
        )}
      </InfoBar>
      <ErrorBoundary>
        <WebApp
          onInteractionStart={onInteractionStart}
          onInteractionEnd={onInteractionEnd}
          selectedItems={selectedItems}
          onSelectedItemsChange={handleWebAppSelection}
        />
      </ErrorBoundary>
      <LegendContainer>
        <LegendItem>
          <LegendColor color="#4CAF50" />
          <LegendText>Selected</LegendText>
        </LegendItem>
        <LegendItem>
          <LegendColor color="#F44336" />
          <LegendText>Occupied</LegendText>
        </LegendItem>
        <LegendItem>
          <LegendColor color="#FFC107" />
          <LegendText>Reserved</LegendText>
        </LegendItem>
      </LegendContainer>
    </Container>
  );
};
export default ReservationLayoutView;

================
File: src/features/customer/reservations/screens/ReservationFlow.js
================
import React, { useState, useEffect, useRef, useCallback } from "react";
import {
  View,
  ScrollView,
  TouchableOpacity,
  Alert,
  FlatList,
} from "react-native";
import { MaterialIcons } from "@expo/vector-icons";
import { format, addDays, isSameDay, getDay } from "date-fns";
import { useNavigation, useRoute } from "@react-navigation/native";
import { CustomText } from "../../../../components/CustomText/CustomText";
import ReservationLayoutView from "../components/ReservationLayoutView";
import { TimeScroll } from "../../../../components/TimeScroll/TimeScroll";
import { Separator } from "../../../../components/Separator/Separator";
import { Spacer } from "../../../../components/Spacer/Spacer";
import { generateTimeSlots } from "../../../merchant/reservations/utils/timeUtils";
import * as Styles from "./ReservationFlow.styles";
import { BackButton } from "../../../../components/BackButton/BackButton";
const getDayAvailability = (date) => {
  const day = getDay(date);
  if (day === 0 || day === 6) return "medium";
  if (day === 1) return "unavailable";
  return "high";
};
const getWeekdayName = (date) => {
  const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  return days[getDay(date)];
};
const ReservationFlow = () => {
  const navigation = useNavigation();
  const route = useRoute();
  const { restaurant, existingReservation } = route.params || {};
  const dateScrollRef = useRef(null);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [partySize, setPartySize] = useState(2);
  const [availableTimes, setAvailableTimes] = useState([]);
  const [selectedTime, setSelectedTime] = useState(null);
  const [showLayout, setShowLayout] = useState(false);
  const [selectedChairs, setSelectedChairs] = useState([]);
  const [notes, setNotes] = useState("");
  const [availability, setAvailability] = useState("high");
  const [scrollEnabled, setScrollEnabled] = useState(true);
  const [duration, setDuration] = useState(90);
  useEffect(() => {
    if (existingReservation) {
      if (existingReservation.date) {
        try {
          const date = new Date(existingReservation.date);
          setSelectedDate(date);
        } catch (e) {
          console.error("Failed to parse date:", e);
        }
      }
      if (existingReservation.people) {
        setPartySize(existingReservation.people);
      }
      if (existingReservation.time) {
        setSelectedTime(existingReservation.time);
      }
      if (existingReservation.note) {
        setNotes(existingReservation.note);
      }
      if (existingReservation.chairs && existingReservation.chairs.length > 0) {
        setSelectedChairs(existingReservation.chairs);
        setShowLayout(true);
      }
      if (existingReservation.duration) {
        setDuration(existingReservation.duration);
      }
    }
  }, [existingReservation]);
  const generateDates = useCallback(() => {
    const dates = [];
    const today = new Date();
    for (let i = 0; i < 60; i++) {
      const date = addDays(today, i);
      const availability = getDayAvailability(date);
      dates.push({
        date,
        label: i === 0 ? "Today" : i === 1 ? "Tomorrow" : format(date, "MMM d"),
        weekday: getWeekdayName(date),
        availability,
        isUnavailable: availability === "unavailable",
      });
    }
    return dates;
  }, []);
  const generatePartySizeOptions = useCallback(() => {
    const maxPartySize = restaurant?.settings?.maxReservationSize || 20;
    return Array.from({ length: maxPartySize }, (_, i) => i + 1);
  }, [restaurant?.settings?.maxReservationSize]);
  const [dateOptions] = useState(generateDates);
  const [partySizeOptions] = useState(generatePartySizeOptions);
  useEffect(() => {
    const allSlots = generateTimeSlots();
    const dayOfWeek = getDay(selectedDate);
    let filteredTimes;
    if (dayOfWeek === 0 || dayOfWeek === 6) {
      filteredTimes = allSlots.filter((time) => {
        const hour = parseInt(time.split(":")[0]);
        return hour >= 10 && hour <= 22;
      });
    } else {
      filteredTimes = allSlots.filter((time) => {
        const hour = parseInt(time.split(":")[0]);
        return hour >= 11 && hour <= 21;
      });
    }
    setAvailableTimes(filteredTimes);
    if (!selectedTime || !filteredTimes.includes(selectedTime)) {
      const defaultTimeIndex = Math.floor(filteredTimes.length / 2);
      setSelectedTime(filteredTimes[defaultTimeIndex]);
    }
  }, [selectedDate]);
  useEffect(() => {
    if (!selectedTime) return;
    const hour = parseInt(selectedTime.split(":")[0]);
    if (partySize > 10) {
      setAvailability("low");
    } else if ((hour >= 18 && hour <= 20) || partySize > 6) {
      setAvailability("medium");
    } else {
      setAvailability("high");
    }
    if (partySize >= 8) {
      setDuration(120);
    } else if (partySize >= 4) {
      setDuration(90);
    } else {
      setDuration(60);
    }
  }, [selectedTime, partySize]);
  useEffect(() => {
    if (!existingReservation) {
      setSelectedChairs([]);
    }
  }, [partySize, selectedTime]);
  const handleInteractionStart = useCallback(() => {
    setScrollEnabled(false);
  }, []);
  const handleInteractionEnd = useCallback(() => {
    setScrollEnabled(true);
  }, []);
  const handleChairSelection = useCallback((chairIds) => {
    if (chairIds) {
      setSelectedChairs(chairIds.split(","));
      console.log("Selected chairs in reserv flow:", chairIds.split(","));
    } else {
      setSelectedChairs([]);
    }
  }, []);
  const generateReservationId = () => {
    return Math.floor(Math.random() * 10000) + 1;
  };
  const handleReservePress = useCallback(() => {
    if (!selectedDate || !selectedTime) {
      Alert.alert(
        "Missing Information",
        "Please select a date and time for your reservation."
      );
      return;
    }
    if (showLayout && selectedChairs.length > 0) {
      if (selectedChairs.length < partySize) {
        Alert.alert(
          "Seat Selection Required",
          `Please select ${partySize} seats. You have selected ${selectedChairs.length}.`
        );
        return;
      }
    }
    const customerName = "Current User";
    const reservationDetails = {
      id: existingReservation?.id || generateReservationId(),
      customerName,
      restaurant: restaurant,
      date: format(selectedDate, "yyyy-MM-dd"),
      time: selectedTime,
      people: partySize,
      duration: duration,
      status: "confirmed",
      note: notes,
    };
    if (selectedChairs.length > 0) {
      reservationDetails.chairs = selectedChairs;
    } else {
      reservationDetails.autoAssigned = true;
    }
    const isModification = !!existingReservation;
    const title = isModification
      ? "Reservation Updated!"
      : "Reservation Confirmed!";
    const message = `Your reservation for ${partySize} ${
      partySize > 1 ? "people" : "person"
    } at ${selectedTime} on ${format(selectedDate, "EEE, MMM d")} has been ${
      isModification ? "updated" : "confirmed"
    }.${
      selectedChairs.length === 0
        ? "\n\nYour seats will be assigned upon arrival."
        : ""
    }`;
    Alert.alert(title, message, [
      {
        text: "OK",
        onPress: () => {
          navigation.navigate("ReservationsScreen");
        },
      },
    ]);
  }, [
    selectedDate,
    selectedTime,
    partySize,
    duration,
    selectedChairs,
    showLayout,
    notes,
    restaurant,
    existingReservation,
    navigation,
  ]);
  const renderAvailabilityLegend = () => (
    <View style={{ flexDirection: "row", marginTop: 8, marginBottom: 16 }}>
      <Styles.AvailabilityRow>
        <View
          style={{
            width: 10,
            height: 10,
            borderRadius: 5,
            backgroundColor: "#4CAF50",
            marginRight: 4,
          }}
        />
        <Styles.AvailabilityText>High</Styles.AvailabilityText>
      </Styles.AvailabilityRow>
      <Styles.AvailabilityRow style={{ marginLeft: 12 }}>
        <View
          style={{
            width: 10,
            height: 10,
            borderRadius: 5,
            backgroundColor: "#FFC107",
            marginRight: 4,
          }}
        />
        <Styles.AvailabilityText>Limited</Styles.AvailabilityText>
      </Styles.AvailabilityRow>
      <Styles.AvailabilityRow style={{ marginLeft: 12 }}>
        <View
          style={{
            width: 10,
            height: 10,
            borderRadius: 5,
            backgroundColor: "#F44336",
            marginRight: 4,
          }}
        />
        <Styles.AvailabilityText>Few spots</Styles.AvailabilityText>
      </Styles.AvailabilityRow>
    </View>
  );
  return (
    <Styles.Container scrollEnabled={scrollEnabled}>
      <Styles.HeaderContainer>
        <CustomText variant="h4">
          {existingReservation ? "Modify Reservation" : "Make a Reservation"}
        </CustomText>
      </Styles.HeaderContainer>
      {}
      <Styles.DateSelectorContainer>
        <Styles.SectionTitle>Date</Styles.SectionTitle>
        <Styles.DateItemsContainer>
          <FlatList
            ref={dateScrollRef}
            horizontal
            showsHorizontalScrollIndicator={false}
            data={dateOptions}
            keyExtractor={(item, index) => `date-${index}`}
            renderItem={({ item }) => (
              <Styles.DateOption
                selected={isSameDay(selectedDate, item.date)}
                unavailable={item.isUnavailable}
                onPress={() =>
                  !item.isUnavailable && setSelectedDate(item.date)
                }
              >
                <Styles.DateText selected={isSameDay(selectedDate, item.date)}>
                  {item.label}
                </Styles.DateText>
                <Styles.WeekdayText
                  selected={isSameDay(selectedDate, item.date)}
                >
                  {item.weekday}
                </Styles.WeekdayText>
                {!item.isUnavailable && (
                  <Styles.AvailabilityIndicator
                    level={item.availability}
                    selected={isSameDay(selectedDate, item.date)}
                  />
                )}
              </Styles.DateOption>
            )}
            initialNumToRender={7}
            maxToRenderPerBatch={10}
          />
        </Styles.DateItemsContainer>
      </Styles.DateSelectorContainer>
      {}
      <Styles.PartySelectorContainer>
        <Styles.SectionTitle>Party Size</Styles.SectionTitle>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          <Styles.PartyOptionsContainer>
            {partySizeOptions.map((size) => (
              <Styles.PartyOption
                key={`size-${size}`}
                selected={partySize === size}
                onPress={() => setPartySize(size)}
              >
                <Styles.PartyText selected={partySize === size}>
                  {size}
                </Styles.PartyText>
              </Styles.PartyOption>
            ))}
          </Styles.PartyOptionsContainer>
        </ScrollView>
      </Styles.PartySelectorContainer>
      {}
      <Styles.TimeContainer>
        <Styles.SectionTitle>Time</Styles.SectionTitle>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          <Styles.TimeOptionsContainer>
            {availableTimes.map((time, index) => {
              const hour = parseInt(time.split(":")[0]);
              let timeAvailability = "high";
              if (hour >= 18 && hour <= 20) {
                timeAvailability = "medium";
              } else if (hour === 21) {
                timeAvailability = "low";
              }
              return (
                <Styles.TimeOption
                  key={`time-${index}`}
                  selected={selectedTime === time}
                  availability={timeAvailability}
                  onPress={() => setSelectedTime(time)}
                >
                  <Styles.TimeText selected={selectedTime === time}>
                    {time}
                  </Styles.TimeText>
                  <Styles.TimeAvailabilityIndicator
                    level={timeAvailability}
                    selected={selectedTime === time}
                  />
                </Styles.TimeOption>
              );
            })}
          </Styles.TimeOptionsContainer>
        </ScrollView>
        {renderAvailabilityLegend()}
      </Styles.TimeContainer>
      <Separator type="full" />
      {}
      <Styles.ToggleButton onPress={() => setShowLayout(!showLayout)}>
        <MaterialIcons
          name={showLayout ? "visibility-off" : "visibility"}
          size={24}
          color="#262626"
        />
        <Styles.ToggleText>
          {showLayout ? "Hide Seating Layout" : "Select Your Seats"}
        </Styles.ToggleText>
      </Styles.ToggleButton>
      {}
      {showLayout && (
        <Styles.LayoutContainer>
          <ReservationLayoutView
            onTableSelect={handleChairSelection}
            partySize={partySize}
            selectedTime={selectedTime}
            selectedDate={format(selectedDate, "yyyy-MM-dd")}
            onInteractionStart={handleInteractionStart}
            onInteractionEnd={handleInteractionEnd}
          />
        </Styles.LayoutContainer>
      )}
      {}
      <Styles.SectionTitle>Special Requests (Optional)</Styles.SectionTitle>
      <Styles.NotesInput
        multiline
        placeholder="Add any special requests or dietary requirements..."
        value={notes}
        onChangeText={setNotes}
        textAlignVertical="top"
      />
      {}
      <Styles.ReserveButton onPress={handleReservePress}>
        <Styles.ReserveButtonText>
          {existingReservation ? "Update Reservation" : "Reserve Now"}
        </Styles.ReserveButtonText>
      </Styles.ReserveButton>
      <View style={{ height: 40 }} />
    </Styles.Container>
  );
};
export default ReservationFlow;

================
File: src/features/customer/reservations/screens/ReservationFlow.styles.js
================
import styled from "styled-components/native";
import { CustomText } from "../../../../components/CustomText/CustomText";
export const Container = styled.ScrollView`
  flex: 1;
  background-color: ${(props) => props.theme.colors.bg.primary};
  padding-horizontal: ${(props) => props.theme.space[3]};
`;
export const HeaderContainer = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  margin-top: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[3]};
`;
// Enhanced Date Selector
export const DateSelectorContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const DateItemsContainer = styled.View`
  margin-vertical: ${(props) => props.theme.space[2]};
`;
export const DateOption = styled.TouchableOpacity`
  padding-vertical: ${(props) => props.theme.space[2]};
  padding-horizontal: ${(props) => props.theme.space[3]};
  margin-right: ${(props) => props.theme.space[2]};
  background-color: ${(props) =>
    props.selected
      ? props.theme.colors.ui.primary
      : props.theme.colors.bg.secondary};
  border-radius: 20px;
  min-width: 80px;
  align-items: center;
  ${(props) =>
    props.unavailable &&
    `
    opacity: 0.5;
  `}
  elevation: ${(props) => (props.selected ? 3 : 0)};
  shadow-opacity: ${(props) => (props.selected ? 0.2 : 0)};
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const DateText = styled(CustomText)`
  color: ${(props) =>
    props.selected
      ? props.theme.colors.text.inverse
      : props.theme.colors.text.primary};
  font-size: ${(props) => props.theme.fontSizes.caption};
  font-weight: ${(props) =>
    props.selected
      ? props.theme.fontWeights.bold
      : props.theme.fontWeights.regular};
`;
export const WeekdayText = styled(CustomText)`
  color: ${(props) =>
    props.selected
      ? props.theme.colors.text.inverse
      : props.theme.colors.text.secondary};
  font-size: ${(props) => props.theme.fontSizes.caption};
  margin-top: 2px;
`;
export const AvailabilityIndicator = styled.View`
  width: 6px;
  height: 6px;
  border-radius: 3px;
  margin-top: 2px;
  background-color: ${(props) => {
    if (props.selected) return props.theme.colors.text.inverse;
    switch (props.level) {
      case "high":
        return "#4CAF50";
      case "medium":
        return "#FFC107";
      case "low":
        return "#F44336";
      default:
        return "#BDBDBD";
    }
  }};
`;
// Enhanced Party Size Selector
export const PartySelectorContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const PartyOptionsContainer = styled.View`
  flex-direction: row;
  flex-wrap: wrap;
  margin-top: ${(props) => props.theme.space[2]};
`;
export const PartyOption = styled.TouchableOpacity`
  min-width: 50px;
  height: 50px;
  margin-right: ${(props) => props.theme.space[2]};
  margin-bottom: ${(props) => props.theme.space[2]};
  background-color: ${(props) =>
    props.selected
      ? props.theme.colors.ui.primary
      : props.theme.colors.bg.secondary};
  border-radius: 25px;
  align-items: center;
  justify-content: center;
  elevation: ${(props) => (props.selected ? 3 : 0)};
  shadow-opacity: ${(props) => (props.selected ? 0.2 : 0)};
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const PartyText = styled(CustomText)`
  color: ${(props) =>
    props.selected
      ? props.theme.colors.text.inverse
      : props.theme.colors.text.primary};
  font-size: ${(props) => props.theme.fontSizes.body};
  font-weight: ${(props) =>
    props.selected
      ? props.theme.fontWeights.bold
      : props.theme.fontWeights.regular};
`;
// Enhanced Time Selector
export const TimeContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const TimeOptionsContainer = styled.View`
  flex-direction: row;
  flex-wrap: wrap;
  margin-top: ${(props) => props.theme.space[2]};
`;
export const TimeOption = styled.TouchableOpacity`
  min-width: 80px;
  padding-vertical: ${(props) => props.theme.space[2]};
  padding-horizontal: ${(props) => props.theme.space[2]};
  margin-right: ${(props) => props.theme.space[2]};
  margin-bottom: ${(props) => props.theme.space[2]};
  background-color: ${(props) =>
    props.selected
      ? props.theme.colors.ui.primary
      : props.theme.colors.bg.secondary};
  border-radius: 12px;
  align-items: center;
  justify-content: center;
  ${(props) =>
    props.availability === "low" &&
    `
    border: 1px solid #F44336;
  `}
  ${(props) =>
    props.availability === "medium" &&
    `
    border: 1px solid #FFC107;
  `}
  elevation: ${(props) => (props.selected ? 3 : 0)};
  shadow-opacity: ${(props) => (props.selected ? 0.2 : 0)};
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const TimeText = styled(CustomText)`
  color: ${(props) =>
    props.selected
      ? props.theme.colors.text.inverse
      : props.theme.colors.text.primary};
  font-size: ${(props) => props.theme.fontSizes.body};
  font-weight: ${(props) =>
    props.selected
      ? props.theme.fontWeights.bold
      : props.theme.fontWeights.regular};
`;
export const TimeAvailabilityIndicator = styled.View`
  width: 10px;
  height: 10px;
  border-radius: 5px;
  margin-top: 4px;
  background-color: ${(props) => {
    if (props.selected) return props.theme.colors.text.inverse;
    switch (props.level) {
      case "high":
        return "#4CAF50";
      case "medium":
        return "#FFC107";
      case "low":
        return "#F44336";
      default:
        return "#BDBDBD";
    }
  }};
`;
export const AvailabilityRow = styled.View`
  flex-direction: row;
  align-items: center;
  margin-top: ${(props) => props.theme.space[2]};
`;
export const AvailabilityText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  color: ${(props) => props.theme.colors.text.secondary};
  margin-left: ${(props) => props.theme.space[1]};
`;
// Summary Section
export const SummaryContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const SummaryBox = styled.View`
  background-color: ${(props) => props.theme.colors.bg.secondary};
  border-radius: 10px;
  padding: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const SummaryRow = styled.View`
  flex-direction: row;
  align-items: center;
  margin-bottom: ${(props) => props.theme.space[2]};
`;
export const SummaryText = styled(CustomText)`
  margin-left: ${(props) => props.theme.space[2]};
  font-size: ${(props) => props.theme.fontSizes.body};
`;
export const ToggleButton = styled.TouchableOpacity`
  flex-direction: row;
  align-items: center;
  padding: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.bg.secondary};
  border-radius: 8px;
  margin-bottom: ${(props) => props.theme.space[2]};
  elevation: 1;
  shadow-opacity: 0.1;
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const ToggleText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.body};
  margin-left: ${(props) => props.theme.space[2]};
`;
export const LayoutContainer = styled.View`
  min-height: 250px;
  margin-bottom: ${(props) => props.theme.space[3]};
  border-radius: 12px;
  overflow: hidden;
  background-color: ${(props) => props.theme.colors.bg.secondary};
  elevation: 1;
  shadow-opacity: 0.1;
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const NotesInput = styled.TextInput`
  padding: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.secondary};
  border-radius: 12px;
  margin-bottom: ${(props) => props.theme.space[3]};
  min-height: 100px;
  color: ${(props) => props.theme.colors.text.primary};
  elevation: 1;
  shadow-opacity: 0.1;
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const ReserveButton = styled.TouchableOpacity`
  background-color: ${(props) => props.theme.colors.ui.primary};
  padding: ${(props) => props.theme.space[3]};
  border-radius: 12px;
  align-items: center;
  justify-content: center;
  margin-bottom: ${(props) => props.theme.space[4]};
  elevation: 3;
  shadow-opacity: 0.2;
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const ReserveButtonText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.inverse};
  font-size: ${(props) => props.theme.fontSizes.button};
  font-weight: ${(props) => props.theme.fontWeights.bold};
`;
export const SectionTitle = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.body};
  font-weight: ${(props) => props.theme.fontWeights.bold};
  margin-bottom: ${(props) => props.theme.space[2]};
`;
export const InfoText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  color: ${(props) => props.theme.colors.text.secondary};
  margin-bottom: ${(props) => props.theme.space[2]};
  font-style: italic;
`;

================
File: src/features/customer/reservations/screens/ReservationsScreen.js
================
import React, { useState, useEffect, useRef } from "react";
import styled, { useTheme } from "styled-components/native";
import {
  ScrollView,
  TouchableOpacity,
  View,
  Alert,
  TouchableWithoutFeedback,
} from "react-native";
import { useNavigation } from "@react-navigation/native";
import { MaterialIcons } from "@expo/vector-icons";
import { format, isToday, isTomorrow, isPast, parseISO } from "date-fns";
import { reservations } from "../../../../data/mockData";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import { Spacer } from "../../../../components/Spacer/Spacer";
import { Separator } from "../../../../components/Separator/Separator";
import { ReservationCard } from "../components/ReservationCard";
import { PastReservationCard } from "../components/PastReservationCard";
import { useReservation } from "../../../../services/ReservationContext";
import { FadeInView } from "../../../../components/FadeInView/FadeInView";
const Container = styled(SafeArea)`
  flex: 1;
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
const TabBar = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: space-around;
  padding: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.bg.primary};
  border-bottom-width: 1px;
  border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
`;
const Tab = styled(TouchableOpacity)`
  align-items: center;
  padding: ${(props) => props.theme.space[2]};
  border-bottom-width: 2px;
  border-bottom-color: ${(props) =>
    props.active ? props.theme.colors.ui.primary : "transparent"};
`;
const TabText = styled(CustomText)`
  color: ${(props) =>
    props.active
      ? props.theme.colors.ui.primary
      : props.theme.colors.text.primary};
  font-weight: ${(props) =>
    props.active
      ? props.theme.fontWeights.bold
      : props.theme.fontWeights.regular};
`;
// Section title
const SectionTitle = styled(CustomText)`
  margin-left: ${(props) => props.theme.space[2]};
  padding-left: ${(props) => props.theme.space[2]};
  padding-top: ${(props) => props.theme.space[2]};
`;
// Empty state
const EmptyState = styled.View`
  padding: ${(props) => props.theme.space[4]};
  align-items: center;
  justify-content: center;
`;
const EmptyStateText = styled(CustomText)`
  text-align: center;
  color: ${(props) => props.theme.colors.text.secondary};
  margin-top: ${(props) => props.theme.space[2]};
`;
const ActionButton = styled(TouchableOpacity)`
  flex-direction: row;
  align-items: center;
  justify-content: center;
  background-color: ${(props) => props.theme.colors.ui.primary};
  padding: ${(props) => props.theme.space[2]};
  border-radius: 8px;
  margin-top: ${(props) => props.theme.space[3]};
`;
const ActionButtonText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.inverse};
  font-weight: ${(props) => props.theme.fontWeights.bold};
  margin-left: ${(props) => props.theme.space[1]};
`;
// Reservation details
const ReservationDetails = styled.View`
  background-color: ${(props) => props.theme.colors.bg.secondary};
  padding: ${(props) => props.theme.space[3]};
  margin: ${(props) => props.theme.space[3]};
  border-radius: 8px;
  z-index: 10;
`;
const DetailRow = styled.View`
  flex-direction: row;
  align-items: flex-start;
  margin-bottom: ${(props) => props.theme.space[2]};
`;
const DetailIcon = styled(MaterialIcons)`
  margin-right: ${(props) => props.theme.space[2]};
  color: ${(props) => props.theme.colors.text.secondary};
`;
const DetailInfo = styled.View`
  flex: 1;
`;
const DetailLabel = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.secondary};
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
const DetailValue = styled(CustomText)`
  font-weight: ${(props) => props.theme.fontWeights.bold};
`;
const DetailsActions = styled.View`
  flex-direction: row;
  justify-content: space-around;
  margin-top: ${(props) => props.theme.space[3]};
`;
const DetailsActionButton = styled(TouchableOpacity)`
  align-items: center;
  padding: ${(props) => props.theme.space[2]};
`;
const StatusBadge = styled.View`
  background-color: ${(props) => {
    switch (props.status) {
      case "Confirmed":
        return props.theme.colors.ui.success;
      case "Pending":
        return "#FFC107";
      case "Completed":
        return props.theme.colors.ui.secondary;
      case "Cancelled":
        return props.theme.colors.ui.error;
      default:
        return props.theme.colors.ui.secondary;
    }
  }};
  padding: ${(props) => props.theme.space[1]} ${(props) => props.theme.space[2]};
  border-radius: 4px;
  align-self: flex-start;
  margin-bottom: ${(props) => props.theme.space[2]};
`;
const StatusText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.inverse};
  font-size: ${(props) => props.theme.fontSizes.caption};
  font-weight: ${(props) => props.theme.fontWeights.bold};
`;
// Card related components
const CardContainer = styled.View`
  position: relative;
`;
const DetailButtonOverlay = styled(TouchableOpacity)`
  position: absolute;
  right: 10px;
  bottom: 10px;
  height: 50px;
  width: 80px;
  z-index: 100;
`;
const ViewButtonOverlay = styled(TouchableOpacity)`
  position: absolute;
  right: 10px;
  top: 0;
  bottom: 0;
  width: 60px;
  z-index: 100;
  justify-content: center;
`;
// Backdrop for closing details
const Backdrop = styled(TouchableWithoutFeedback)`
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  z-index: 5;
`;
export const ReservationsScreen = () => {
  const navigation = useNavigation();
  const [activeTab, setActiveTab] = useState("upcoming");
  const [selectedReservation, setSelectedReservation] = useState(null);
  const scrollViewRef = useRef(null);
  const { theme } = useTheme();
  const {
    isLoading,
    getUpcomingReservations,
    getPastReservations,
    cancelReservation,
  } = useReservation();
  // For the demo, we'll use mock data since the context isn't fully implemented
  // In a real app, this would use the context data
  const upcomingReservations = reservations.filter(
    (reservation) =>
      reservation.status === "Confirmed" || reservation.status === "Pending"
  );
  const pastReservations = reservations.filter(
    (reservation) => reservation.status === "Completed"
  );
  // Reset selected reservation when tab changes
  useEffect(() => {
    setSelectedReservation(null);
  }, [activeTab]);
  const formatDate = (dateString) => {
    if (!dateString) return "";
    const date = new Date(dateString);
    if (isToday(date)) return "Today";
    if (isTomorrow(date)) return "Tomorrow";
    return format(date, "EEE, MMM d, yyyy");
  };
  const handleReservationPress = (reservation) => {
    setSelectedReservation(
      selectedReservation?.id === reservation.id ? null : reservation
    );
  };
  const closeDetails = () => {
    setSelectedReservation(null);
  };
  const handleCancelReservation = () => {
    Alert.alert(
      "Cancel Reservation",
      "Are you sure you want to cancel this reservation?",
      [
        {
          text: "No",
          style: "cancel",
        },
        {
          text: "Yes, Cancel",
          style: "destructive",
          onPress: async () => {
            // In a real app, this would use the context
            // await cancelReservation(selectedReservation.id);
            Alert.alert("Cancelled", "Your reservation has been cancelled.");
            setSelectedReservation(null);
          },
        },
      ]
    );
  };
  const handleModifyReservation = () => {
    // Navigate to ReservationFlow as a modal with the existing reservation data
    navigation.navigate("ReservationFlow", {
      restaurant: selectedReservation.restaurant,
      existingReservation: selectedReservation,
    });
    // Close the details view
    setSelectedReservation(null);
  };
  const handleMakeNewReservation = () => {
    // Navigate to Restaurants to
    // select a restaurant first
    navigation.navigate("Restaurants");
  };
  const renderEmptyState = () => (
    <EmptyState>
      <MaterialIcons name="event-busy" size={60} color="#757575" />
      <EmptyStateText>
        {activeTab === "upcoming"
          ? "You don't have any upcoming reservations"
          : "You don't have any past reservations"}
      </EmptyStateText>
      {activeTab === "upcoming" && (
        <ActionButton onPress={handleMakeNewReservation}>
          <MaterialIcons name="add" size={20} color="white" />
          <ActionButtonText>Make a Reservation</ActionButtonText>
        </ActionButton>
      )}
    </EmptyState>
  );
  const renderReservationDetails = () => {
    if (!selectedReservation) return null;
    const isPastReservation = selectedReservation.status === "Completed";
    const formattedDuration = selectedReservation.duration
      ? `${Math.floor(selectedReservation.duration / 60)}h${
          selectedReservation.duration % 60 > 0
            ? ` ${selectedReservation.duration % 60}m`
            : ""
        }`
      : "";
    return (
      <>
        <Backdrop onPress={closeDetails}>
          <View style={{ flex: 1 }} />
        </Backdrop>
        <ReservationDetails>
          <StatusBadge status={selectedReservation.status}>
            <StatusText>{selectedReservation.status}</StatusText>
          </StatusBadge>
          <DetailRow>
            <DetailIcon name="restaurant" size={20} />
            <DetailInfo>
              <DetailLabel>Restaurant</DetailLabel>
              <DetailValue>{selectedReservation.restaurant.name}</DetailValue>
            </DetailInfo>
          </DetailRow>
          <DetailRow>
            <DetailIcon name="event" size={20} />
            <DetailInfo>
              <DetailLabel>Date & Time</DetailLabel>
              <DetailValue>
                {formatDate(selectedReservation.date)} at{" "}
                {selectedReservation.time}
                {formattedDuration && ` (${formattedDuration})`}
              </DetailValue>
            </DetailInfo>
          </DetailRow>
          <DetailRow>
            <DetailIcon name="people" size={20} />
            <DetailInfo>
              <DetailLabel>Party Size</DetailLabel>
              <DetailValue>
                {selectedReservation.people || selectedReservation.seatsNumber}{" "}
                people
              </DetailValue>
            </DetailInfo>
          </DetailRow>
          {selectedReservation.chairs &&
            selectedReservation.chairs.length > 0 && (
              <DetailRow>
                <DetailIcon name="event-seat" size={20} />
                <DetailInfo>
                  <DetailLabel>Seating</DetailLabel>
                  <DetailValue>
                    Seats: {selectedReservation.chairs.join(", ")}
                  </DetailValue>
                </DetailInfo>
              </DetailRow>
            )}
          {selectedReservation.counterSeatId && (
            <DetailRow>
              <DetailIcon name="event-seat" size={20} />
              <DetailInfo>
                <DetailLabel>Seating</DetailLabel>
                <DetailValue>
                  Counter Seat: {selectedReservation.counterSeatId}
                </DetailValue>
              </DetailInfo>
            </DetailRow>
          )}
          {selectedReservation.note && (
            <DetailRow>
              <DetailIcon name="notes" size={20} />
              <DetailInfo>
                <DetailLabel>Special Requests</DetailLabel>
                <DetailValue>{selectedReservation.note}</DetailValue>
              </DetailInfo>
            </DetailRow>
          )}
          {!isPastReservation && (
            <DetailsActions>
              <DetailsActionButton onPress={handleModifyReservation}>
                <MaterialIcons name="edit" size={24} color="#262626" />
                <CustomText>Modify</CustomText>
              </DetailsActionButton>
              <DetailsActionButton
                onPress={() => {
                  navigation.navigate("RestaurantDetailScreen", {
                    restaurant: selectedReservation.restaurant,
                  });
                  setSelectedReservation(null);
                }}
              >
                <MaterialIcons name="info" size={24} color="#262626" />
                <CustomText>Details</CustomText>
              </DetailsActionButton>
              <DetailsActionButton onPress={handleCancelReservation}>
                <MaterialIcons name="cancel" size={24} color="#F44336" />
                <CustomText style={{ color: "#F44336" }}>Cancel</CustomText>
              </DetailsActionButton>
            </DetailsActions>
          )}
        </ReservationDetails>
      </>
    );
  };
  return (
    <Container>
      <TabBar>
        <Tab
          active={activeTab === "upcoming"}
          onPress={() => setActiveTab("upcoming")}
        >
          <TabText active={activeTab === "upcoming"}>Upcoming</TabText>
        </Tab>
        <Tab active={activeTab === "past"} onPress={() => setActiveTab("past")}>
          <TabText active={activeTab === "past"}>Past</TabText>
        </Tab>
      </TabBar>
      {selectedReservation && renderReservationDetails()}
      <ScrollView ref={scrollViewRef} onScrollBeginDrag={closeDetails}>
        {activeTab === "upcoming" && (
          <>
            {upcomingReservations.length > 0 ? (
              <>
                <SectionTitle variant="title">
                  Upcoming Reservations
                </SectionTitle>
                {upcomingReservations.map((reservation, index) => (
                  <FadeInView key={reservation.id} duration={300 + index * 100}>
                    <CardContainer>
                      <ReservationCard
                        reservation={reservation}
                        isSelected={selectedReservation?.id === reservation.id}
                      />
                      <DetailButtonOverlay
                        onPress={() => handleReservationPress(reservation)}
                      />
                    </CardContainer>
                    {index < upcomingReservations.length - 1 && (
                      <Separator type="full" />
                    )}
                  </FadeInView>
                ))}
              </>
            ) : (
              renderEmptyState()
            )}
          </>
        )}
        {activeTab === "past" && (
          <>
            {pastReservations.length > 0 ? (
              <>
                <SectionTitle variant="title">Past Reservations</SectionTitle>
                <Spacer position="top" size="small" />
                {pastReservations.map((reservation, index) => (
                  <FadeInView key={reservation.id} duration={300 + index * 100}>
                    <CardContainer>
                      <PastReservationCard
                        reservation={reservation}
                        isSelected={selectedReservation?.id === reservation.id}
                      />
                      <ViewButtonOverlay
                        onPress={() => handleReservationPress(reservation)}
                      />
                    </CardContainer>
                    {index < pastReservations.length - 1 && (
                      <Separator type="partial" />
                    )}
                  </FadeInView>
                ))}
              </>
            ) : (
              renderEmptyState()
            )}
          </>
        )}
      </ScrollView>
    </Container>
  );
};

================
File: src/features/customer/restaurants/components/Others.js
================
import React from "react";
import { View, Text } from "react-native";
import { List, Divider } from "react-native-paper";
const Others = () => (
  <View>
    <Text style={{ fontSize: 24, margin: 16 }}>Others</Text>
    <List.Accordion
      title="Others"
      left={(props) => <List.Icon {...props} icon="dots-horizontal" />}
    >
      {Array.from({ length: 50 }, (_, index) => (
        <List.Item key={index} title={`Other ${index + 1}`} />
      ))}
    </List.Accordion>
    <Divider />
  </View>
);
export default Others;

================
File: src/features/customer/restaurants/components/RestaurantInfoCard.js
================
import React from "react";
import { View } from "react-native";
import { SvgXml } from "react-native-svg";
import { Spacer } from "../../../../components/Spacer/Spacer";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { Favourite } from "../../../../components/Favourite/Favourite";
import star from "../../../../../assets/icons/star";
import open from "../../../../../assets/icons/open";
import {
  RestaurantCard,
  RestaurantCardCover,
  Address,
  Info,
  Section,
  Rating,
  OperationStatus,
  Icon,
} from "./RestaurantInfoCard.styles";
export const RestaurantInfoCard = ({ restaurant = {}, elevation = 5 }) => {
  const {
    name = "Sick Eats",
    icon = "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
    photos = [
      "https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8Zm9vZHxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60",
    ],
    address = "100 random sick avenue",
    isOpenNow = true,
    rating = 4,
    isClosedTemporarily = true,
    placeId,
  } = restaurant;
  const ratingArray = Array.from(new Array(Math.floor(rating)));
  return (
    <RestaurantCard elevation={elevation}>
      <View>
        <Favourite restaurant={restaurant} />
        <RestaurantCardCover key={name} source={{ uri: photos[0] }} />
      </View>
      <Info>
        <CustomText variant="label">{name}</CustomText>
        <Section>
          <Rating>
            {ratingArray.map((_, i) => (
              <SvgXml
                key={`star-${placeId}-${i}`}
                xml={star}
                width={20}
                height={20}
              />
            ))}
          </Rating>
          <OperationStatus>
            {isClosedTemporarily && (
              <CustomText variant="error">CLOSED TEMPORARILY</CustomText>
            )}
            {isOpenNow && <SvgXml xml={open} width={20} height={20} />}
            <Spacer position="left" size="large">
              <Icon source={{ uri: icon }} />
            </Spacer>
          </OperationStatus>
        </Section>
        <Address>{address}</Address>
      </Info>
    </RestaurantCard>
  );
};

================
File: src/features/customer/restaurants/components/RestaurantInfoCard.styles.js
================
import { Image, View, Text } from 'react-native';
import { Card } from 'react-native-paper';
import styled from 'styled-components/native';
export const RestaurantCard = styled(Card)`
  background-color: ${(props) => props.theme.colors.bg.primary};
  width: 95%;
  align-self: center;
`;
export const RestaurantCardCover = styled(Card.Cover)`
  padding: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
export const Address = styled(Text)`
  font-family: ${(props) => props.theme.fonts.body};
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
export const Info = styled(View)`
  padding: ${(props) => props.theme.space[3]};
`;
export const Section = styled(View)`
  flex-direction: row;
  align-items: center;
`;
export const Rating = styled(View)`
  flex-direction: row;
  padding-top: ${(props) => props.theme.space[2]};
  padding-bottom: ${(props) => props.theme.space[2]};
`;
export const OperationStatus = styled(View)`
  flex: 1;
  flex-direction: row;
  justify-content: flex-end;
`;
export const Icon = styled(Image)`
  width: 15px;
  height: 15px;
`;

================
File: src/features/customer/restaurants/components/RestaurantList.styles.js
================
import { FlatList } from "react-native";
import { Button } from "react-native-paper";
import styled from "styled-components/native";
import { colors } from "../../../../infrastructure/theme/colors";
export const RestaurantList = styled(FlatList).attrs({
  contentContainerStyle: {
    padding: 16,
  },
})``;
export const OrderButton = styled(Button).attrs({
  color: colors.brand.primary,
})`
  padding: ${(props) => props.theme.space[2]};
  width: 80%;
  align-self: center;
`;

================
File: src/features/customer/restaurants/components/RestaurantMenu.js
================
import React from "react";
import { View, Text } from "react-native";
import { List, Divider } from "react-native-paper";
const RestaurantMenu = () => (
  <View>
    <Text style={{ fontSize: 24, margin: 16 }}>Menu</Text>
    <List.Accordion
      title="Menu"
      left={(props) => <List.Icon {...props} icon="bread-slice" />}
    >
      {Array.from({ length: 30 }, (_, index) => (
        <List.Item key={index} title={`Item ${index + 1}`} />
      ))}
    </List.Accordion>
    <Divider />
  </View>
);
export default RestaurantMenu;

================
File: src/features/customer/restaurants/components/RestaurantTabBar.js
================
import React, { useRef, useEffect, useCallback, useState } from "react";
import { View, TouchableOpacity, Animated, StyleSheet } from "react-native";
import { useTheme } from "styled-components/native";
const TabBar = (props) => {
  const { routes, navigationState, scrollToTab, setIndex } = props;
  const theme = useTheme();
  const indicatorPosition = useRef(
    new Animated.Value(navigationState.index * (100 / routes.length))
  ).current;
  const [animationProgress, setAnimationProgress] = useState(
    navigationState.index
  );
  const animationRef = useRef(null);
  useEffect(() => {
    if (animationRef.current) {
      animationRef.current.stop();
    }
    animationRef.current = Animated.timing(indicatorPosition, {
      toValue: navigationState.index * (100 / routes.length),
      duration: 100,
      useNativeDriver: false,
    });
    animationRef.current.start();
    const listenerId = indicatorPosition.addListener(({ value }) => {
      const currentSegmentValue = value / (100 / routes.length);
      const closestIndex = Math.round(currentSegmentValue);
      if (closestIndex !== animationProgress) {
        setAnimationProgress(closestIndex);
      }
    });
    return () => {
      indicatorPosition.removeListener(listenerId);
    };
  }, [navigationState.index, routes.length, indicatorPosition]);
  const handleTabPress = useCallback(
    (route, index) => {
      if (navigationState.index !== index && scrollToTab) {
        scrollToTab(route.key, index);
      }
    },
    [scrollToTab, navigationState.index]
  );
  return (
    <View style={[styles.tabBar, { backgroundColor: theme.colors.bg.primary }]}>
      {routes.map((route, i) => {
        const isActive = animationProgress === i;
        return (
          <TouchableOpacity
            key={route.key}
            style={styles.tabItem}
            onPress={() => handleTabPress(route, i)}
            activeOpacity={0.7}
          >
            <Animated.Text
              style={{
                color: isActive
                  ? theme.colors.text.primary
                  : theme.colors.text.secondary,
                fontFamily: theme.fonts.body,
                fontSize: parseInt(theme.fontSizes.body, 10),
                fontWeight: isActive ? "bold" : "normal",
              }}
            >
              {route.title}
            </Animated.Text>
          </TouchableOpacity>
        );
      })}
      {}
      <Animated.View
        style={[
          styles.indicator,
          {
            backgroundColor: theme.colors.text.primary,
            left: indicatorPosition.interpolate({
              inputRange: [0, 100],
              outputRange: ["0%", "100%"],
            }),
            width: `${100 / routes.length}%`,
          },
        ]}
      />
    </View>
  );
};
const styles = StyleSheet.create({
  tabBar: {
    flexDirection: "row",
    height: 48,
    elevation: 0,
    shadowOpacity: 0,
    borderBottomWidth: 1,
    borderBottomColor: "#F0F0F0",
    position: "relative",
    backgroundColor: "white",
  },
  tabItem: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 12,
  },
  indicator: {
    position: "absolute",
    bottom: 0,
    height: 2,
    borderRadius: 1,
  },
});
export default TabBar;

================
File: src/features/customer/restaurants/components/Reviews.js
================
import React from "react";
import { View, Text } from "react-native";
import { List, Divider } from "react-native-paper";
const Reviews = () => (
  <View>
    <Text style={{ fontSize: 24, margin: 16 }}>Reviews</Text>
    <List.Accordion
      title="Reviews"
      left={(props) => <List.Icon {...props} icon="star" />}
    >
      {Array.from({ length: 50 }, (_, index) => (
        <List.Item key={index} title={`Review ${index + 1}`} />
      ))}
    </List.Accordion>
    <Divider />
  </View>
);
export default Reviews;

================
File: src/features/customer/restaurants/components/Search.js
================
import React, { useContext, useState, useEffect } from "react";
import { View } from "react-native";
import { Searchbar } from "react-native-paper";
import styled from "styled-components/native";
const SearchContainer = styled(View)`
  padding: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.brand.secondary};
`;
export const Search = () => {
  keyword = "TestKeyword";
  const [searchKeyword, setSearchKeyword] = useState(keyword);
  useEffect(() => {
    setSearchKeyword(keyword);
  }, [keyword]);
  return (
    <SearchContainer>
      <Searchbar
        placeholder="Search"
        value={searchKeyword}
        onChangeText={(text) => setSearchKeyword(text)}
        style={{ backgroundColor: "#ffffff" }}
      />
    </SearchContainer>
  );
};

================
File: src/features/customer/restaurants/components/TabNavigation.js
================
import React from "react";
import { TabView, SceneMap } from "react-native-tab-view";
import { Animated } from "react-native";
import RestaurantMenu from "./RestaurantMenu";
import Reviews from "./Reviews";
import Others from "./Others";
import TabBar from "./RestaurantTabBar";
const renderSceneMap = {
  menu: RestaurantMenu,
  reviews: Reviews,
  others: Others,
};
const TabNavigation = ({
  index,
  setIndex,
  routes,
  layout,
  renderOpacity,
  scrollToTab,
  heights,
}) => {
  const renderScene = SceneMap(renderSceneMap);
  const handleIndexChange = (newIndex) => {
    if (scrollToTab && routes[newIndex]) {
      scrollToTab(routes[newIndex].key, newIndex);
    }
  };
  return (
    <Animated.View style={{ opacity: renderOpacity }}>
      <TabView
        navigationState={{ index, routes }}
        renderScene={renderScene}
        renderTabBar={(props) => (
          <TabBar
            {...props}
            routes={routes}
            scrollToTab={scrollToTab}
            setIndex={setIndex}
          />
        )}
        onIndexChange={handleIndexChange}
        initialLayout={{ width: layout.width }}
        swipeEnabled={true}
      />
    </Animated.View>
  );
};
export default TabNavigation;

================
File: src/features/customer/restaurants/hooks/useReservationHandler.js
================
import { useState } from "react";
import { Animated } from "react-native";
const useReservationHandler = () => {
  const [isReservation, setIsReservation] = useState(false);
  const [isShowReservationContent, setIsShowReservationContent] =
    useState(false);
  const [opacity] = useState(new Animated.Value(1));
  const animateAndSwitch = (newIsReservation) => {
    Animated.timing(opacity, {
      toValue: 0,
      duration: 200,
      useNativeDriver: true,
    }).start(() => {
      setIsReservation(newIsReservation);
      setTimeout(() => {
        setIsShowReservationContent(newIsReservation);
        Animated.timing(opacity, {
          toValue: 1,
          duration: 200,
          useNativeDriver: true,
        }).start();
      }, 200);
    });
  };
  return {
    isReservation,
    isShowReservationContent,
    opacity,
    animateAndSwitch,
  };
};
export default useReservationHandler;

================
File: src/features/customer/restaurants/hooks/useScrollHandler.js
================
import { useState, useCallback } from "react";
const useScrollHandler = (routes, heights, setIndex) => {
  const handleScroll = useCallback(
    (event) => {
      const scrollYValue = event.nativeEvent.contentOffset.y;
      let accumulatedHeight =
        heights.restaurantInfoCard + heights.ReservationButton + heights.switch;
      for (let i = 0; i < routes.length; i++) {
        if (
          scrollYValue <
          accumulatedHeight + (heights.content[routes[i].key] || 0) / 2
        ) {
          setIndex(i);
          break;
        }
        accumulatedHeight += heights.content[routes[i].key] || 0;
      }
    },
    [routes, heights, setIndex]
  );
  return handleScroll;
};
export default useScrollHandler;

================
File: src/features/customer/restaurants/screens/RestaurantDetailScreen.js
================
import React, { useState, useRef, useEffect, useCallback } from "react";
import {
  Animated,
  Dimensions,
  View,
  TouchableOpacity,
  StatusBar,
  Platform,
  Pressable,
} from "react-native";
import styled from "styled-components/native";
import { MaterialIcons } from "@expo/vector-icons";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import SwitchContainer from "../../../../components/Switch/Switch";
import WebApp from "../../../../components/WebApp/WebApp";
import ErrorBoundary from "../../../../components/ErrorBoundary/ErrorBoundary";
import { BackButton } from "../../../../components/BackButton/BackButton";
import { RestaurantInfoCard } from "../components/RestaurantInfoCard";
import RestaurantMenu from "../components/RestaurantMenu";
import Reviews from "../components/Reviews";
import Others from "../components/Others";
import TabNavigation from "../components/TabNavigation";
import useScrollHandler from "../hooks/useScrollHandler";
import useReservationHandler from "../hooks/useReservationHandler";
import { EditButton } from "../../../merchant/settings/components/EditButton";
export const Header = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: center;
  padding: ${(props) => props.theme.space[2]};
  position: relative;
  background-color: ${(props) => props.theme.colors.bg.primary};
  margin-bottom: ${(props) => props.theme.space[2]};
`;
const Spacing = styled.View`
  padding-bottom: ${(props) => props.theme.space[2]};
`;
const ReservationButton = styled(TouchableOpacity)`
  background-color: ${(props) => props.theme.colors.ui.primary};
  padding: ${(props) => props.theme.space[2]};
  border-radius: 8px;
  align-items: center;
  justify-content: center;
  margin-horizontal: ${(props) => props.theme.space[3]};
  margin-vertical: ${(props) => props.theme.space[2]};
`;
const ReservationButtonText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.inverse};
  font-size: ${(props) => props.theme.fontSizes.body};
  font-weight: ${(props) => props.theme.fontWeights.bold};
`;
const formatAddressToString = (address) => {
  if (!address) return "Default Address";
  const { street, city, state, postalCode, country } = address;
  const parts = [street, city, state, postalCode, country].filter(Boolean);
  return parts.join(", ");
};
export const RestaurantDetailScreen = ({ route, navigation }) => {
  const initialRestaurant = route.params?.restaurant || {};
  const [restaurant, setRestaurant] = useState(initialRestaurant);
  const isMerchantView = route.params?.isMerchantView || false;
  useEffect(() => {
    if (!restaurant.address) {
      setRestaurant((prev) => ({
        ...prev,
        address: {
          street: "",
          city: "",
          state: "",
          postalCode: "",
        },
      }));
    }
  }, []);
  // Update restaurant if coming back from edit screen
  useEffect(() => {
    if (route.params?.updatedRestaurant) {
      setRestaurant(route.params.updatedRestaurant);
    }
  }, [route.params?.updatedRestaurant]);
  const layout = useRef(Dimensions.get("window")).current;
  const [index, setIndex] = useState(0);
  const [routes] = useState([
    { key: "menu", title: "Menu" },
    { key: "reviews", title: "Reviews" },
    { key: "others", title: "Others" },
  ]);
  const scrollY = useRef(new Animated.Value(0)).current;
  const scrollViewRef = useRef(null);
  const [heights, setHeights] = useState({
    restaurantInfoCard: 0,
    ReservationButton: 0,
    switch: 0,
    content: {},
  });
  const { isReservation, isShowReservationContent, opacity, animateAndSwitch } =
    useReservationHandler();
  const [scrollEnabled, setScrollEnabled] = useState(true);
  const handleScroll = useScrollHandler(routes, heights, setIndex);
  const scrollToTab = useCallback(
    (tabKey, newIndex) => {
      let yPosition =
        heights.restaurantInfoCard + heights.ReservationButton + heights.switch;
      for (let i = 0; i < routes.length; i++) {
        if (routes[i].key === tabKey) break;
        yPosition += heights.content[routes[i].key] || 0;
      }
      scrollViewRef.current?.scrollTo({
        y: yPosition,
        animated: false,
      });
      setIndex(newIndex);
    },
    [heights, routes]
  );
  const handleInteractionStart = () => {
    setScrollEnabled(false);
  };
  const handleInteractionEnd = () => {
    setScrollEnabled(true);
  };
  const handleEditPress = () => {
    navigation.navigate("RestaurantEdit", {
      restaurant: restaurant,
    });
  };
  const handleMakeReservation = () => {
    navigation.navigate("ReservationFlow", {
      restaurant: restaurant,
    });
  };
  return (
    <SafeArea>
      <Header>
        <BackButton />
        <CustomText variant="title">
          {isMerchantView ? "Restaurant Details" : "Restaurant"}
        </CustomText>
        {isMerchantView && (
          <EditButton position="absolute" onPress={handleEditPress} />
        )}
      </Header>
      <View style={{ flex: 1 }}>
        <Animated.ScrollView
          scrollEnabled={scrollEnabled}
          ref={scrollViewRef}
          scrollEventThrottle={16}
          onScroll={Animated.event(
            [{ nativeEvent: { contentOffset: { y: scrollY } } }],
            { listener: handleScroll, useNativeDriver: false }
          )}
          stickyHeaderIndices={isReservation ? [] : [3]}
        >
          <Spacing
            onLayout={(event) =>
              setHeights({
                ...heights,
                restaurantInfoCard: event.nativeEvent.layout.height,
              })
            }
          >
            <RestaurantInfoCard
              restaurant={{
                ...restaurant,
                address: formatAddressToString(restaurant.address),
                icon:
                  restaurant.icon ||
                  "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
                isOpenNow:
                  restaurant.isOpenNow !== undefined
                    ? restaurant.isOpenNow
                    : true,
                rating: restaurant.rating || 4,
                isClosedTemporarily: restaurant.isClosedTemporarily || false,
                placeId: restaurant.id || restaurant.placeId || "1",
              }}
              elevation={0}
            />
          </Spacing>
          <View
            onLayout={(event) =>
              setHeights({
                ...heights,
                ReservationButton: event.nativeEvent.layout.height,
              })
            }
          >
            {!isMerchantView && (
              <ReservationButton onPress={handleMakeReservation}>
                <ReservationButtonText>
                  Make a Reservation
                </ReservationButtonText>
              </ReservationButton>
            )}
          </View>
          <View
            onLayout={(event) =>
              setHeights({
                ...heights,
                switch: event.nativeEvent.layout.height,
              })
            }
          >
            <SwitchContainer
              isOn={isReservation}
              setIsOn={(newValue) => animateAndSwitch(newValue)}
              leftLabel="General"
              rightLabel="Reservation"
              variant="default"
            />
          </View>
          {!isShowReservationContent && !isReservation && (
            <TabNavigation
              index={index}
              setIndex={setIndex}
              routes={routes}
              layout={layout}
              scrollToTab={scrollToTab}
              heights={heights}
            />
          )}
          {!isShowReservationContent &&
            !isReservation &&
            routes.map((route) => (
              <Animated.View key={route.key} style={{ opacity }}>
                <View
                  onLayout={(event) =>
                    setHeights({
                      ...heights,
                      content: {
                        ...heights.content,
                        [route.key]: event.nativeEvent.layout.height,
                      },
                    })
                  }
                >
                  {React.createElement(
                    route.key === "menu"
                      ? RestaurantMenu
                      : route.key === "reviews"
                      ? Reviews
                      : Others
                  )}
                </View>
              </Animated.View>
            ))}
          {isShowReservationContent && isReservation && (
            <Animated.View style={{ opacity, flex: 1 }}>
              <ErrorBoundary>
                <WebApp
                  onInteractionStart={handleInteractionStart}
                  onInteractionEnd={handleInteractionEnd}
                />
              </ErrorBoundary>
            </Animated.View>
          )}
        </Animated.ScrollView>
      </View>
    </SafeArea>
  );
};

================
File: src/features/customer/restaurants/screens/RestaurantsScreen.js
================
import React, { useContext, useState } from "react";
import { View, TouchableOpacity } from "react-native";
import { ActivityIndicator, Colors } from "react-native-paper";
import styled from "styled-components/native";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import { FadeInView } from "../../../../components/FadeInView/FadeInView";
import { Spacer } from "../../../../components/Spacer/Spacer";
import { restaurants } from "../../../../data/mockData";
import { Search } from "../components/Search";
import { RestaurantList } from "../components/RestaurantList.styles";
import { RestaurantInfoCard } from "../components/RestaurantInfoCard";
const LoadingContainer = styled(View)`
  position: absolute;
  top: 50%;
  left: 50%;
`;
const Loading = styled(ActivityIndicator)`
  margin-left: -25px;
`;
export const RestaurantsScreen = ({ navigation }) => {
  const [isToggled, setIsToggled] = useState(false);
  return (
    <SafeArea>
      <Search
        isFavouritesToggled={isToggled}
        onFavouritesToggle={() => setIsToggled(!isToggled)}
      />
      <RestaurantList
        data={restaurants}
        renderItem={({ item }) => {
          return (
            <TouchableOpacity
              onPress={() =>
                navigation.navigate("RestaurantDetailScreen", {
                  restaurant: item,
                })
              }
            >
              <Spacer position="bottom" size="large">
                <FadeInView>
                  <RestaurantInfoCard restaurant={item} />
                </FadeInView>
              </Spacer>
            </TouchableOpacity>
          );
        }}
        keyExtractor={(item) => item.name}
      />
    </SafeArea>
  );
};

================
File: src/features/customer/settings/screens/AccountSettingsScreen.js
================
import React from "react";
import { Avatar } from "react-native-paper";
import { MaterialIcons } from "@expo/vector-icons";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { BackButton } from "../../../../components/BackButton/BackButton";
import { users } from "../../../../data/mockData";
import {
  SettingsContainer,
  Header,
  SectionTitle,
  ProfileContainer,
  SettingsItemRow,
  SettingsItemText,
  SectionContainer,
} from "./AccountSettingsScreen.styles";
export const AccountSettingsScreen = () => {
  const user = users[0];
  const basicInfoItems = [
    {
      title: "Name",
      value: user.username,
      icon: "account-circle",
      onPress: () => console.log("Navigate to edit name"),
    },
    {
      title: "Phone Number",
      value: user.phoneNumber,
      icon: "phone",
      onPress: () => console.log("Navigate to edit phone"),
    },
    {
      title: "Email",
      value: user.email,
      icon: "email",
      onPress: () => console.log("Navigate to edit email"),
    },
  ];
  const privacyItems = [
    {
      title: "Password",
      value: "Change your password",
      icon: "lock",
      onPress: () => console.log("Navigate to change password"),
    },
    {
      title: "Privacy Settings",
      value: "Manage your data",
      icon: "security",
      onPress: () => console.log("Navigate to privacy settings"),
    },
  ];
  const preferencesItems = [
    {
      title: "Notifications",
      value: "Customize your alerts",
      icon: "notifications",
      onPress: () => console.log("Navigate to notifications"),
    },
    {
      title: "Language",
      value: "English",
      icon: "language",
      onPress: () => console.log("Navigate to language settings"),
    },
    {
      title: "Appearance",
      value: "Light mode",
      icon: "palette",
      onPress: () => console.log("Navigate to appearance settings"),
    },
  ];
  const renderSettingsItems = (items) => {
    return items.map((item, index) => (
      <SettingsItemRow key={index} onPress={item.onPress}>
        <MaterialIcons name={item.icon} size={24} color="#262626" />
        <SettingsItemText>
          <CustomText variant="body" style={{ fontWeight: "bold" }}>
            {item.title}
          </CustomText>
          <CustomText variant="body" style={{ color: "#757575" }}>
            {item.value}
          </CustomText>
        </SettingsItemText>
        <MaterialIcons name="chevron-right" size={24} color="#757575" />
      </SettingsItemRow>
    ));
  };
  return (
    <SafeArea>
      <SettingsContainer showsVerticalScrollIndicator={false}>
        <Header>
          <BackButton />
          <CustomText variant="title">Account Settings</CustomText>
        </Header>
        {}
        <ProfileContainer>
          <Avatar.Image size={80} source={user.profileImage} />
        </ProfileContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">BASIC INFO</SectionTitle>
          {renderSettingsItems(basicInfoItems)}
        </SectionContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">PRIVACY & SECURITY</SectionTitle>
          {renderSettingsItems(privacyItems)}
        </SectionContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">PREFERENCES</SectionTitle>
          {renderSettingsItems(preferencesItems)}
        </SectionContainer>
      </SettingsContainer>
    </SafeArea>
  );
};

================
File: src/features/customer/settings/screens/AccountSettingsScreen.styles.js
================
import styled from "styled-components/native";
import { ScrollView, TouchableOpacity } from "react-native";
import { CustomText } from "../../../../components/CustomText/CustomText";
export const SettingsContainer = styled(ScrollView)`
  background-color: ${(props) => props.theme.colors.bg.primary};
  flex: 1;
  margin: ${(props) => props.theme.space[1]};
`;
export const Header = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: center;
  padding: ${(props) => props.theme.space[2]};
  position: relative;
  margin-bottom: ${(props) => props.theme.space[2]};
`;
export const CloseButtonWrapper = styled.View`
  position: absolute;
  left: ${(props) => props.theme.space[2]};
`;
export const SectionTitle = styled(CustomText)`
  font-weight: ${(props) => props.theme.fontWeights.bold};
  color: ${(props) => props.theme.colors.text.secondary};
  font-size: ${(props) => props.theme.fontSizes.caption};
  margin-bottom: ${(props) => props.theme.space[2]};
  margin-left: ${(props) => props.theme.space[3]};
`;
export const SectionContainer = styled.View`
  margin-top: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const ProfileContainer = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: center;
  padding: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[2]};
`;
export const SettingsItemRow = styled(TouchableOpacity)`
  flex-direction: row;
  align-items: center;
  padding-vertical: ${(props) => props.theme.space[3]};
  padding-horizontal: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
export const SettingsItemText = styled.View`
  flex: 1;
  margin-left: ${(props) => props.theme.space[3]};
`;

================
File: src/features/customer/settings/screens/SettingsScreen.js
================
import React from "react";
import { View, TouchableOpacity } from "react-native";
import { Avatar } from "react-native-paper";
import { MaterialIcons } from "@expo/vector-icons";
import styled from "styled-components/native";
import { useAuthentication } from "../../../../services/AuthenticationContext";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { users } from "../../../../data/mockData";
const SettingsContainer = styled.ScrollView`
  background-color: ${(props) => props.theme.colors.bg.primary};
  flex: 1;
  margin: ${(props) => props.theme.space[1]};
`;
const ProfileContainer = styled.View`
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.primary};
  margin-bottom: ${(props) => props.theme.space[2]};
`;
const UserInfoContainer = styled.View`
  flex: 1;
  margin-right: ${(props) => props.theme.space[2]};
  align-items: flex-start;
`;
const AvatarContainer = styled.View`
  align-items: center;
  justify-content: center;
`;
const EmailText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.secondary};
`;
const SectionTitle = styled(CustomText)`
  padding: ${(props) => props.theme.space[3]};
  font-weight: ${(props) => props.theme.fontWeights.bold};
  color: ${(props) => props.theme.colors.text.secondary};
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
const SettingsItemRow = styled(TouchableOpacity)`
  flex-direction: row;
  align-items: center;
  padding-vertical: ${(props) => props.theme.space[3]};
  padding-horizontal: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
const SettingsItemText = styled.View`
  flex: 1;
  margin-left: ${(props) => props.theme.space[3]};
`;
const SectionContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const SettingsScreen = ({ navigation }) => {
  const { onLogout } = useAuthentication();
  const user = users[0];
  const accountItems = [
    {
      title: "Account Settings",
      subtitle: "Manage your personal information",
      icon: "manage-accounts",
      onPress: () => navigation.navigate("AccountSettings"),
    },
    {
      title: "Reservations",
      subtitle: "View and manage your restaurant reservations",
      icon: "book-online",
      onPress: () => navigation.navigate("Reservations"),
    },
    {
      title: "Payment Methods",
      subtitle: "Manage your saved payment options",
      icon: "payment",
      onPress: () => navigation.navigate("PaymentMethods"),
    },
  ];
  const preferencesItems = [
    {
      title: "Notifications",
      subtitle: "Manage your notification settings",
      icon: "notifications",
      onPress: () => {},
    },
    {
      title: "Language",
      subtitle: "Change your preferred language",
      icon: "translate",
      onPress: () => {},
    },
    {
      title: "Appearance",
      subtitle: "Customize the app's look and feel",
      icon: "palette",
      onPress: () => {},
    },
  ];
  const supportItems = [
    {
      title: "Help",
      subtitle: "Get support and read FAQs",
      icon: "help",
      onPress: () => {},
    },
    {
      title: "About",
      subtitle: "Learn more about SeatMaster",
      icon: "info",
      onPress: () => {},
    },
    {
      title: "Logout",
      subtitle: "Sign out from your account",
      icon: "logout",
      iconColor: (props) => props.theme.colors.text.error,
      onPress: onLogout,
    },
  ];
  const renderSettingsItems = (items) => {
    return items.map((item, index) => (
      <SettingsItemRow key={index} onPress={item.onPress}>
        <MaterialIcons
          name={item.icon}
          size={24}
          color={item.iconColor || "#262626"}
        />
        <SettingsItemText>
          <CustomText variant="body" style={{ fontWeight: "bold" }}>
            {item.title}
          </CustomText>
          <CustomText variant="body" style={{ color: "#757575" }}>
            {item.subtitle}
          </CustomText>
        </SettingsItemText>
        <MaterialIcons name="chevron-right" size={24} color="#757575" />
      </SettingsItemRow>
    ));
  };
  return (
    <SafeArea>
      <SettingsContainer>
        {}
        <ProfileContainer>
          <UserInfoContainer>
            <CustomText variant="h3">{user.username}</CustomText>
            <EmailText variant="caption">{user.email}</EmailText>
            <EmailText variant="caption">{user.phoneNumber}</EmailText>
          </UserInfoContainer>
          <AvatarContainer>
            <TouchableOpacity onPress={() => {}}>
              <Avatar.Image
                size={80}
                source={user.profileImage}
                backgroundColor={(props) => props.theme.colors.brand.primary}
              />
            </TouchableOpacity>
          </AvatarContainer>
        </ProfileContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">ACCOUNT</SectionTitle>
          {renderSettingsItems(accountItems)}
        </SectionContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">PREFERENCES</SectionTitle>
          {renderSettingsItems(preferencesItems)}
        </SectionContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">SUPPORT</SectionTitle>
          {renderSettingsItems(supportItems)}
        </SectionContainer>
      </SettingsContainer>
    </SafeArea>
  );
};

================
File: src/features/merchant/dashboard/components/CounterSeats.js
================
import React from "react";
import styled from "styled-components/native";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { SharedChairsRow, SharedChairItem } from "./SharedTableStyles.styles";
const CounterContainer = styled.View`
  margin-bottom: ${({ theme }) => theme.space[1]};
  padding: ${({ theme }) => theme.space[2]};
`;
export const CounterSeats = ({ counterSeats }) => {
  return (
    <CounterContainer>
      <CustomText variant="label">Counter</CustomText>
      <SharedChairsRow>
        {counterSeats.map((seat) => {
          const seatData =
            typeof seat === "object" ? seat : { id: seat, status: "empty" };
          return (
            <SharedChairItem
              key={seatData.id}
              status={seatData.status || "empty"}
              style={{ width: 40, height: 40, margin: 4 }}
            >
              <CustomText variant="body">{seatData.id}</CustomText>
            </SharedChairItem>
          );
        })}
      </SharedChairsRow>
    </CounterContainer>
  );
};
export default CounterSeats;

================
File: src/features/merchant/dashboard/components/SeatView.js
================
import React from "react";
import { ScrollView } from "react-native";
import styled from "styled-components/native";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { Separator } from "../../../../components/Separator/Separator";
import {
  SharedTableItem,
  SharedChairItem,
  SharedChairsRow,
  VerticalSeparator as DefaultVerticalSeparator,
} from "./SharedTableStyles.styles";
import CounterSeats from "./CounterSeats";
const RowContainer = styled.View`
  flex-direction: row;
  align-items: center;
  margin-bottom: ${({ theme }) => theme.space[2]};
`;
const TableColumn = styled.View`
  width: 60px;
  align-items: center;
`;
const ChairsColumn = styled.View`
  flex: 1;
  padding-left: ${({ theme }) => theme.space[2]};
`;
const VerticalSeparator = styled(DefaultVerticalSeparator)`
  height: 60px;
`;
export const SeatView = ({ seatingData, tableStatuses }) => {
  return (
    <ScrollView>
      <CounterSeats counterSeats={seatingData.counterSeats} />
      <Separator type="full" />
      {seatingData.tables.map((table) => {
        const tableStatus = Object.values(tableStatuses || {}).find(
          (statusObj) => statusObj.id === table.id
        );
        return (
          <RowContainer key={table.id}>
            <TableColumn>
              <SharedTableItem
                status={tableStatus ? tableStatus.status : "empty"}
                style={{ width: 60, height: 60 }}
              >
                <CustomText variant="label">{table.id}</CustomText>
              </SharedTableItem>
            </TableColumn>
            <VerticalSeparator />
            <ChairsColumn>
              <SharedChairsRow>
                {table.chairs.map((chair) => {
                  const chairData =
                    typeof chair === "object"
                      ? chair
                      : { id: chair, status: "empty" };
                  return (
                    <SharedChairItem
                      key={chairData.id}
                      status={chairData.status || "empty"}
                      style={{ width: 40, height: 40, margin: 4 }}
                    >
                      <CustomText variant="body">{chairData.id}</CustomText>
                    </SharedChairItem>
                  );
                })}
              </SharedChairsRow>
            </ChairsColumn>
          </RowContainer>
        );
      })}
    </ScrollView>
  );
};

================
File: src/features/merchant/dashboard/components/SharedTableStyles.styles.js
================
import styled from "styled-components/native";
import { TouchableOpacity, View } from "react-native";
export const SharedTableItem = styled(TouchableOpacity)`
  background-color: ${({ status, theme }) =>
    status === "occupied"
      ? "#ff4d4d"
      : status === "reserved"
      ? "#ffd11a"
      : "#b3ffb3"};
  padding: 8px;
  border-radius: 8px;
  margin-bottom: ${({ theme }) => theme.space[2]};
  justify-content: center;
  align-items: center;
  min-width: 60px;
  min-height: 60px;
`;
export const SharedChairItem = styled(TouchableOpacity)`
  background-color: ${({ status, theme }) =>
    status === "occupied"
      ? "#ff4d4d"
      : status === "reserved"
      ? "#ffd11a"
      : "#b3ffb3"};
  padding: 4px;
  border-radius: 4px;
  margin: 4px;
  justify-content: center;
  align-items: center;
  min-width: 40px;
  min-height: 40px;
`;
export const SharedChairsRow = styled(View)`
  flex-direction: row;
  flex-wrap: wrap;
`;
export const VerticalSeparator = styled(View)`
  width: 1px;
  background-color: rgba(0, 0, 0, 0.1);
  margin-horizontal: ${({ theme }) => theme.space[2]};
  align-self: stretch;
`;

================
File: src/features/merchant/dashboard/components/TableMatrix.js
================
import React, { useState } from "react";
import { View, Text, useWindowDimensions } from "react-native";
import styled from "styled-components/native";
import { SharedTableItem } from "./SharedTableStyles.styles";
const Row = styled.View`
  flex-direction: row;
  margin-bottom: ${({ theme }) => theme.space[2]};
`;
const FIXED_BUTTON_SIZE = 60;
const FIXED_MARGIN_RIGHT = 16;
export const TableMatrix = ({
  tableStatuses: initialTableStatuses,
  onTablePress,
}) => {
  const [tableStatuses, setTableStatuses] = useState(initialTableStatuses);
  const { width: screenWidth } = useWindowDimensions();
  // Calculate maximum rows and columns based on tableStatuses keys (assumed format "row-col")
  const entries = Object.values(tableStatuses);
  const maxRow =
    entries.length > 0 ? Math.max(...entries.map((e) => e.row)) : 0;
  const maxCol =
    entries.length > 0 ? Math.max(...entries.map((e) => e.col)) : 0;
  const rows = maxRow + 1;
  const columns = maxCol + 1;
  const horizontalPadding = 32;
  const totalRequiredWidth =
    columns * FIXED_BUTTON_SIZE + (columns - 1) * FIXED_MARGIN_RIGHT;
  const availableWidth = screenWidth - horizontalPadding;
  const scale =
    totalRequiredWidth > availableWidth
      ? availableWidth / totalRequiredWidth
      : 1;
  const buttonSize = FIXED_BUTTON_SIZE * scale;
  const marginRight = FIXED_MARGIN_RIGHT * scale;
  const handlePress = (row, col, currentStatus) => {
    const key = `${row}-${col}`;
    const newStatus = currentStatus === "empty" ? "occupied" : "empty";
    console.log(
      `Table pressed: key=${key}, oldStatus=${currentStatus}, newStatus=${newStatus}`
    );
    setTableStatuses((prev) => ({
      ...prev,
      [key]: { id: prev[key]?.id || key, row, col, status: newStatus },
    }));
    if (onTablePress) {
      onTablePress(key, newStatus);
    }
  };
  return (
    <View style={{ padding: 16 }}>
      {Array.from({ length: rows }).map((_, rowIndex) => (
        <Row key={rowIndex}>
          {Array.from({ length: columns }).map((_, colIndex) => {
            const key = `${rowIndex}-${colIndex}`;
            const entry = tableStatuses[key];
            if (entry) {
              return (
                <SharedTableItem
                  key={entry.id}
                  status={entry.status}
                  onPress={() => handlePress(rowIndex, colIndex, entry.status)}
                  style={{ width: buttonSize, height: buttonSize, marginRight }}
                >
                  <Text>{entry.id}</Text>
                </SharedTableItem>
              );
            } else {
              return (
                <View
                  key={key}
                  style={{ width: buttonSize, height: buttonSize, marginRight }}
                />
              );
            }
          })}
        </Row>
      ))}
    </View>
  );
};

================
File: src/features/merchant/dashboard/screens/MerchantHomeScreen.js
================
import React, { useState, useEffect, useRef } from "react";
import { Animated, ScrollView, View } from "react-native";
import styled from "styled-components/native";
import SwitchContainer from "../../../../components/Switch/Switch";
import { Separator } from "../../../../components/Separator/Separator";
import { TimeScroll } from "../../../../components/TimeScroll/TimeScroll";
import { tableStatuses, seatingData } from "../../../../data/mockData";
import { TableMatrix } from "../components/TableMatrix";
import { SeatView } from "../components/SeatView";
import CounterSeats from "../components/CounterSeats";
const Container = styled.View`
  flex: 1;
  background-color: ${(props) => props.theme.colors.bg.primary};
  padding: 16px;
  position: relative;
`;
const MatrixWrapper = styled.View`
  flex: 1;
  margin-top: 16px;
`;
const AnimatedTimeScrollContainer = Animated.createAnimatedComponent(
  styled.View`
    position: absolute;
    right: 16px;
    top: 0;
    bottom: 0;
    justify-content: center;
    align-items: center;
  `
);
export const MerchantHomeScreen = () => {
  const [times, setTimes] = useState(generateTimes(5));
  const [selectedTime, setSelectedTime] = useState(times[0]);
  const [isSeatMode, setIsSeatMode] = useState(false);
  const [tableStatusesState, setTableStatusesState] = useState(tableStatuses);
  const overlayOpacity = useRef(new Animated.Value(1)).current;
  function generateTimes(count) {
    let timesArray = [];
    let current = new Date();
    current.setSeconds(0);
    current.setMilliseconds(0);
    for (let i = 0; i < count; i++) {
      const hours = current.getHours();
      const minutes = current.getMinutes();
      const timeString = `${hours.toString().padStart(2, "0")}:${minutes
        .toString()
        .padStart(2, "0")}`;
      timesArray.push(timeString);
      current.setHours(current.getHours() + 1);
    }
    return timesArray;
  }
  useEffect(() => {
    const updateTimes = () => {
      const newTimes = generateTimes(5);
      setTimes(newTimes);
      setSelectedTime(newTimes[0]);
    };
    updateTimes();
    const interval = setInterval(updateTimes, 6000);
    return () => clearInterval(interval);
  }, []);
  const handleTimeChange = (time) => {
    setSelectedTime(time);
    console.log("Time changed to:", time);
  };
  const handleTablePress = (key, status) => {
    const newStatus = status === "empty" ? "occupied" : "empty";
    console.log(`Table ${key} changed from ${status} to ${newStatus}`);
    setTableStatusesState((prev) => ({
      ...prev,
      [key]: { ...prev[key], status: newStatus },
    }));
  };
  const onScrollBegin = () => {
    Animated.timing(overlayOpacity, {
      toValue: 0,
      duration: 100,
      useNativeDriver: true,
    }).start();
  };
  const onScrollEnd = () => {
    Animated.timing(overlayOpacity, {
      toValue: 1,
      duration: 100,
      useNativeDriver: true,
    }).start();
  };
  return (
    <Container>
      <SwitchContainer
        isOn={isSeatMode}
        setIsOn={setIsSeatMode}
        leftLabel="Tables"
        rightLabel="Seats"
        variant="default"
      />
      <MatrixWrapper>
        {isSeatMode ? (
          <Animated.ScrollView
            onScrollBeginDrag={onScrollBegin}
            onScrollEndDrag={onScrollEnd}
            scrollEventThrottle={16}
          >
            <SeatView
              seatingData={seatingData}
              tableStatuses={tableStatusesState}
            />
          </Animated.ScrollView>
        ) : (
          <>
            <TableMatrix
              tableStatuses={tableStatusesState}
              onTablePress={handleTablePress}
            />
            <Separator type="full" />
            <CounterSeats counterSeats={seatingData.counterSeats} />
          </>
        )}
      </MatrixWrapper>
      <AnimatedTimeScrollContainer style={{ opacity: overlayOpacity }}>
        <TimeScroll
          times={times}
          selectedTime={selectedTime}
          onTimeChange={handleTimeChange}
        />
      </AnimatedTimeScrollContainer>
    </Container>
  );
};

================
File: src/features/merchant/reservations/components/ReservationComponents.js
================
import React from "react";
import { TouchableOpacity, View } from "react-native";
import styled from "styled-components/native";
import { CustomText } from "../../../../components/CustomText/CustomText";
import {
  SharedTableItem,
  SharedChairItem,
} from "../../dashboard/components/SharedTableStyles.styles";
import {
  ReservationBlockStyled,
  ReservationName,
  ReservationDetails,
  ReservationPanelStyled,
  ButtonsRow,
  ActionButton,
} from "./ReservationComponents.styles";
const TableColumn = styled.View`
  width: ${(props) => props.width}px;
  align-items: center;
  border-left-width: 1px;
  border-left-color: ${(props) => props.theme.colors.ui.tertiary};
  padding-horizontal: ${(props) => props.theme.space[2]};
  padding-vertical: ${(props) => props.theme.space[2]};
`;
const TableItem = styled.View`
  align-items: center;
`;
const ChairsGrid = styled.View`
  flex-direction: column;
  justify-content: center;
  width: 58px;
  margin-top: ${(props) => props.theme.space[1]};
`;
const ChairRow = styled.View`
  flex-direction: row;
  justify-content: center;
  margin-top: 1px;
`;
const ChairItem = styled(SharedChairItem)`
  width: 22px;
  height: 22px;
  margin: 2px;
  justify-content: center;
  align-items: center;
`;
const ShowMoreButton = styled(TouchableOpacity)`
  background-color: ${(props) => props.theme.colors.ui.tertiary};
  padding-horizontal: ${(props) => props.theme.space[1]};
  padding-vertical: 2px;
  border-radius: 4px;
  margin-top: 4px;
  align-items: center;
`;
const ButtonText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
const CounterSeatHeaderContainer = styled.View`
  align-items: center;
  justify-content: center;
  margin-top: 40px;
`;
const CounterSeatTitle = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  font-weight: ${(props) => props.theme.fontWeights.bold};
  margin-bottom: ${(props) => props.theme.space[1]};
`;
// Helper function for arranging chairs in rows
const getChairRows = (chairs, perRow = 2) => {
  const rows = [];
  for (let i = 0; i < chairs.length; i += perRow) {
    rows.push(chairs.slice(i, i + perRow));
  }
  return rows;
};
// Calculate the position of a reservation block
const getReservationPosition = (
  reservation,
  tables,
  counterSeats,
  tableWidth,
  counterSeatWidth,
  timeSlotHeight,
  isCounterSeat = false
) => {
  if (isCounterSeat) {
    const counterSeatIndex = counterSeats.findIndex(
      (seat) => seat.id === reservation.counterSeatId
    );
    if (counterSeatIndex === -1) return null;
    const left = counterSeatIndex * counterSeatWidth;
    const [hours, minutes] = reservation.time.split(":").map(Number);
    const startMinutes = (hours - 9) * 60 + minutes;
    const top = (startMinutes / 30) * timeSlotHeight;
    const height = (reservation.duration / 30) * timeSlotHeight;
    return {
      left,
      top,
      width: counterSeatWidth,
      height,
    };
  } else {
    const tableIndex = tables.findIndex(
      (table) => table.id === reservation.tableId
    );
    if (tableIndex === -1) return null;
    const counterSeatsWidth = counterSeats.length * counterSeatWidth;
    const left = counterSeatsWidth + tableIndex * tableWidth;
    const [hours, minutes] = reservation.time.split(":").map(Number);
    const startMinutes = (hours - 9) * 60 + minutes;
    const top = (startMinutes / 30) * timeSlotHeight;
    const height = (reservation.duration / 30) * timeSlotHeight;
    return {
      left,
      top,
      width: tableWidth,
      height,
    };
  }
};
// Table header component
export const TableHeader = ({
  table,
  isExpanded,
  toggleExpand,
  width = 100,
}) => {
  const chairRows = getChairRows(table.chairs, 2);
  const rowsToDisplay = isExpanded ? chairRows : chairRows.slice(0, 1);
  return (
    <TableColumn style={{ width }}>
      <TableItem>
        <SharedTableItem
          status={table.status || "empty"}
          style={{ width: width * 0.6, height: 40 }}
        >
          <CustomText variant="caption">Table {table.id}</CustomText>
        </SharedTableItem>
        <ChairsGrid>
          {rowsToDisplay.map((row, rowIndex) => (
            <ChairRow key={`row-${rowIndex}`}>
              {row.map((chair) => {
                const chairData =
                  typeof chair === "object"
                    ? chair
                    : { id: chair, status: "empty" };
                return (
                  <ChairItem key={chairData.id} status={chairData.status}>
                    <CustomText
                      variant="caption"
                      style={{ fontSize: 10, fontWeight: "bold" }}
                    >
                      {chairData.id.toString().slice(-1)}
                    </CustomText>
                  </ChairItem>
                );
              })}
            </ChairRow>
          ))}
        </ChairsGrid>
        {table.chairs.length > 2 && (
          <ShowMoreButton onPress={toggleExpand}>
            <ButtonText>
              {isExpanded ? "Hide" : `+${table.chairs.length - 2}`}
            </ButtonText>
          </ShowMoreButton>
        )}
      </TableItem>
    </TableColumn>
  );
};
export const CounterSeatHeader = ({
  seat,
  isExpanded,
  toggleExpand,
  width = 60,
}) => {
  const seatData =
    typeof seat === "object" ? seat : { id: seat, status: "empty" };
  return (
    <TableColumn style={{ width }}>
      <CounterSeatHeaderContainer>
        <CounterSeatTitle></CounterSeatTitle>
        <ChairItem status={seatData.status || "empty"} onPress={toggleExpand}>
          <CustomText
            variant="caption"
            style={{ fontSize: 10, fontWeight: "bold" }}
          >
            {seatData.id}
          </CustomText>
        </ChairItem>
      </CounterSeatHeaderContainer>
    </TableColumn>
  );
};
export const ReservationBlock = ({
  reservation,
  tables,
  counterSeats,
  isSelected,
  onPress,
  tableWidth,
  counterSeatWidth,
  timeSlotHeight,
  isCounterSeat = false,
}) => {
  const position = getReservationPosition(
    reservation,
    tables,
    counterSeats,
    tableWidth,
    counterSeatWidth,
    timeSlotHeight,
    isCounterSeat
  );
  if (!position) return null;
  return (
    <ReservationBlockStyled
      {...position}
      status={reservation.status}
      onPress={() => onPress(reservation)}
      isSelected={isSelected}
    >
      <ReservationName>{reservation.customerName}</ReservationName>
      <ReservationDetails>
        {reservation.time} • {reservation.people}{" "}
        {reservation.people > 1 ? "people" : "person"}
      </ReservationDetails>
    </ReservationBlockStyled>
  );
};
export const ReservationDetailsPanel = ({ reservation, onClose }) => {
  if (!reservation) return null;
  return (
    <ReservationPanelStyled>
      <CustomText variant="title">{reservation.customerName}</CustomText>
      <View style={{ marginTop: 8 }}>
        <CustomText variant="body">
          Time: {reservation.time} ({reservation.duration} min)
        </CustomText>
        <CustomText variant="body">
          Party: {reservation.people}{" "}
          {reservation.people > 1 ? "people" : "person"}
        </CustomText>
        {reservation.isCounterSeat ? (
          <CustomText variant="body">
            Counter Seat: {reservation.counterSeatId}
          </CustomText>
        ) : (
          <CustomText variant="body">
            Table: {reservation.tableId} • Chairs:{" "}
            {reservation.chairs ? reservation.chairs.join(", ") : ""}
          </CustomText>
        )}
        {reservation.note && (
          <CustomText variant="body">Note: {reservation.note}</CustomText>
        )}
      </View>
      <View style={{ marginTop: 16 }}>
        <ButtonsRow>
          <ActionButton variant="confirm" onPress={onClose}>
            <CustomText>Confirm</CustomText>
          </ActionButton>
          <ActionButton onPress={onClose}>
            <CustomText>Cancel</CustomText>
          </ActionButton>
        </ButtonsRow>
      </View>
    </ReservationPanelStyled>
  );
};

================
File: src/features/merchant/reservations/components/ReservationComponents.styles.js
================
import styled from "styled-components/native";
import { TouchableOpacity, View } from "react-native";
import { Animated } from "react-native";
import { CustomText } from "../../../../components/CustomText/CustomText";
export const TabBar = styled.View`
  flex-direction: row;
  padding: 8px;
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
export const Tab = styled.TouchableOpacity`
  flex: 1;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  padding-vertical: 10px;
  background-color: ${(props) => props.theme.colors.bg.primary};
  border-width: ${(props) => (props.active ? "2px" : "1px")};
  border-color: ${(props) =>
    props.active
      ? props.theme.colors.ui.primary
      : props.theme.colors.ui.tertiary};
  border-radius: 6px;
  margin-horizontal: 4px;
  elevation: ${(props) => (props.active ? 2 : 0)};
  shadow-opacity: ${(props) => (props.active ? 0.2 : 0)};
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;
export const TabText = styled(CustomText)`
  margin-left: 8px;
  font-size: ${(props) => props.theme.fontSizes.body};
  color: ${(props) =>
    props.active
      ? props.theme.colors.ui.primary
      : props.theme.colors.text.secondary};
  font-weight: ${(props) => (props.active ? "bold" : "normal")};
`;
// Reservation visual elements
export const ReservationBlockStyled = styled(TouchableOpacity)`
  position: absolute;
  left: ${(props) => props.left}px;
  top: ${(props) => props.top}px;
  width: ${(props) => props.width}px;
  height: ${(props) => props.height}px;
  background-color: ${(props) =>
    props.status === "confirmed"
      ? "#b3ffb3"
      : props.status === "pending"
      ? "#ffd11a"
      : "#ff4d4d"};
  border-radius: 5px;
  padding: ${(props) => props.theme.space[1]};
  justify-content: space-between;
  z-index: 1;
  box-sizing: border-box;
  ${(props) =>
    props.isSelected &&
    !props.isPending &&
    `
    border-width: 2px;
    border-color: blue;
  `}
`;
export const PendingBorder = styled(Animated.View)`
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  border-width: 3px;
  border-color: #ff6b6b;
  border-radius: 7px;
  z-index: 2;
  pointer-events: none;
`;
export const ReservationName = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  font-weight: ${(props) => props.theme.fontWeights.bold};
`;
export const ReservationDetails = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
// Panel styles for details display
export const ReservationPanelStyled = styled.View`
  background-color: ${(props) => props.theme.colors.bg.primary};
  padding: ${(props) => props.theme.space[3]};
  border-top-width: 1px;
  border-top-color: ${(props) => props.theme.colors.ui.tertiary};
  elevation: 5;
  shadow-color: #000;
  shadow-offset: 0px -2px;
  shadow-opacity: 0.1;
  shadow-radius: 4px;
`;
export const ButtonsRow = styled.View`
  flex-direction: row;
  justify-content: space-between;
`;
export const ActionButton = styled(TouchableOpacity)`
  padding: ${(props) => props.theme.space[2]};
  border-radius: 5px;
  min-width: 100px;
  align-items: center;
  background-color: ${(props) =>
    props.variant === "confirm" ? "#b3ffb3" : "#ff4d4d"};
`;

================
File: src/features/merchant/reservations/components/ReservationsGrid.js
================
import React, { useState, useRef, useEffect } from "react";
import { View, ScrollView, Animated, TouchableOpacity } from "react-native";
import styled from "styled-components/native";
import { CustomText } from "../../../../components/CustomText/CustomText";
import {
  TableHeader,
  CounterSeatHeader,
  ReservationDetailsPanel,
} from "./ReservationComponents";
import {
  PendingBorder,
  ReservationBlockStyled,
  ReservationName,
  ReservationDetails,
} from "./ReservationComponents.styles";
const GRID_CONSTANTS = {
  TABLE_WIDTH: 100,
  COUNTER_SEAT_WIDTH: 60,
  TIME_COLUMN_WIDTH: 60,
  TIME_SLOT_HEIGHT: 30,
};
const Container = styled.View`
  flex: 1;
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
const MainGrid = styled.View`
  flex: 1;
  flex-direction: column;
`;
const HeaderContainer = styled.View`
  background-color: ${(props) => props.theme.colors.bg.primary};
  border-bottom-width: 1px;
  border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
  position: relative;
  z-index: 2;
`;
const LeftColumnContainer = styled.View`
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: ${({ width }) => width}px;
  background-color: ${(props) => props.theme.colors.bg.primary};
  z-index: 10;
  border-right-width: 1px;
  border-right-color: ${(props) => props.theme.colors.ui.tertiary};
`;
const TimeColumn = styled.View`
  width: ${({ width }) => width}px;
`;
const TimeSlot = styled.View`
  height: ${({ height }) => height}px;
  border-bottom-width: 1px;
  border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
  justify-content: center;
  align-items: center;
`;
const TimeText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
const ExpandAllButton = styled.TouchableOpacity`
  background-color: ${(props) => props.theme.colors.ui.disabled};
  padding: 4px 8px;
  border-radius: 12px;
  margin-vertical: 8px;
  align-items: center;
  justify-content: center;
  shadow-color: #000;
  shadow-offset: 0px 2px;
  shadow-opacity: 0.1;
  shadow-radius: 3px;
  elevation: 2;
  width: 80%;
  align-self: center;
`;
const ExpandAllButtonText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  color: ${(props) => props.theme.colors.text.primary};
  font-weight: ${(props) => props.theme.fontWeights.bold};
`;
const ContentContainer = styled.View`
  flex: 1;
  flex-direction: row;
  position: relative;
`;
const GridContainer = styled.View`
  flex: 1;
  position: relative;
`;
const TimeColumnHeader = styled.View`
  width: ${({ width }) => width}px;
  padding: ${(props) => props.theme.space[2]};
  padding-top: 40px;
  align-items: center;
  justify-content: center;
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
const HeaderScrollView = styled.ScrollView`
  flex-direction: row;
`;
const HeaderRow = styled.View`
  flex-direction: row;
  padding-vertical: ${(props) => props.theme.space[2]};
`;
const CurrentTimeLine = styled(Animated.View)`
  position: absolute;
  left: 0;
  right: 0;
  height: 2px;
  background-color: #ff3b30;
  z-index: 5;
`;
const CurrentTimeIndicator = styled.View`
  position: absolute;
  left: -5px;
  width: 10px;
  height: 10px;
  border-radius: 5px;
  background-color: #ff3b30;
  top: -4px;
`;
// Utility functions
const calculateCurrentTimePosition = (timeSlotHeight) => {
  const now = new Date();
  const hours = now.getHours();
  const minutes = now.getMinutes();
  if (hours < 9 || (hours === 22 && minutes > 30) || hours > 22) {
    return -100;
  }
  const minutesSince9AM = (hours - 9) * 60 + minutes;
  return (minutesSince9AM / 30) * timeSlotHeight;
};
// Parse time strings into minutes since midnight
const parseTimeToMinutes = (timeStr) => {
  const [hours, minutes] = timeStr.split(":").map(Number);
  return hours * 60 + minutes;
};
// Get ID from item consistently
const getItemId = (item) => {
  return typeof item === "object" ? item.id : item;
};
// Sort all seating items (tables and counter seats) using smart sorting
const smartSortSeatingItems = (tables, counterSeats, reservations) => {
  if (!tables || !counterSeats || !reservations) {
    return [];
  }
  // Create a unified array with type information
  const allItems = [
    ...tables.map((table) => ({
      item: table,
      type: "table",
      id: getItemId(table),
    })),
    ...counterSeats.map((seat) => ({
      item: seat,
      type: "counterSeat",
      id: getItemId(seat),
    })),
  ];
  const now = new Date();
  const currentTimeInMinutes = now.getHours() * 60 + now.getMinutes();
  // Create a reservation map for quick lookups
  const reservationMap = new Map();
  // Process all reservations and organize by table/seat ID
  reservations.forEach((res) => {
    const itemKey = res.isCounterSeat
      ? `counter-${res.counterSeatId}`
      : `table-${res.tableId}`;
    if (!reservationMap.has(itemKey)) {
      reservationMap.set(itemKey, []);
    }
    const startTime = parseTimeToMinutes(res.time);
    const endTime = startTime + res.duration;
    reservationMap.get(itemKey).push({
      reservation: res,
      startTime,
      endTime,
      timeUntilStart: startTime - currentTimeInMinutes,
      timeUntilEnd: endTime - currentTimeInMinutes,
    });
  });
  // Process each seating item
  allItems.forEach((seatingItem) => {
    const itemKey = `${seatingItem.type === "table" ? "table" : "counter"}-${
      seatingItem.id
    }`;
    const itemReservations = reservationMap.get(itemKey) || [];
    if (itemReservations.length === 0) {
      // No reservations for this item
      seatingItem.status = "empty";
      seatingItem.priority = Number.MAX_SAFE_INTEGER;
      return;
    }
    // Find upcoming, current, and past reservations
    const upcomingReservations = itemReservations.filter(
      (r) => r.timeUntilStart > 0
    );
    const currentReservations = itemReservations.filter(
      (r) => r.timeUntilStart <= 0 && r.timeUntilEnd > 0
    );
    const pastReservations = itemReservations.filter(
      (r) => r.timeUntilEnd <= 0
    );
    // Determine status and priority
    if (upcomingReservations.length > 0) {
      // Sort by closest upcoming start time
      upcomingReservations.sort((a, b) => a.timeUntilStart - b.timeUntilStart);
      seatingItem.status = "upcoming";
      seatingItem.priority = upcomingReservations[0].timeUntilStart;
      seatingItem.reservation = upcomingReservations[0].reservation;
    } else if (currentReservations.length > 0) {
      // Sort by start time (earliest first)
      currentReservations.sort((a, b) => a.startTime - b.startTime);
      seatingItem.status = "current";
      seatingItem.priority = 1000000 + currentReservations[0].startTime;
      seatingItem.reservation = currentReservations[0].reservation;
    } else if (pastReservations.length > 0) {
      // Sort by most recent end time
      pastReservations.sort((a, b) => b.endTime - a.endTime);
      seatingItem.status = "past";
      seatingItem.priority = 2000000 + (1440 - pastReservations[0].endTime);
      seatingItem.reservation = pastReservations[0].reservation;
    }
  });
  // Sort the items
  allItems.sort((a, b) => {
    // First sort by reservation status
    const statusOrder = { upcoming: 0, current: 1, past: 2, empty: 3 };
    const aStatus = a.status || "empty";
    const bStatus = b.status || "empty";
    if (statusOrder[aStatus] !== statusOrder[bStatus]) {
      return statusOrder[aStatus] - statusOrder[bStatus];
    }
    // Then sort by priority within the same status
    if (a.priority !== b.priority) {
      return a.priority - b.priority;
    }
    // As a last resort, sort by ID
    return a.id.toString().localeCompare(b.id.toString());
  });
  return allItems;
};
// Traditional sorting: Tables first, then counter seats, both sorted by ID
const traditionalSortSeatingItems = (tables, counterSeats) => {
  if (!tables || !counterSeats) {
    return [];
  }
  // Create a unified array with type information, sort by ID numerically
  const tableItems = tables
    .map((table) => ({
      item: table,
      type: "table",
      id: getItemId(table),
    }))
    .sort((a, b) => {
      // Extract numeric part for sorting
      const aNum = parseInt(a.id.toString().replace(/\D/g, "")) || 0;
      const bNum = parseInt(b.id.toString().replace(/\D/g, "")) || 0;
      return aNum - bNum;
    });
  const counterItems = counterSeats
    .map((seat) => ({
      item: seat,
      type: "counterSeat",
      id: getItemId(seat),
    }))
    .sort((a, b) => {
      // Extract numeric part for sorting
      const aNum = parseInt(a.id.toString().replace(/\D/g, "")) || 0;
      const bNum = parseInt(b.id.toString().replace(/\D/g, "")) || 0;
      return aNum - bNum;
    });
  // Tables first, then counter seats
  return [...tableItems, ...counterItems];
};
// Main component
const ReservationsGrid = ({
  timeSlots,
  tables,
  counterSeats,
  reservations,
  isSmartSorting = false,
}) => {
  const {
    TABLE_WIDTH,
    COUNTER_SEAT_WIDTH,
    TIME_COLUMN_WIDTH,
    TIME_SLOT_HEIGHT,
  } = GRID_CONSTANTS;
  // State variables
  const [selectedReservation, setSelectedReservation] = useState(null);
  const [currentTimePosition, setCurrentTimePosition] = useState(0);
  const [expandedTableIds, setExpandedTableIds] = useState(new Set());
  const [expandedCounterSeatIds, setExpandedCounterSeatIds] = useState(
    new Set()
  );
  const [areAllExpanded, setAreAllExpanded] = useState(false);
  const [sortedItems, setSortedItems] = useState([]);
  // Pre-compute sorted items for both sorting methods to eliminate waiting when switching
  const [traditionalSorted, setTraditionalSorted] = useState([]);
  const [smartSorted, setSmartSorted] = useState([]);
  // Animation for breathing effect on pending reservations
  const [breathingAnim] = useState(new Animated.Value(0.4));
  // Set up breathing animation
  useEffect(() => {
    // Create the breathing animation sequence
    const breathe = () => {
      Animated.sequence([
        Animated.timing(breathingAnim, {
          toValue: 1,
          duration: 1000,
          useNativeDriver: false, // Changed to false for border animation
        }),
        Animated.timing(breathingAnim, {
          toValue: 0.4,
          duration: 1000,
          useNativeDriver: false, // Changed to false for border animation
        }),
      ]).start(() => breathe()); // Restart animation when complete
    };
    // Start the animation
    breathe();
    // Clean up
    return () => breathingAnim.stopAnimation();
  }, []);
  // Pre-compute all sorting options when data changes
  useEffect(() => {
    const traditional = traditionalSortSeatingItems(tables, counterSeats);
    const smart = smartSortSeatingItems(tables, counterSeats, reservations);
    setTraditionalSorted(traditional);
    setSmartSorted(smart);
    // Set the current sorted items based on selected mode
    setSortedItems(isSmartSorting ? smart : traditional);
  }, [tables, counterSeats, reservations]);
  // Update sorted items immediately when sorting method changes
  useEffect(() => {
    setSortedItems(isSmartSorting ? smartSorted : traditionalSorted);
  }, [isSmartSorting, smartSorted, traditionalSorted]);
  useEffect(() => {
    const updateTimePosition = () => {
      setCurrentTimePosition(calculateCurrentTimePosition(TIME_SLOT_HEIGHT));
    };
    updateTimePosition();
    const interval = setInterval(updateTimePosition, 60000);
    return () => clearInterval(interval);
  }, [TIME_SLOT_HEIGHT]);
  // Toggle expansion functions
  const toggleExpand = (id, isTable) => {
    if (isTable) {
      setExpandedTableIds((prevExpanded) => {
        const newExpanded = new Set(prevExpanded);
        if (newExpanded.has(id)) {
          newExpanded.delete(id);
        } else {
          newExpanded.add(id);
        }
        return newExpanded;
      });
    } else {
      setExpandedCounterSeatIds((prevExpanded) => {
        const newExpanded = new Set(prevExpanded);
        if (newExpanded.has(id)) {
          newExpanded.delete(id);
        } else {
          newExpanded.add(id);
        }
        return newExpanded;
      });
    }
  };
  const toggleAllTables = () => {
    if (areAllExpanded) {
      setExpandedTableIds(new Set());
      setExpandedCounterSeatIds(new Set());
    } else {
      setExpandedTableIds(new Set(tables.map((table) => getItemId(table))));
      setExpandedCounterSeatIds(
        new Set(counterSeats.map((seat) => getItemId(seat)))
      );
    }
    setAreAllExpanded(!areAllExpanded);
  };
  // Scroll sync handlers
  const handleHeaderScroll = (event) => {
    if (gridScrollRef.current) {
      gridScrollRef.current.scrollTo({
        x: event.nativeEvent.contentOffset.x,
        y: 0,
        animated: false,
      });
    }
  };
  const handleGridScroll = (event) => {
    if (headerScrollRef.current) {
      headerScrollRef.current.scrollTo({
        x: event.nativeEvent.contentOffset.x,
        y: 0,
        animated: false,
      });
    }
  };
  const handleVerticalScroll = (event) => {
    if (leftColumnScrollRef.current) {
      leftColumnScrollRef.current.scrollTo({
        y: event.nativeEvent.contentOffset.y,
        animated: false,
      });
    }
  };
  const handleLeftColumnScroll = (event) => {
    if (verticalScrollRef.current) {
      verticalScrollRef.current.scrollTo({
        y: event.nativeEvent.contentOffset.y,
        animated: false,
      });
    }
  };
  // Handle reservation click
  const handleReservationPress = (reservation) => {
    setSelectedReservation(
      selectedReservation?.id === reservation.id ? null : reservation
    );
  };
  // Refs for synchronized scrolling
  const verticalScrollRef = useRef(null);
  const leftColumnScrollRef = useRef(null);
  const headerScrollRef = useRef(null);
  const gridScrollRef = useRef(null);
  // Calculate content height
  const contentHeight = timeSlots.length * TIME_SLOT_HEIGHT;
  // Render header for an item (either table or counter seat)
  const renderItemHeader = (seatingItem) => {
    const { item, type, id } = seatingItem;
    if (type === "table") {
      const isExpanded = expandedTableIds.has(id);
      return (
        <TableHeader
          key={`table-${id}`}
          table={item}
          isExpanded={isExpanded}
          toggleExpand={() => toggleExpand(id, true)}
          width={TABLE_WIDTH}
        />
      );
    } else {
      // counter seat
      const isExpanded = expandedCounterSeatIds.has(id);
      return (
        <CounterSeatHeader
          key={`counter-${id}`}
          seat={item}
          isExpanded={isExpanded}
          toggleExpand={() => toggleExpand(id, false)}
          width={COUNTER_SEAT_WIDTH}
        />
      );
    }
  };
  // Get width for an item based on its type
  const getItemWidth = (type) => {
    return type === "table" ? TABLE_WIDTH : COUNTER_SEAT_WIDTH;
  };
  // Render reservation blocks
  const renderReservationBlocks = () => {
    // Create a map of the sorted item positions
    const itemPositionMap = {};
    let currentPosition = 0;
    sortedItems.forEach((item) => {
      const key = `${item.type === "table" ? "table" : "counter"}-${item.id}`;
      itemPositionMap[key] = currentPosition;
      currentPosition += getItemWidth(item.type);
    });
    return (
      <>
        {reservations.map((reservation) => {
          const isCounterSeat = !!reservation.isCounterSeat;
          const itemKey = isCounterSeat
            ? `counter-${reservation.counterSeatId}`
            : `table-${reservation.tableId}`;
          // Skip if we don't have this item in our sorted grid
          if (!(itemKey in itemPositionMap)) {
            return null;
          }
          // Calculate position based on the sortedItems layout
          const position = itemPositionMap[itemKey];
          const width = isCounterSeat ? COUNTER_SEAT_WIDTH : TABLE_WIDTH;
          const top =
            ((parseTimeToMinutes(reservation.time) - 9 * 60) / 30) *
            TIME_SLOT_HEIGHT;
          const height = (reservation.duration / 30) * TIME_SLOT_HEIGHT;
          return (
            <ReservationBlockStyled
              key={`res-${reservation.id}`}
              left={position}
              top={top}
              width={width}
              height={height}
              status={reservation.status}
              onPress={() => handleReservationPress(reservation)}
              isSelected={selectedReservation?.id === reservation.id}
              isPending={reservation.status === "pending"}
            >
              {reservation.status === "pending" && (
                <PendingBorder style={{ opacity: breathingAnim }} />
              )}
              <ReservationName>{reservation.customerName}</ReservationName>
              <ReservationDetails>
                {reservation.time} • {reservation.people}{" "}
                {reservation.people > 1 ? "people" : "person"}
              </ReservationDetails>
            </ReservationBlockStyled>
          );
        })}
      </>
    );
  };
  return (
    <Container>
      <MainGrid>
        <HeaderContainer>
          <LeftColumnContainer width={TIME_COLUMN_WIDTH}>
            <TimeColumnHeader width={TIME_COLUMN_WIDTH}>
              <ExpandAllButton
                onPress={toggleAllTables}
                areAllExpanded={areAllExpanded}
              >
                <ExpandAllButtonText>
                  {areAllExpanded ? "Collapse All" : "Expand All"}
                </ExpandAllButtonText>
              </ExpandAllButton>
            </TimeColumnHeader>
          </LeftColumnContainer>
          <HeaderScrollView
            ref={headerScrollRef}
            horizontal
            showsHorizontalScrollIndicator={false}
            onScroll={handleHeaderScroll}
            scrollEventThrottle={16}
            contentContainerStyle={{ paddingLeft: TIME_COLUMN_WIDTH }}
          >
            <HeaderRow>
              {/* Render all items headers in sorted order */}
              {sortedItems.map(renderItemHeader)}
            </HeaderRow>
          </HeaderScrollView>
        </HeaderContainer>
        <ContentContainer>
          <LeftColumnContainer width={TIME_COLUMN_WIDTH}>
            <ScrollView
              ref={leftColumnScrollRef}
              onScroll={handleLeftColumnScroll}
              scrollEventThrottle={16}
              showsVerticalScrollIndicator={true}
            >
              <TimeColumn width={TIME_COLUMN_WIDTH}>
                {timeSlots.map((time) => (
                  <TimeSlot
                    key={time}
                    height={TIME_SLOT_HEIGHT}
                    width={TIME_COLUMN_WIDTH}
                  >
                    <TimeText>{time}</TimeText>
                  </TimeSlot>
                ))}
              </TimeColumn>
            </ScrollView>
          </LeftColumnContainer>
          <HeaderScrollView
            ref={gridScrollRef}
            horizontal
            showsHorizontalScrollIndicator={false}
            onScroll={handleGridScroll}
            scrollEventThrottle={16}
            contentContainerStyle={{ paddingLeft: TIME_COLUMN_WIDTH }}
          >
            <ScrollView
              ref={verticalScrollRef}
              onScroll={handleVerticalScroll}
              scrollEventThrottle={16}
              showsVerticalScrollIndicator={false}
            >
              <GridContainer style={{ height: contentHeight }}>
                {/* Render grid cells */}
                <View style={{ flexDirection: "row" }}>
                  {/* All item columns */}
                  {sortedItems.map((seatingItem, index) => (
                    <View
                      key={`item-col-${seatingItem.id}`}
                      style={{ width: getItemWidth(seatingItem.type) }}
                    >
                      {timeSlots.map((time, timeIndex) => (
                        <View
                          key={`item-cell-${index}-${timeIndex}`}
                          style={{
                            width: getItemWidth(seatingItem.type),
                            height: TIME_SLOT_HEIGHT,
                            borderLeftWidth: 1,
                            borderBottomWidth: 1,
                            borderLeftColor: "#e1e1e1",
                            borderBottomColor: "#e1e1e1",
                          }}
                        />
                      ))}
                    </View>
                  ))}
                </View>
                {}
                <CurrentTimeLine style={{ top: currentTimePosition }}>
                  <CurrentTimeIndicator />
                </CurrentTimeLine>
                {}
                {renderReservationBlocks()}
              </GridContainer>
            </ScrollView>
          </HeaderScrollView>
        </ContentContainer>
      </MainGrid>
      {}
      {selectedReservation && (
        <ReservationDetailsPanel
          reservation={selectedReservation}
          onClose={() => setSelectedReservation(null)}
        />
      )}
    </Container>
  );
};
export default ReservationsGrid;

================
File: src/features/merchant/reservations/components/ReservationsMailbox.js
================
import React, { useState, useRef, useEffect } from "react";
import {
  FlatList,
  Animated,
  View,
  Alert,
  TouchableOpacity,
} from "react-native";
import styled from "styled-components/native";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { MaterialIcons } from "@expo/vector-icons";
import { GestureHandlerRootView } from "react-native-gesture-handler";
import Swipeable from "react-native-gesture-handler/Swipeable";
const COLORS = {
  PENDING: {
    bg: "#ffd11a",
    text: "#a67f00",
  },
  CONFIRMED: {
    bg: "#4CAF50",
    text: "#FFFFFF",
  },
  CANCELED: {
    bg: "#ff4d4d",
    text: "#FFFFFF",
  },
};
const Container = styled.View`
  flex: 1;
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
const ReservationCard = styled(TouchableOpacity)`
  background-color: ${(props) => props.theme.colors.bg.primary};
  border-radius: 4px;
  margin: 2px 12px;
  padding: 10px 12px;
  shadow-opacity: 0.05;
  shadow-radius: 2px;
  shadow-color: #000;
  shadow-offset: 0px 1px;
  elevation: 1;
  border-left-width: 3px;
  border-left-color: ${(props) => {
    switch (props.status) {
      case "pending":
        return COLORS.PENDING.bg;
      case "confirmed":
        return COLORS.CONFIRMED.bg;
      default:
        return COLORS.CANCELED.bg;
    }
  }};
`;
const StatusIndicator = styled.View`
  position: absolute;
  right: 10px;
  top: 10px;
  border-radius: 3px;
  padding: 2px 4px;
  background-color: ${(props) => {
    switch (props.status) {
      case "pending":
        return COLORS.PENDING.bg;
      case "confirmed":
        return COLORS.CONFIRMED.bg;
      default:
        return COLORS.CANCELED.bg;
    }
  }};
`;
const StatusText = styled(CustomText)`
  font-size: 10px;
  font-weight: bold;
  color: ${(props) => {
    switch (props.status) {
      case "pending":
        return COLORS.PENDING.text;
      case "confirmed":
        return COLORS.CONFIRMED.text;
      default:
        return COLORS.CANCELED.text;
    }
  }};
`;
const CardTitle = styled(CustomText)`
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 4px;
  margin-right: 65px;
`;
const DetailRow = styled.View`
  flex-direction: row;
  align-items: center;
  margin-vertical: 2px;
`;
const DetailIcon = styled(MaterialIcons)`
  margin-right: 4px;
  font-size: 14px;
`;
const DetailText = styled(CustomText)`
  font-size: 12px;
`;
const SectionHeader = styled.View`
  background-color: ${(props) => props.theme.colors.ui.tertiary};
  padding: 6px 12px;
`;
const SectionHeaderText = styled(CustomText)`
  font-size: 16px;
  font-weight: bold;
`;
const SwipeHintContainer = styled(Animated.View)`
  padding: 16px;
  align-items: center;
  margin-bottom: 8px;
`;
const SwipeHintText = styled(CustomText)`
  font-size: 14px;
  color: ${(props) => props.theme.colors.text.secondary};
  text-align: center;
`;
const ActionContainer = styled.View`
  flex: 1;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  background-color: ${(props) => props.color};
`;
const ActionText = styled(CustomText)`
  color: white;
  font-weight: bold;
  font-size: 16px;
  margin-left: 8px;
`;
const NoReservationsContainer = styled.View`
  flex: 1;
  justify-content: center;
  align-items: center;
  padding: 20px;
`;
const NoReservationsText = styled(CustomText)`
  font-size: 16px;
  color: ${(props) => props.theme.colors.text.secondary};
  text-align: center;
`;
const ReservationsMailbox = ({ reservations }) => {
  const [expandedId, setExpandedId] = useState(null);
  const [hintVisible, setHintVisible] = useState(true);
  const swipeableRef = useRef(null);
  const fadeAnim = useRef(new Animated.Value(1)).current;
  const flatListRef = useRef(null);
  const hideTimerRef = useRef(null);
  // Track scroll for pull detection
  const lastScrollY = useRef(0);
  const scrollVelocity = useRef(0);
  const lastScrollTime = useRef(Date.now());
  // Auto-hide hint after initial display
  useEffect(() => {
    // Initial timeout - hide after 5 seconds
    const timer = setTimeout(() => {
      Animated.timing(fadeAnim, {
        toValue: 0,
        duration: 1000,
        useNativeDriver: true,
      }).start(() => setHintVisible(false));
    }, 5000);
    return () => {
      clearTimeout(timer);
      if (hideTimerRef.current) {
        clearTimeout(hideTimerRef.current);
      }
    };
  }, []);
  // Show hint only with strong pull-to-refresh type gesture
  const handleScroll = (event) => {
    const currentTime = Date.now();
    const timeDelta = currentTime - lastScrollTime.current;
    const currentY = event.nativeEvent.contentOffset.y;
    // Calculate scroll velocity (pixels per millisecond)
    if (timeDelta > 0) {
      scrollVelocity.current = (lastScrollY.current - currentY) / timeDelta;
    }
    // Strong pull detected at the top (negative because pulling down)
    const isStrongPullUp = scrollVelocity.current > 0.5 && currentY < 10;
    const isScrollingDown = currentY > 30 && currentY > lastScrollY.current;
    // Show hint on strong pull at top
    if (isStrongPullUp && !hintVisible) {
      setHintVisible(true);
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 300,
        useNativeDriver: true,
      }).start();
      // Keep hint visible for a short time
      clearTimeout(hideTimerRef.current);
      hideTimerRef.current = setTimeout(() => {
        Animated.timing(fadeAnim, {
          toValue: 0,
          duration: 500,
          useNativeDriver: true,
        }).start(() => setHintVisible(false));
      }, 3000);
    }
    // Hide hint when scrolling down
    else if (isScrollingDown && hintVisible) {
      clearTimeout(hideTimerRef.current);
      Animated.timing(fadeAnim, {
        toValue: 0,
        duration: 300,
        useNativeDriver: true,
      }).start(() => setHintVisible(false));
    }
    // Save current position and time for next calculation
    lastScrollY.current = currentY;
    lastScrollTime.current = currentTime;
  };
  const sortReservations = (reservations) => {
    return [...reservations].sort((a, b) => {
      // Priority by status (pending first)
      if (a.status === "pending" && b.status !== "pending") return -1;
      if (a.status !== "pending" && b.status === "pending") return 1;
      // Then sort by time
      const timeA = a.time.split(":").map(Number);
      const timeB = b.time.split(":").map(Number);
      if (timeA[0] !== timeB[0]) return timeA[0] - timeB[0]; // Sort by hour
      return timeA[1] - timeB[1]; // Sort by minute
    });
  };
  // Group reservations by status
  const groupedReservations = {
    today: sortReservations(reservations.filter((r) => r.status === "pending")),
    upcoming: sortReservations(
      reservations.filter((r) => r.status === "confirmed")
    ),
    past: sortReservations(
      reservations.filter(
        (r) => r.status !== "pending" && r.status !== "confirmed"
      )
    ),
  };
  // Handler functions with alerts for testing
  const handleConfirm = (id) => {
    Alert.alert(
      "Confirm Reservation",
      `Reservation #${id} has been CONFIRMED.`,
      [{ text: "OK" }]
    );
    // Here you would update the reservation status in your state or database
  };
  const handleCancel = (id) => {
    Alert.alert("Cancel Reservation", `Reservation #${id} has been CANCELED.`, [
      { text: "OK" },
    ]);
    // Here you would update the reservation status in your state or database
  };
  // Action renderers - Pure functions that return appropriate action UI
  const renderRightActions = (progress, dragX) => {
    return (
      <ActionContainer color={COLORS.CONFIRMED.bg}>
        <MaterialIcons name="check-circle" size={24} color="white" />
        <ActionText>CONFIRM</ActionText>
      </ActionContainer>
    );
  };
  const renderLeftActions = (progress, dragX) => {
    return (
      <ActionContainer color={COLORS.CANCELED.bg}>
        <MaterialIcons name="cancel" size={24} color="white" />
        <ActionText>CANCEL</ActionText>
      </ActionContainer>
    );
  };
  // Card renderer
  const renderReservationCard = ({ item }) => {
    const isExpanded = expandedId === item.id;
    return (
      <Swipeable
        ref={(ref) => {
          if (ref && expandedId === item.id) {
            swipeableRef.current = ref;
          }
        }}
        friction={2}
        leftThreshold={40}
        rightThreshold={40}
        renderLeftActions={renderLeftActions}
        renderRightActions={renderRightActions}
        onSwipeableLeftOpen={() => handleCancel(item.id)}
        onSwipeableRightOpen={() => handleConfirm(item.id)}
        onSwipeableWillOpen={(direction) => {
          // Close previous swipeable
          if (swipeableRef.current && expandedId !== item.id) {
            swipeableRef.current.close();
          }
          // Log for debugging
          console.log(`Swiping ${direction} for reservation #${item.id}`);
          setExpandedId(item.id);
        }}
        containerStyle={{ backgroundColor: "transparent" }}
        childrenContainerStyle={{ backgroundColor: "white" }}
      >
        <ReservationCard
          status={item.status}
          onPress={() => setExpandedId(expandedId === item.id ? null : item.id)}
        >
          <StatusIndicator status={item.status}>
            <StatusText status={item.status}>
              {item.status.toUpperCase()}
            </StatusText>
          </StatusIndicator>
          <CardTitle numberOfLines={1} ellipsizeMode="tail">
            {item.customerName}
          </CardTitle>
          <DetailRow>
            <DetailIcon name="access-time" color="#757575" />
            <DetailText>
              {item.time} ({item.duration} min)
            </DetailText>
          </DetailRow>
          <DetailRow>
            <DetailIcon name="people" color="#757575" />
            <DetailText>
              {item.people} {item.people > 1 ? "people" : "person"}
            </DetailText>
          </DetailRow>
          {!isExpanded ? (
            <DetailRow>
              <DetailIcon name="event-seat" color="#757575" />
              <DetailText numberOfLines={1} ellipsizeMode="tail">
                {item.isCounterSeat
                  ? `Counter: ${item.counterSeatId}`
                  : `Table: ${item.tableId}`}
              </DetailText>
            </DetailRow>
          ) : (
            <>
              <DetailRow>
                <DetailIcon name="event-seat" color="#757575" />
                <DetailText>
                  {item.isCounterSeat
                    ? `Counter Seat: ${item.counterSeatId}`
                    : `Table: ${item.tableId}`}
                </DetailText>
              </DetailRow>
              {item.note && (
                <DetailRow>
                  <DetailIcon name="notes" color="#757575" />
                  <DetailText>{item.note}</DetailText>
                </DetailRow>
              )}
            </>
          )}
        </ReservationCard>
      </Swipeable>
    );
  };
  // Section header renderer
  const renderSectionHeader = (title, count) => (
    <SectionHeader>
      <SectionHeaderText>
        {title} ({count})
      </SectionHeaderText>
    </SectionHeader>
  );
  // Combine all sections into a flat array for FlatList
  const sections = [
    { key: "hint", type: "hint" },
    {
      key: "pendingHeader",
      type: "header",
      title: "Pending Reservations",
      count: groupedReservations.today.length,
    },
    ...groupedReservations.today.map((item) => ({
      key: `pending-${item.id}`,
      type: "item",
      item,
    })),
    {
      key: "upcomingHeader",
      type: "header",
      title: "Confirmed Reservations",
      count: groupedReservations.upcoming.length,
    },
    ...groupedReservations.upcoming.map((item) => ({
      key: `upcoming-${item.id}`,
      type: "item",
      item,
    })),
    {
      key: "pastHeader",
      type: "header",
      title: "Past Reservations",
      count: groupedReservations.past.length,
    },
    ...groupedReservations.past.map((item) => ({
      key: `past-${item.id}`,
      type: "item",
      item,
    })),
  ];
  const renderItem = ({ item }) => {
    switch (item.type) {
      case "hint":
        return hintVisible ? (
          <SwipeHintContainer style={{ opacity: fadeAnim }}>
            <SwipeHintText>
              ← Swipe LEFT to CANCEL{"\n"}
              Swipe RIGHT to CONFIRM →
            </SwipeHintText>
          </SwipeHintContainer>
        ) : null;
      case "header":
        return renderSectionHeader(item.title, item.count);
      case "item":
        return renderReservationCard({ item: item.item });
      default:
        return null;
    }
  };
  if (!reservations || reservations.length === 0) {
    return (
      <NoReservationsContainer>
        <MaterialIcons name="event-busy" size={60} color="#757575" />
        <NoReservationsText>No reservations found</NoReservationsText>
      </NoReservationsContainer>
    );
  }
  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <Container>
        <FlatList
          ref={flatListRef}
          data={sections}
          renderItem={renderItem}
          keyExtractor={(item) => item.key}
          onScroll={handleScroll}
          scrollEventThrottle={16}
        />
      </Container>
    </GestureHandlerRootView>
  );
};
export default ReservationsMailbox;

================
File: src/features/merchant/reservations/screens/MerchantReservationsScreen.js
================
import React, { useState } from "react";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import { seatingData, merchantReservations } from "../../../../data/mockData";
import { generateTimeSlots } from "../utils/timeUtils";
import ReservationsGrid from "../components/ReservationsGrid";
import ReservationsMailbox from "../components/ReservationsMailbox";
import {
  TabBar,
  Tab,
  TabText,
} from "../components/ReservationComponents.styles";
import { MaterialIcons } from "@expo/vector-icons";
import styled from "styled-components/native";
const Container = styled.View`
  flex: 1;
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
const TABS = {
  GRID: "grid",
  SMART: "smart",
  MAILBOX: "mailbox",
};
export const MerchantReservationsScreen = () => {
  const timeSlots = generateTimeSlots();
  const [activeTab, setActiveTab] = useState(TABS.GRID);
  return (
    <SafeArea>
      <Container>
        <TabBar>
          <Tab
            active={activeTab === TABS.GRID}
            onPress={() => setActiveTab(TABS.GRID)}
            activeOpacity={0.6}
          >
            <MaterialIcons
              name="grid-on"
              size={20}
              color={activeTab === TABS.GRID ? "#262626" : "#757575"}
            />
            <TabText active={activeTab === TABS.GRID}>Grid View</TabText>
          </Tab>
          <Tab
            active={activeTab === TABS.SMART}
            onPress={() => setActiveTab(TABS.SMART)}
            activeOpacity={0.6}
          >
            <MaterialIcons
              name="auto-awesome"
              size={20}
              color={activeTab === TABS.SMART ? "#262626" : "#757575"}
            />
            <TabText active={activeTab === TABS.SMART}>Smart View</TabText>
          </Tab>
          <Tab
            active={activeTab === TABS.MAILBOX}
            onPress={() => setActiveTab(TABS.MAILBOX)}
            activeOpacity={0.6}
          >
            <MaterialIcons
              name="mail"
              size={20}
              color={activeTab === TABS.MAILBOX ? "#262626" : "#757575"}
            />
            <TabText active={activeTab === TABS.MAILBOX}>Inbox</TabText>
          </Tab>
        </TabBar>
        {activeTab === TABS.MAILBOX ? (
          <ReservationsMailbox reservations={merchantReservations} />
        ) : (
          <ReservationsGrid
            timeSlots={timeSlots}
            tables={seatingData.tables}
            counterSeats={seatingData.counterSeats}
            reservations={merchantReservations}
            isSmartSorting={activeTab === TABS.SMART}
          />
        )}
      </Container>
    </SafeArea>
  );
};

================
File: src/features/merchant/reservations/utils/timeUtils.js
================
export const generateTimeSlots = () => {
  const slots = [];
  for (let hour = 9; hour <= 22; hour++) {
    const hourStr = hour.toString().padStart(2, "0");
    slots.push(`${hourStr}:00`);
    slots.push(`${hourStr}:30`);
  }
  return slots;
};
export const calculateCurrentTimePosition = (timeSlotHeight) => {
  const now = new Date();
  const hours = now.getHours();
  const minutes = now.getMinutes();
  if (hours < 9 || (hours === 22 && minutes > 30) || hours > 22) {
    return -100;
  }
  const minutesSince9AM = (hours - 9) * 60 + minutes;
  return (minutesSince9AM / 30) * timeSlotHeight;
};
export const parseTimeString = (timeString) => {
  return timeString.split(":").map(Number);
};
export const convertToMinutesSince9AM = (timeString) => {
  const [hours, minutes] = parseTimeString(timeString);
  return (hours - 9) * 60 + minutes;
};
export const getTimeSlotIndex = (timeString) => {
  const minutesSince9AM = convertToMinutesSince9AM(timeString);
  return Math.floor(minutesSince9AM / 30);
};
export const formatTimeFromDate = (date) => {
  const hours = date.getHours().toString().padStart(2, "0");
  const minutes = date.getMinutes().toString().padStart(2, "0");
  return `${hours}:${minutes}`;
};
export const generateCurrentDayTimes = (count = 5) => {
  let timesArray = [];
  let current = new Date();
  current.setSeconds(0);
  current.setMilliseconds(0);
  const minutes = current.getMinutes();
  current.setMinutes(minutes >= 30 ? 30 : 0);
  for (let i = 0; i < count; i++) {
    timesArray.push(formatTimeFromDate(current));
    current.setMinutes(current.getMinutes() + 30);
  }
  return timesArray;
};

================
File: src/features/merchant/settings/components/EditButton.js
================
import React from "react";
import { TouchableOpacity } from "react-native";
import styled from "styled-components/native";
import { CustomText } from "../../../../components/CustomText/CustomText";
const Button = styled(TouchableOpacity)`
  background-color: ${(props) => props.theme.colors.ui.primary};
  padding-vertical: ${(props) => props.theme.space[2]};
  padding-horizontal: ${(props) => props.theme.space[3]};
  margin: ${(props) => props.theme.space[3]};
  border-radius: 5px;
  ${(props) =>
    props.position === "absolute" &&
    `
    position: absolute;
    right: ${props.theme.space[3]};
  `}
`;
const ButtonText = styled(CustomText)`
  color: ${(props) => props.theme.colors.bg.primary};
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
export const EditButton = ({ onPress, position, style, children = "Edit" }) => {
  return (
    <Button onPress={onPress} position={position} style={style}>
      <ButtonText>{children}</ButtonText>
    </Button>
  );
};
export default EditButton;

================
File: src/features/merchant/settings/screens/MerchantProfileScreen.js
================
import React, { useState } from "react";
import { Avatar } from "react-native-paper";
import { MaterialIcons } from "@expo/vector-icons";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { BackButton } from "../../../../components/BackButton/BackButton";
import { merchantProfile } from "../../../../data/mockData";
import {
  ProfileContainer,
  Header,
  SectionTitle,
  ProfileImageContainer,
  SettingsItemRow,
  SettingsItemText,
  SectionContainer,
} from "./MerchantProfileScreen.styles";
export const MerchantProfileScreen = ({ navigation }) => {
  const [profile, setProfile] = useState(merchantProfile);
  const basicInfoItems = [
    {
      title: "Name",
      value: profile.name,
      icon: "account-circle",
      onPress: () => console.log("Navigate to edit name"),
    },
    {
      title: "Email",
      value: profile.email,
      icon: "email",
      onPress: () => console.log("Navigate to edit email"),
    },
    {
      title: "Phone Number",
      value: profile.phoneNumber,
      icon: "phone",
      onPress: () => console.log("Navigate to edit phone"),
    },
  ];
  const restaurantInfoItems = [
    {
      title: "Restaurant Name",
      value: profile.restaurantName,
      icon: "store",
      onPress: () =>
        navigation.navigate("RestaurantEdit", {
          restaurant: { name: profile.restaurantName },
        }),
    },
    {
      title: "Restaurant Address",
      value: "123 Restaurant St, City",
      icon: "place",
      onPress: () => console.log("Navigate to edit address"),
    },
    {
      title: "Business Hours",
      value: "Mon-Fri: 9AM-10PM, Sat-Sun: 10AM-11PM",
      icon: "schedule",
      onPress: () => console.log("Navigate to edit hours"),
    },
  ];
  const accountSettingsItems = [
    {
      title: "Password",
      value: "Change your password",
      icon: "lock",
      onPress: () => console.log("Navigate to change password"),
    },
    {
      title: "Notifications",
      value: "Manage notification settings",
      icon: "notifications",
      onPress: () => console.log("Navigate to notifications"),
    },
    {
      title: "Language",
      value: "English",
      icon: "language",
      onPress: () => console.log("Navigate to language settings"),
    },
  ];
  const renderSettingsItems = (items) => {
    return items.map((item, index) => (
      <SettingsItemRow key={index} onPress={item.onPress}>
        <MaterialIcons name={item.icon} size={24} color="#262626" />
        <SettingsItemText>
          <CustomText variant="body" style={{ fontWeight: "bold" }}>
            {item.title}
          </CustomText>
          <CustomText variant="body" style={{ color: "#757575" }}>
            {item.value}
          </CustomText>
        </SettingsItemText>
        <MaterialIcons name="chevron-right" size={24} color="#757575" />
      </SettingsItemRow>
    ));
  };
  return (
    <SafeArea>
      <ProfileContainer showsVerticalScrollIndicator={false}>
        <Header>
          <BackButton />
          <CustomText variant="title">Merchant Profile</CustomText>
        </Header>
        {}
        <ProfileImageContainer>
          <Avatar.Image size={80} source={profile.profileImage} />
          <CustomText
            variant="title"
            style={{ marginTop: 10, marginBottom: 5 }}
          >
            {profile.name}
          </CustomText>
          <CustomText variant="caption" style={{ color: "#757575" }}>
            {profile.restaurantName}
          </CustomText>
        </ProfileImageContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">PERSONAL INFO</SectionTitle>
          {renderSettingsItems(basicInfoItems)}
        </SectionContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">RESTAURANT DETAILS</SectionTitle>
          {renderSettingsItems(restaurantInfoItems)}
        </SectionContainer>
        {}
        <SectionContainer>
          <SectionTitle variant="body">ACCOUNT SETTINGS</SectionTitle>
          {renderSettingsItems(accountSettingsItems)}
        </SectionContainer>
      </ProfileContainer>
    </SafeArea>
  );
};
export default MerchantProfileScreen;

================
File: src/features/merchant/settings/screens/MerchantProfileScreen.styles.js
================
import styled from "styled-components/native";
import { ScrollView, TouchableOpacity } from "react-native";
import { CustomText } from "../../../../components/CustomText/CustomText";
export const ProfileContainer = styled(ScrollView)`
  background-color: ${(props) => props.theme.colors.bg.primary};
  flex: 1;
  margin: ${(props) => props.theme.space[1]};
`;
export const Header = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: center;
  padding: ${(props) => props.theme.space[2]};
  position: relative;
  margin-bottom: ${(props) => props.theme.space[2]};
`;
export const ProfileImageContainer = styled.View`
  align-items: center;
  padding: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const SectionTitle = styled(CustomText)`
  font-weight: ${(props) => props.theme.fontWeights.bold};
  color: ${(props) => props.theme.colors.text.secondary};
  font-size: ${(props) => props.theme.fontSizes.caption};
  margin-bottom: ${(props) => props.theme.space[2]};
  margin-left: ${(props) => props.theme.space[3]};
`;
export const SectionContainer = styled.View`
  margin-top: ${(props) => props.theme.space[2]};
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const SettingsItemRow = styled(TouchableOpacity)`
  flex-direction: row;
  align-items: center;
  padding-vertical: ${(props) => props.theme.space[3]};
  padding-horizontal: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
export const SettingsItemText = styled.View`
  flex: 1;
  margin-left: ${(props) => props.theme.space[3]};
`;

================
File: src/features/merchant/settings/screens/MerchantSettingsScreen.js
================
import React from "react";
import { TouchableOpacity, View } from "react-native";
import { Avatar } from "react-native-paper";
import { MaterialIcons } from "@expo/vector-icons";
import styled from "styled-components/native";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { EditButton } from "../components/EditButton";
import { useAuthentication } from "../../../../services/AuthenticationContext";
import { sampleRestaurantData } from "../../../../data/mockEditRestaurantData";
import { merchantProfile } from "../../../../data/mockData";
const SettingsContainer = styled.ScrollView`
  background-color: ${(props) => props.theme.colors.bg.primary};
  flex: 1;
  margin: ${(props) => props.theme.space[1]};
`;
const ProfileContainer = styled.View`
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.primary};
  margin-bottom: ${(props) => props.theme.space[2]};
`;
const UserInfoContainer = styled.View`
  flex: 1;
  margin-right: ${(props) => props.theme.space[2]};
  align-items: flex-start;
`;
const AvatarContainer = styled.View`
  align-items: center;
  justify-content: center;
`;
const EmailText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.secondary};
`;
const RestaurantNameText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.primary};
  font-weight: ${(props) => props.theme.fontWeights.bold};
`;
const StatusBadge = styled.View`
  background-color: #4caf50;
  padding: ${(props) => props.theme.space[1]} ${(props) => props.theme.space[2]};
  border-radius: 12px;
  margin-top: ${(props) => props.theme.space[2]};
  align-self: flex-start;
`;
const StatusText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.inverse};
  font-size: ${(props) => props.theme.fontSizes.caption};
  font-weight: ${(props) => props.theme.fontWeights.bold};
`;
const SectionTitle = styled(CustomText)`
  padding: ${(props) => props.theme.space[3]};
  font-weight: ${(props) => props.theme.fontWeights.bold};
  color: ${(props) => props.theme.colors.text.secondary};
  font-size: ${(props) => props.theme.fontSizes.caption};
`;
const SettingsItemRow = styled(TouchableOpacity)`
  flex-direction: row;
  align-items: center;
  padding-vertical: ${(props) => props.theme.space[3]};
  padding-horizontal: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.primary};
`;
const SettingsItemText = styled.View`
  flex: 1;
  margin-left: ${(props) => props.theme.space[3]};
`;
const SectionContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;
export const MerchantSettingsScreen = ({ navigation }) => {
  const { onLogout } = useAuthentication();
  const accountItems = [
    {
      title: "Profile Settings",
      subtitle: "Edit your personal information",
      icon: "person",
      onPress: () => navigation.navigate("MerchantProfile"),
    },
    {
      title: "Restaurant Information",
      subtitle: "View and update restaurant details",
      icon: "store",
      onPress: () =>
        navigation.navigate("RestaurantDetail", {
          restaurant: sampleRestaurantData,
          isMerchantView: true,
        }),
    },
    {
      title: "Menu Management",
      subtitle: "Add, edit, or remove menu items",
      icon: "restaurant-menu",
      onPress: () => {},
    },
  ];
  const businessItems = [
    {
      title: "Seating Layout",
      subtitle: "Manage tables and seating arrangement",
      icon: "chair",
      onPress: () => navigation.navigate("Home"),
    },
    {
      title: "Reservation Settings",
      subtitle: "Configure reservation rules and availability",
      icon: "event",
      onPress: () => navigation.navigate("Reservations"),
    },
    {
      title: "Business Hours",
      subtitle: "Set your restaurant opening hours",
      icon: "schedule",
      onPress: () => {},
    },
  ];
  const systemItems = [
    {
      title: "Notifications",
      subtitle: "Manage notification preferences",
      icon: "notifications",
      onPress: () => {},
    },
    {
      title: "Payment Methods",
      subtitle: "Configure payment options",
      icon: "payment",
      onPress: () => {},
    },
    {
      title: "Help & Support",
      subtitle: "Contact customer support",
      icon: "help",
      onPress: () => {},
    },
    {
      title: "Logout",
      subtitle: "Sign out from your account",
      icon: "logout",
      iconColor: (props) => props.theme.colors.text.error,
      onPress: onLogout,
    },
  ];
  const renderSettingsItems = (items) => {
    return items.map((item, index) => (
      <SettingsItemRow key={index} onPress={item.onPress}>
        <MaterialIcons
          name={item.icon}
          size={24}
          color={item.iconColor || "#262626"}
        />
        <SettingsItemText>
          <CustomText variant="body" style={{ fontWeight: "bold" }}>
            {item.title}
          </CustomText>
          <CustomText variant="body" style={{ color: "#757575" }}>
            {item.subtitle}
          </CustomText>
        </SettingsItemText>
        <MaterialIcons name="chevron-right" size={24} color="#757575" />
      </SettingsItemRow>
    ));
  };
  return (
    <SafeArea>
      <SettingsContainer>
        <TouchableOpacity
          onPress={() => navigation.navigate("MerchantProfile")}
        >
          <ProfileContainer>
            <UserInfoContainer>
              <CustomText variant="h3">{merchantProfile.name}</CustomText>
              <EmailText variant="caption">{merchantProfile.email}</EmailText>
              <RestaurantNameText variant="body">
                {merchantProfile.restaurantName}
              </RestaurantNameText>
              <StatusBadge>
                <StatusText>ACTIVE</StatusText>
              </StatusBadge>
            </UserInfoContainer>
            <AvatarContainer>
              <Avatar.Image
                size={80}
                source={merchantProfile.profileImage}
                backgroundColor={(props) => props.theme.colors.brand.primary}
              />
            </AvatarContainer>
          </ProfileContainer>
        </TouchableOpacity>
        <SectionContainer>
          <SectionTitle variant="body">ACCOUNT</SectionTitle>
          {renderSettingsItems(accountItems)}
        </SectionContainer>
        <SectionContainer>
          <SectionTitle variant="body">BUSINESS SETTINGS</SectionTitle>
          {renderSettingsItems(businessItems)}
        </SectionContainer>
        <SectionContainer>
          <SectionTitle variant="body">SYSTEM</SectionTitle>
          {renderSettingsItems(systemItems)}
        </SectionContainer>
      </SettingsContainer>
    </SafeArea>
  );
};

================
File: src/features/merchant/settings/screens/RestaurantEditScreen.js
================
import React, { useState, useEffect } from "react";
import {
  ScrollView,
  View,
  TouchableOpacity,
  TextInput,
  Image,
  Alert,
} from "react-native";
import { MaterialIcons } from "@expo/vector-icons";
import * as ImagePicker from "expo-image-picker";
import { BackButton } from "../../../../components/BackButton/BackButton";
import { SafeArea } from "../../../../components/SafeArea/SafeArea";
import { CustomText } from "../../../../components/CustomText/CustomText";
import { sampleRestaurantData } from "../../../../data/mockEditRestaurantData";
import {
  Container,
  Header,
  HeaderTitle,
  SaveButton,
  SaveButtonText,
  Section,
  SectionTitle,
  FormGroup,
  Label,
  Input,
  TextArea,
  PhotoContainer,
  PhotoItem,
  PhotoImage,
  AddPhotoButton,
  RemovePhotoButton,
  FeatureRow,
  FeatureSwitch,
  BusinessHoursRow,
  DayLabel,
  TimeInput,
  ClosedCheckbox,
  CuisineTag,
  CuisineTagsContainer,
  AddCuisineButton,
} from "./RestaurantEditScreen.styles";
export const RestaurantEditScreen = ({ route, navigation }) => {
  const [restaurant, setRestaurant] = useState(
    route.params?.restaurant || sampleRestaurantData
  );
  const [loading, setLoading] = useState(true);
  const [newCuisine, setNewCuisine] = useState("");
  // Load restaurant data
  useEffect(() => {
    // In a real app, this would be a fetch call to your API
    const initialData = route.params?.restaurant || sampleRestaurantData;
    // Ensure all required properties exist to prevent rendering errors
    const completeData = {
      ...sampleRestaurantData,
      ...initialData,
      // Ensure nested objects exist
      address: {
        ...sampleRestaurantData.address,
        ...(initialData.address || {}),
      },
      businessHours: {
        ...sampleRestaurantData.businessHours,
        ...(initialData.businessHours || {}),
      },
      features: {
        ...sampleRestaurantData.features,
        ...(initialData.features || {}),
      },
      settings: {
        ...sampleRestaurantData.settings,
        ...(initialData.settings || {}),
      },
      socialMedia: {
        ...sampleRestaurantData.socialMedia,
        ...(initialData.socialMedia || {}),
      },
    };
    setRestaurant(completeData);
    setLoading(false);
  }, [route.params?.restaurant]);
  const handleSave = () => {
    // In a real app, this would send the updated data to your API
    Alert.alert("Success", "Restaurant information saved successfully", [
      {
        text: "OK",
        onPress: () => {
          navigation.navigate("RestaurantDetail", {
            updatedRestaurant: restaurant,
            isMerchantView: true,
          });
        },
      },
    ]);
  };
  const handleAddPhoto = async () => {
    try {
      const permissionResult =
        await ImagePicker.requestMediaLibraryPermissionsAsync();
      if (!permissionResult.granted) {
        Alert.alert(
          "Permission Required",
          "Please allow access to your photo library"
        );
        return;
      }
      const pickerResult = await ImagePicker.launchImageLibraryAsync({
        allowsEditing: true,
        aspect: [4, 3],
        quality: 1,
      });
      if (
        !pickerResult.canceled &&
        pickerResult.assets &&
        pickerResult.assets.length > 0
      ) {
        setRestaurant((prev) => ({
          ...prev,
          photos: [...prev.photos, pickerResult.assets[0].uri],
        }));
      }
    } catch (error) {
      console.error("Error picking image:", error);
      Alert.alert("Error", "There was a problem selecting your image");
    }
  };
  const handleRemovePhoto = (index) => {
    setRestaurant((prev) => ({
      ...prev,
      photos: prev.photos.filter((_, i) => i !== index),
    }));
  };
  const updateTextValue = (field, value) => {
    setRestaurant((prev) => ({
      ...prev,
      [field]: value,
    }));
  };
  const updateNestedValue = (parent, field, value) => {
    setRestaurant((prev) => ({
      ...prev,
      [parent]: {
        ...prev[parent],
        [field]: value,
      },
    }));
  };
  const toggleFeature = (feature) => {
    setRestaurant((prev) => ({
      ...prev,
      features: {
        ...prev.features,
        [feature]: !prev.features[feature],
      },
    }));
  };
  const updateBusinessHours = (day, field, value) => {
    setRestaurant((prev) => ({
      ...prev,
      businessHours: {
        ...prev.businessHours,
        [day]: {
          ...prev.businessHours[day],
          [field]: value,
        },
      },
    }));
  };
  const toggleDayClosed = (day) => {
    const isClosed = restaurant.businessHours[day].isClosed;
    setRestaurant((prev) => ({
      ...prev,
      businessHours: {
        ...prev.businessHours,
        [day]: {
          ...prev.businessHours[day],
          isClosed: !isClosed,
        },
      },
    }));
  };
  const handleAddCuisine = () => {
    if (newCuisine.trim() === "") return;
    setRestaurant((prev) => ({
      ...prev,
      cuisine: [...prev.cuisine, newCuisine.trim()],
    }));
    setNewCuisine("");
  };
  const handleRemoveCuisine = (index) => {
    setRestaurant((prev) => ({
      ...prev,
      cuisine: prev.cuisine.filter((_, i) => i !== index),
    }));
  };
  if (loading || !restaurant) {
    return (
      <SafeArea>
        <Container>
          <CustomText>Loading restaurant information...</CustomText>
        </Container>
      </SafeArea>
    );
  }
  const daysOfWeek = [
    "monday",
    "tuesday",
    "wednesday",
    "thursday",
    "friday",
    "saturday",
    "sunday",
  ];
  return (
    <SafeArea>
      <Container>
        <Header>
          <BackButton position="relative" />
          <HeaderTitle>Edit Restaurant</HeaderTitle>
          <SaveButton onPress={handleSave}>
            <SaveButtonText>Save</SaveButtonText>
          </SaveButton>
        </Header>
        {}
        <Section>
          <SectionTitle>BASIC INFORMATION</SectionTitle>
          <FormGroup>
            <Label>Restaurant Name</Label>
            <Input
              value={restaurant.name}
              onChangeText={(text) => updateTextValue("name", text)}
              placeholder="Enter restaurant name"
            />
          </FormGroup>
          <FormGroup>
            <Label>Description</Label>
            <TextArea
              value={restaurant.description}
              onChangeText={(text) => updateTextValue("description", text)}
              placeholder="Enter restaurant description"
              multiline={true}
              numberOfLines={4}
            />
          </FormGroup>
          <FormGroup>
            <Label>Cuisine Types</Label>
            <CuisineTagsContainer>
              {restaurant.cuisine.map((cuisine, index) => (
                <CuisineTag key={index}>
                  <CustomText>{cuisine}</CustomText>
                  <TouchableOpacity
                    onPress={() => handleRemoveCuisine(index)}
                    style={{ marginLeft: 5 }}
                  >
                    <MaterialIcons name="close" size={16} color="#757575" />
                  </TouchableOpacity>
                </CuisineTag>
              ))}
            </CuisineTagsContainer>
            <View style={{ flexDirection: "row", alignItems: "center" }}>
              <Input
                value={newCuisine}
                onChangeText={setNewCuisine}
                placeholder="Add new cuisine type"
                style={{ flex: 1, marginRight: 10 }}
              />
              <AddCuisineButton onPress={handleAddCuisine}>
                <MaterialIcons name="add" size={16} color="#262626" />
                <CustomText>Add</CustomText>
              </AddCuisineButton>
            </View>
          </FormGroup>
        </Section>
        {}
        <Section>
          <SectionTitle>CONTACT & LOCATION</SectionTitle>
          <FormGroup>
            <Label>Street Address</Label>
            <Input
              value={restaurant.address.street}
              onChangeText={(text) =>
                updateNestedValue("address", "street", text)
              }
              placeholder="Enter street address"
            />
          </FormGroup>
          <FormGroup>
            <Label>City</Label>
            <Input
              value={restaurant.address.city}
              onChangeText={(text) =>
                updateNestedValue("address", "city", text)
              }
              placeholder="Enter city"
            />
          </FormGroup>
          <FormGroup>
            <Label>State/Province</Label>
            <Input
              value={restaurant.address.state}
              onChangeText={(text) =>
                updateNestedValue("address", "state", text)
              }
              placeholder="Enter state/province"
            />
          </FormGroup>
          <FormGroup>
            <Label>Postal Code</Label>
            <Input
              value={restaurant.address.postalCode}
              onChangeText={(text) =>
                updateNestedValue("address", "postalCode", text)
              }
              placeholder="Enter postal code"
            />
          </FormGroup>
          <FormGroup>
            <Label>Phone Number</Label>
            <Input
              value={restaurant.phoneNumber}
              onChangeText={(text) => updateTextValue("phoneNumber", text)}
              placeholder="Enter phone number"
              keyboardType="phone-pad"
            />
          </FormGroup>
          <FormGroup>
            <Label>Email</Label>
            <Input
              value={restaurant.email}
              onChangeText={(text) => updateTextValue("email", text)}
              placeholder="Enter email address"
              keyboardType="email-address"
              autoCapitalize="none"
            />
          </FormGroup>
          <FormGroup>
            <Label>Website</Label>
            <Input
              value={restaurant.website}
              onChangeText={(text) => updateTextValue("website", text)}
              placeholder="Enter website URL"
              keyboardType="url"
              autoCapitalize="none"
            />
          </FormGroup>
        </Section>
        {}
        <Section>
          <SectionTitle>PHOTOS</SectionTitle>
          <FormGroup>
            <Label>Restaurant Photos</Label>
            <PhotoContainer>
              {Array.isArray(restaurant.photos) &&
                restaurant.photos.map((photo, index) => (
                  <PhotoItem key={index}>
                    <PhotoImage source={{ uri: photo }} />
                    <RemovePhotoButton onPress={() => handleRemovePhoto(index)}>
                      <MaterialIcons name="close" size={16} color="white" />
                    </RemovePhotoButton>
                  </PhotoItem>
                ))}
              <AddPhotoButton onPress={handleAddPhoto}>
                <MaterialIcons
                  name="add-photo-alternate"
                  size={24}
                  color="#757575"
                />
              </AddPhotoButton>
            </PhotoContainer>
          </FormGroup>
        </Section>
        {}
        <Section>
          <SectionTitle>BUSINESS HOURS</SectionTitle>
          {daysOfWeek.map((day) => (
            <BusinessHoursRow key={day}>
              <DayLabel style={{ textTransform: "capitalize" }}>{day}</DayLabel>
              <TimeInput
                value={restaurant.businessHours[day].open}
                onChangeText={(text) => updateBusinessHours(day, "open", text)}
                placeholder="09:00"
                editable={!restaurant.businessHours[day].isClosed}
              />
              <CustomText>to</CustomText>
              <TimeInput
                value={restaurant.businessHours[day].close}
                onChangeText={(text) => updateBusinessHours(day, "close", text)}
                placeholder="22:00"
                editable={!restaurant.businessHours[day].isClosed}
              />
              <ClosedCheckbox onPress={() => toggleDayClosed(day)}>
                <MaterialIcons
                  name={
                    restaurant.businessHours[day].isClosed
                      ? "check-box"
                      : "check-box-outline-blank"
                  }
                  size={24}
                  color="#262626"
                />
                <CustomText>Closed</CustomText>
              </ClosedCheckbox>
            </BusinessHoursRow>
          ))}
          <FormGroup style={{ marginTop: 10 }}>
            <FeatureRow>
              <FeatureSwitch
                value={restaurant.isClosedTemporarily}
                onValueChange={() =>
                  updateTextValue(
                    "isClosedTemporarily",
                    !restaurant.isClosedTemporarily
                  )
                }
              />
              <Label>Temporarily Closed</Label>
            </FeatureRow>
          </FormGroup>
        </Section>
        {}
        <Section>
          <SectionTitle>FEATURES & AMENITIES</SectionTitle>
          <FormGroup>
            <FeatureRow>
              <FeatureSwitch
                value={restaurant.features.hasWifi}
                onValueChange={() => toggleFeature("hasWifi")}
              />
              <Label>Wi-Fi Available</Label>
            </FeatureRow>
            <FeatureRow>
              <FeatureSwitch
                value={restaurant.features.hasParking}
                onValueChange={() => toggleFeature("hasParking")}
              />
              <Label>Parking Available</Label>
            </FeatureRow>
            <FeatureRow>
              <FeatureSwitch
                value={restaurant.features.isWheelchairAccessible}
                onValueChange={() => toggleFeature("isWheelchairAccessible")}
              />
              <Label>Wheelchair Accessible</Label>
            </FeatureRow>
            <FeatureRow>
              <FeatureSwitch
                value={restaurant.features.allowsPets}
                onValueChange={() => toggleFeature("allowsPets")}
              />
              <Label>Pet Friendly</Label>
            </FeatureRow>
            <FeatureRow>
              <FeatureSwitch
                value={restaurant.features.hasOutdoorSeating}
                onValueChange={() => toggleFeature("hasOutdoorSeating")}
              />
              <Label>Outdoor Seating</Label>
            </FeatureRow>
            <FeatureRow>
              <FeatureSwitch
                value={restaurant.features.hasTakeout}
                onValueChange={() => toggleFeature("hasTakeout")}
              />
              <Label>Takeout Available</Label>
            </FeatureRow>
            <FeatureRow>
              <FeatureSwitch
                value={restaurant.features.hasDelivery}
                onValueChange={() => toggleFeature("hasDelivery")}
              />
              <Label>Delivery Available</Label>
            </FeatureRow>
            <FeatureRow>
              <FeatureSwitch
                value={restaurant.features.acceptsReservations}
                onValueChange={() => toggleFeature("acceptsReservations")}
              />
              <Label>Accepts Reservations</Label>
            </FeatureRow>
          </FormGroup>
        </Section>
        {}
        <Section>
          <SectionTitle>SOCIAL MEDIA</SectionTitle>
          <FormGroup>
            <Label>Instagram</Label>
            <Input
              value={restaurant.socialMedia.instagram}
              onChangeText={(text) =>
                updateNestedValue("socialMedia", "instagram", text)
              }
              placeholder="Instagram URL"
              autoCapitalize="none"
            />
          </FormGroup>
          <FormGroup>
            <Label>Facebook</Label>
            <Input
              value={restaurant.socialMedia.facebook}
              onChangeText={(text) =>
                updateNestedValue("socialMedia", "facebook", text)
              }
              placeholder="Facebook URL"
              autoCapitalize="none"
            />
          </FormGroup>
          <FormGroup>
            <Label>Twitter</Label>
            <Input
              value={restaurant.socialMedia.twitter}
              onChangeText={(text) =>
                updateNestedValue("socialMedia", "twitter", text)
              }
              placeholder="Twitter URL"
              autoCapitalize="none"
            />
          </FormGroup>
          <FormGroup>
            <Label>Yelp</Label>
            <Input
              value={restaurant.socialMedia.yelp}
              onChangeText={(text) =>
                updateNestedValue("socialMedia", "yelp", text)
              }
              placeholder="Yelp URL"
              autoCapitalize="none"
            />
          </FormGroup>
        </Section>
        {}
        <Section>
          <SectionTitle>RESERVATION SETTINGS</SectionTitle>
          <FormGroup>
            <Label>Time Slot Duration (minutes)</Label>
            <Input
              value={restaurant.settings.reservationTimeSlotDuration.toString()}
              onChangeText={(text) => {
                const value = parseInt(text) || 0;
                updateNestedValue(
                  "settings",
                  "reservationTimeSlotDuration",
                  value
                );
              }}
              placeholder="30"
              keyboardType="number-pad"
            />
          </FormGroup>
          <FormGroup>
            <Label>Maximum Party Size</Label>
            <Input
              value={restaurant.settings.maxReservationSize.toString()}
              onChangeText={(text) => {
                const value = parseInt(text) || 0;
                updateNestedValue("settings", "maxReservationSize", value);
              }}
              placeholder="20"
              keyboardType="number-pad"
            />
          </FormGroup>
          <FormGroup>
            <Label>Minimum Advance Notice (hours)</Label>
            <Input
              value={restaurant.settings.reservationLeadTime.toString()}
              onChangeText={(text) => {
                const value = parseInt(text) || 0;
                updateNestedValue("settings", "reservationLeadTime", value);
              }}
              placeholder="1"
              keyboardType="number-pad"
            />
          </FormGroup>
          <FormGroup>
            <FeatureRow>
              <FeatureSwitch
                value={restaurant.settings.automaticConfirmation}
                onValueChange={() =>
                  updateNestedValue(
                    "settings",
                    "automaticConfirmation",
                    !restaurant.settings.automaticConfirmation
                  )
                }
              />
              <Label>Automatic Reservation Confirmation</Label>
            </FeatureRow>
          </FormGroup>
        </Section>
      </Container>
    </SafeArea>
  );
};

================
File: src/features/merchant/settings/screens/RestaurantEditScreen.styles.js
================
import styled from "styled-components/native";
import { CustomText } from "../../../../components/CustomText/CustomText";
export const Container = styled.ScrollView`
  background-color: ${(props) => props.theme.colors.bg.primary};
  flex: 1;
  margin: ${(props) => props.theme.space[1]};
`;
export const Header = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  padding: ${(props) => props.theme.space[3]};
`;
export const HeaderTitle = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.title};
  font-weight: ${(props) => props.theme.fontWeights.bold};
`;
export const SaveButton = styled.TouchableOpacity`
  background-color: ${(props) => props.theme.colors.ui.primary};
  padding-vertical: ${(props) => props.theme.space[2]};
  padding-horizontal: ${(props) => props.theme.space[3]};
  border-radius: 5px;
`;
export const SaveButtonText = styled(CustomText)`
  color: ${(props) => props.theme.colors.bg.primary};
`;
export const Section = styled.View`
  margin-bottom: ${(props) => props.theme.space[4]};
`;
export const SectionTitle = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.body};
  font-weight: ${(props) => props.theme.fontWeights.bold};
  margin-bottom: ${(props) => props.theme.space[3]};
  padding-horizontal: ${(props) => props.theme.space[3]};
`;
export const FormGroup = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
  padding-horizontal: ${(props) => props.theme.space[3]};
`;
export const Label = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.body};
  margin-bottom: ${(props) => props.theme.space[1]};
`;
export const Input = styled.TextInput`
  background-color: ${(props) => props.theme.colors.bg.secondary};
  padding: ${(props) => props.theme.space[2]};
  border-radius: 5px;
  font-size: ${(props) => props.theme.fontSizes.body};
`;
export const TextArea = styled(Input)`
  min-height: 100px;
  text-align-vertical: top;
`;
export const PhotoContainer = styled.View`
  flex-direction: row;
  flex-wrap: wrap;
  padding: ${(props) => props.theme.space[2]};
`;
export const PhotoItem = styled.View`
  width: 100px;
  height: 100px;
  margin: ${(props) => props.theme.space[1]};
  border-radius: 5px;
  overflow: hidden;
  position: relative;
`;
export const PhotoImage = styled.Image`
  width: 100%;
  height: 100%;
`;
export const AddPhotoButton = styled.TouchableOpacity`
  width: 100px;
  height: 100px;
  background-color: ${(props) => props.theme.colors.bg.secondary};
  justify-content: center;
  align-items: center;
  margin: ${(props) => props.theme.space[1]};
  border-radius: 5px;
  border: 1px dashed ${(props) => props.theme.colors.ui.secondary};
`;
export const RemovePhotoButton = styled.TouchableOpacity`
  position: absolute;
  top: 5px;
  right: 5px;
  background-color: rgba(0, 0, 0, 0.5);
  width: 24px;
  height: 24px;
  border-radius: 12px;
  justify-content: center;
  align-items: center;
`;
export const FeatureRow = styled.View`
  flex-direction: row;
  align-items: center;
  margin-bottom: ${(props) => props.theme.space[2]};
`;
export const FeatureSwitch = styled.Switch`
  margin-right: ${(props) => props.theme.space[2]};
`;
export const BusinessHoursRow = styled.View`
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  margin-left: ${(props) => props.theme.space[3]};
  margin-right: ${(props) => props.theme.space[3]};
`;
export const DayLabel = styled(CustomText)`
  width: 100px;
`;
export const TimeInput = styled.TextInput`
  background-color: ${(props) => props.theme.colors.bg.secondary};
  padding: ${(props) => props.theme.space[1]};
  border-radius: 5px;
  width: 80px;
  font-size: ${(props) => props.theme.fontSizes.body};
  text-align: center;
`;
export const ClosedCheckbox = styled.TouchableOpacity`
  flex-direction: row;
  align-items: center;
`;
export const CuisineTag = styled.TouchableOpacity`
  background-color: ${(props) => props.theme.colors.ui.tertiary};
  padding-vertical: ${(props) => props.theme.space[1]};
  padding-horizontal: ${(props) => props.theme.space[2]};
  border-radius: 20px;
  margin-right: ${(props) => props.theme.space[1]};
  margin-bottom: ${(props) => props.theme.space[1]};
  flex-direction: row;
  align-items: center;
`;
export const CuisineTagsContainer = styled.View`
  flex-direction: row;
  flex-wrap: wrap;
  margin-bottom: ${(props) => props.theme.space[2]};
`;
export const AddCuisineButton = styled.TouchableOpacity`
  flex-direction: row;
  align-items: center;
  background-color: ${(props) => props.theme.colors.ui.tertiary};
  padding-vertical: ${(props) => props.theme.space[1]};
  padding-horizontal: ${(props) => props.theme.space[2]};
  border-radius: 20px;
  margin-bottom: ${(props) => props.theme.space[1]};
`;

================
File: src/infrastructure/navigation/AppNavigator.js
================
import React from "react";
import { Platform } from "react-native";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import { createStackNavigator } from "@react-navigation/stack";
import { Ionicons } from "@expo/vector-icons";
import { useAuthentication } from "../../services/AuthenticationContext";
import { globalScreenOptions } from "../options/GlobalScreenOptions";
import { RestaurantsNavigator } from "./RestaurantsNavigator";
import { CheckoutNavigator } from "./CheckoutNavigator";
import { ReservationsNavigator } from "./ReservationsNavigator";
import { MerchantNavigator } from "./MerchantNavigator";
import { SettingsNavigator } from "./SettingsNavigator";
import { RestaurantDetailScreen } from "../../features/customer/restaurants/screens/RestaurantDetailScreen";
import { AccountSettingsScreen } from "../../features/customer/settings/screens/AccountSettingsScreen";
import ReservationFlow from "../../features/customer/reservations/screens/ReservationFlow";
const TAB_ICON = {
  Restaurants: "restaurant",
  Checkout: "cart",
  Reservations: "book",
  Settings: "settings",
};
const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();
const createTabScreenOptions = ({ route }) => {
  const iconName = TAB_ICON[route.name];
  return {
    tabBarIcon: ({ size, color }) => (
      <Ionicons name={iconName} size={size} color={color} />
    ),
  };
};
const HomeTabs = () => (
  <Tab.Navigator screenOptions={createTabScreenOptions}>
    <Tab.Screen
      name="Restaurants"
      component={RestaurantsNavigator}
      options={{ headerShown: false }}
    />
    <Tab.Screen
      name="Checkout"
      component={CheckoutNavigator}
      options={{ headerShown: false }}
    />
    <Tab.Screen
      name="Reservations"
      component={ReservationsNavigator}
      options={{ header: () => null }}
    />
    <Tab.Screen
      name="Settings"
      component={SettingsNavigator}
      options={{ headerShown: false }}
    />
  </Tab.Navigator>
);
export const AppNavigator = () => {
  const { user } = useAuthentication();
  const role = user?.role;
  return (
    <Stack.Navigator
      screenOptions={{
        headerShown: false,
      }}
    >
      {role === "customer" ? (
        <>
          <Stack.Screen name="Home" component={HomeTabs} />
          <Stack.Screen
            name="RestaurantDetailScreen"
            component={RestaurantDetailScreen}
            options={({ route }) => ({
              ...globalScreenOptions.restaurantDetail,
              presentation:
                route.params?.presentationStyle === "modal" ? "modal" : "card",
            })}
          />
          <Stack.Screen
            name="AccountSettings"
            component={AccountSettingsScreen}
            options={globalScreenOptions.common}
          />
        </>
      ) : (
        <>
          <Stack.Screen name="Merchant" component={MerchantNavigator} />
        </>
      )}
    </Stack.Navigator>
  );
};

================
File: src/infrastructure/navigation/AuthNavigator.js
================
import React from "react";
import { createStackNavigator } from "@react-navigation/stack";
import { LoginScreen } from "../../features/auth/screens/LoginScreen";
import { globalScreenOptions } from "../options/GlobalScreenOptions";
const Stack = createStackNavigator();
export const AuthNavigator = () => {
  return (
    <Stack.Navigator screenOptions={globalScreenOptions.nonHeader}>
      <Stack.Screen name="Login" component={LoginScreen} />
      {}
    </Stack.Navigator>
  );
};

================
File: src/infrastructure/navigation/CheckoutNavigator.js
================
import React from "react";
import {
  ScrollView,
  TextInput,
  Text,
  TouchableOpacity,
  View,
  StyleSheet,
} from "react-native";
import * as FileSystem from "expo-file-system";
import { createStackNavigator } from "@react-navigation/stack";
const CheckoutStack = createStackNavigator();
export const CheckoutNavigator = () => {
  return (
    <View style={{ flex: 1 }}>
      <Text>Checkout Navigator</Text>
    </View>
  );
};

================
File: src/infrastructure/navigation/index.js
================
import React from "react";
import { NavigationContainer } from "@react-navigation/native";
import { AppNavigator } from "./AppNavigator";
import { AuthNavigator } from "./AuthNavigator";
import { GlobalWrapper } from "../../components/GlobalWrapper/GlobalWrapper";
import { useAuthentication } from "../../services/AuthenticationContext";
export const Navigation = () => {
  const { isAuthenticated } = useAuthentication();
  return (
    <GlobalWrapper>
      <NavigationContainer>
        {isAuthenticated ? <AppNavigator /> : <AuthNavigator />}
      </NavigationContainer>
    </GlobalWrapper>
  );
};

================
File: src/infrastructure/navigation/MerchantNavigator.js
================
import React from "react";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import { createStackNavigator } from "@react-navigation/stack";
import { Ionicons } from "@expo/vector-icons";
import { useTheme } from "styled-components/native";
import { MerchantHomeScreen } from "../../features/merchant/dashboard/screens/MerchantHomeScreen";
import { MerchantSettingsScreen } from "../../features/merchant/settings/screens/MerchantSettingsScreen";
import { MerchantReservationsScreen } from "../../features/merchant/reservations/screens/MerchantReservationsScreen";
import { RestaurantEditScreen } from "../../features/merchant/settings/screens/RestaurantEditScreen";
import { RestaurantDetailScreen } from "../../features/customer/restaurants/screens/RestaurantDetailScreen";
import { MerchantProfileScreen } from "../../features/merchant/settings/screens/MerchantProfileScreen";
const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();
const SettingsStack = () => {
  return (
    <Stack.Navigator screenOptions={{ headerShown: false }}>
      <Stack.Screen name="SettingsMain" component={MerchantSettingsScreen} />
      <Stack.Screen name="MerchantProfile" component={MerchantProfileScreen} />
      <Stack.Screen
        name="RestaurantDetail"
        component={RestaurantDetailScreen}
        initialParams={{ isMerchantView: true }}
      />
      <Stack.Screen name="RestaurantEdit" component={RestaurantEditScreen} />
    </Stack.Navigator>
  );
};
export const MerchantNavigator = () => {
  const theme = useTheme();
  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        headerShown: false,
        tabBarIcon: ({ color, size }) => {
          let iconName;
          if (route.name === "Home") {
            iconName = "home";
          } else if (route.name === "Settings") {
            iconName = "settings";
          } else if (route.name === "Reservations") {
            iconName = "calendar";
          }
          return <Ionicons name={iconName} size={size} color={color} />;
        },
        tabBarActiveTintColor: theme.colors.text.primary,
        tabBarInactiveTintColor: theme.colors.text.secondary,
        tabBarStyle: {
          backgroundColor: theme.colors.bg.primary,
        },
      })}
    >
      <Tab.Screen name="Home" component={MerchantHomeScreen} />
      <Tab.Screen name="Reservations" component={MerchantReservationsScreen} />
      <Tab.Screen name="Settings" component={SettingsStack} />
    </Tab.Navigator>
  );
};

================
File: src/infrastructure/navigation/ReservationsNavigator.js
================
import React from "react";
import { createStackNavigator } from "@react-navigation/stack";
import { useTheme } from "styled-components/native";
import { ReservationsScreen } from "../../features/customer/reservations/screens/ReservationsScreen";
const ReservationStack = createStackNavigator();
export const ReservationsNavigator = () => {
  const theme = useTheme();
  const getNumericValue = (value) => parseInt(value.replace("px", ""), 10);
  return (
    <ReservationStack.Navigator
      screenOptions={{
        headerShown: true,
        headerTitleAlign: "left",
        headerTintColor: theme.colors.text.primary,
        headerStyle: {
          backgroundColor: theme.colors.bg.primary,
          shadowColor: "transparent",
          elevation: 0,
        },
        headerTitleStyle: {
          fontSize: getNumericValue(theme.fontSizes.h4),
          fontFamily: theme.fonts.heading,
          fontWeight: theme.fontWeights.regular,
          lineHeight: getNumericValue(theme.fontSizes.h2),
          paddingLeft: getNumericValue(theme.space[2]),
        },
      }}
    >
      <ReservationStack.Screen
        name="ReservationsScreen"
        component={ReservationsScreen}
        options={{
          headerTitle: "Reservations",
        }}
      />
    </ReservationStack.Navigator>
  );
};

================
File: src/infrastructure/navigation/RestaurantsNavigator.js
================
import React from "react";
import { ScrollView, TextInput, Text, TouchableOpacity } from "react-native";
import {
  createStackNavigator,
  TransitionPresets,
} from "@react-navigation/stack";
import { RestaurantsScreen } from "../../features/customer/restaurants/screens/RestaurantsScreen";
import { RestaurantDetailScreen } from "../../features/customer/restaurants/screens/RestaurantDetailScreen";
const RestaurantStack = createStackNavigator();
export const RestaurantsNavigator = () => {
  return (
    <RestaurantStack.Navigator
      screenOptions={{
        headerShown: false,
        ...TransitionPresets.ModalPresentationIOS,
      }}
    >
      <RestaurantStack.Screen
        name="RestaurantsScreen"
        component={RestaurantsScreen}
        options={{ headerShown: false }}
      />
    </RestaurantStack.Navigator>
  );
};

================
File: src/infrastructure/navigation/SettingsNavigator.js
================
import React from "react";
import {
  createStackNavigator,
  CardStyleInterpolators,
} from "@react-navigation/stack";
import { SettingsScreen } from "../../features/customer/settings/screens/SettingsScreen";
const SettingsStack = createStackNavigator();
export const SettingsNavigator = () => {
  return (
    <SettingsStack.Navigator
      screenOptions={{
        headerShown: false,
        cardStyleInterpolator: CardStyleInterpolators.forHorizontalIOS,
      }}
    >
      <SettingsStack.Screen name="SettingsScreen" component={SettingsScreen} />
    </SettingsStack.Navigator>
  );
};

================
File: src/infrastructure/options/GlobalScreenOptions.js
================
import { Platform } from "react-native";
import { colors } from "../../infrastructure/theme/colors";
import { TransitionPresets } from "@react-navigation/stack";
const commonHeaderOptions = {
  headerStyle: {
    height: Platform.select({ ios: 56, android: 66 }),
    backgroundColor: colors.bg.primary,
  },
  headerTitleStyle: {
    fontWeight: "bold",
    fontSize: 20,
    color: colors.text.primary,
    textAlign: "center",
  },
  headerBackTitleVisible: false,
  headerTitleAlign: "center",
  headerLeftContainerStyle: {
    marginTop: Platform.select({ ios: -45, android: -41 }),
  },
  headerTitleContainerStyle: {
    marginTop: Platform.select({ ios: -50, android: -45 }),
  },
};
export const globalScreenOptions = {
  common: commonHeaderOptions,
  nonHeader: {
    ...commonHeaderOptions,
    headerShown: false,
  },
  restaurantDetail: {
    headerShown: false,
  },
};

================
File: src/infrastructure/theme/colors.js
================
export const colors = {
  brand: {
    primary: "#FFFFFF",
    secondary: "#757575",
    muted: "#C6DAF7",
  },
  ui: {
    primary: "#262626",
    secondary: "#757575",
    tertiary: "#F1F1F1",
    quaternary: "#FFFFFF",
    disabled: "#DEDEDE",
    error: "#D0421B",
    success: "#138000",
  },
  bg: {
    primary: "#FFFFFF",
    secondary: "#F1F1F1",
  },
  text: {
    primary: "#262626",
    secondary: "#757575",
    disabled: "#9C9C9C",
    inverse: "#FFFFFF",
    error: "#D0421B",
    success: "#138000",
  },
};

================
File: src/infrastructure/theme/fonts.js
================
export const fonts = {
  body: "Oswald_400Regular",
  heading: "Lato_400Regular",
  monospace: "Oswald_400Regular",
};
export const fontWeights = {
  regular: 400,
  medium: 500,
  bold: 700,
};
export const fontSizes = {
  caption: "12px",
  button: "14px",
  body: "16px",
  title: "20px",
  h5: "24px",
  h4: "34px",
  h3: "45px",
  h2: "56px",
  h1: "112px",
};

================
File: src/infrastructure/theme/index.js
================
import { colors } from './colors';
import { sizes } from './sizes';
import { space, lineHeights } from './spacing';
import { fonts, fontWeights, fontSizes } from './fonts';
export const theme = {
  colors,
  sizes,
  space,
  lineHeights,
  fonts,
  fontSizes,
  fontWeights,
};

================
File: src/infrastructure/theme/sizes.js
================
export const sizes = ['8px', '16px', '32px', '64px', '128px'];

================
File: src/infrastructure/theme/spacing.js
================
export const lineHeights = {
    title: '28px',
    copy: '20px',
  };
  export const space = ['0px', '4px', '8px', '16px', '32px', '64px'];

================
File: src/services/i18n/locales/en/en.js
================
export default {
  common: {
    languages: {
      en: "English",
      ja: "Japanese",
      zh: "Chinese",
    },
    actions: {
      save: "Save",
      cancel: "Cancel",
      confirm: "Confirm",
      delete: "Delete",
      edit: "Edit",
      view: "View",
      back: "Back",
      next: "Next",
      submit: "Submit",
    },
    status: {
      loading: "Loading...",
      success: "Success",
      error: "Error",
      pending: "Pending",
      completed: "Completed",
      confirmed: "Confirmed",
      cancelled: "Cancelled",
    },
    validation: {
      required: "This field is required",
      invalidEmail: "Please enter a valid email address",
      invalidPhone: "Please enter a valid phone number",
      minLength: "Must be at least {{count}} characters",
      maxLength: "Must be at most {{count}} characters",
      passwordMatch: "Passwords do not match",
      invalidInput: "Invalid input",
    },
  },
  auth: {
    login: {
      title: "Login",
      phoneNumber: "Phone number",
      password: "Password",
      loginButton: "Login",
      loggingIn: "Logging in...",
      noAccount: "Don't have an account? Sign Up",
      customer: "Customer",
      merchant: "Merchant",
      forgotPassword: "Forgot Password?",
    },
    signup: {
      title: "Sign Up",
      name: "Full Name",
      email: "Email Address",
      phoneNumber: "Phone Number",
      password: "Password",
      confirmPassword: "Confirm Password",
      signupButton: "Sign Up",
      haveAccount: "Already have an account? Login",
    },
    validation: {
      phoneRequired: "Phone number is required",
      phoneDigitsOnly: "Phone number must contain only digits",
      passwordRequired: "Password is required",
      passwordMinLength: "Password must be at least 6 characters",
      nameRequired: "Name is required",
      emailRequired: "Email is required",
    },
    errors: {
      invalidCredentials: "Invalid credentials",
      networkError: "Network error, please try again",
      unknownError: "An unknown error occurred",
    },
  },
  restaurant: {
    list: {
      title: "Restaurants",
      search: "Search restaurants...",
      filter: "Filter",
      sort: "Sort",
      noResults: "No restaurants found",
      open: "Open Now",
      closed: "Closed",
    },
    detail: {
      menu: "Menu",
      reviews: "Reviews",
      info: "Information",
      photos: "Photos",
      address: "Address",
      hours: "Opening Hours",
      phone: "Phone",
      website: "Website",
      reserve: "Make Reservation",
      directions: "Get Directions",
    },
    filters: {
      price: "Price",
      cuisine: "Cuisine",
      distance: "Distance",
      rating: "Rating",
      openNow: "Open Now",
    },
    menu: {
      starters: "Starters",
      mainCourse: "Main Course",
      desserts: "Desserts",
      drinks: "Drinks",
      specials: "Specials",
      popular: "Popular Items",
    },
    reviews: {
      write: "Write a Review",
      rating: "Rating",
      comment: "Comment",
      submit: "Submit Review",
      helpful: "Helpful",
      report: "Report",
    },
  },
  reservations: {
    new: {
      title: "New Reservation",
      date: "Date",
      time: "Time",
      party: "Party Size",
      notes: "Special Requests",
      confirm: "Confirm Reservation",
      termsAgree: "I agree to the booking terms and conditions",
    },
    list: {
      title: "My Reservations",
      upcoming: "Upcoming",
      past: "Past",
      cancelled: "Cancelled",
      noUpcoming: "No upcoming reservations",
      noPast: "No past reservations",
    },
    details: {
      title: "Reservation Details",
      restaurant: "Restaurant",
      date: "Date",
      time: "Time",
      party: "Party Size",
      status: "Status",
      notes: "Special Requests",
      cancel: "Cancel Reservation",
      modify: "Modify Reservation",
      directions: "Get Directions",
      contact: "Contact Restaurant",
    },
    status: {
      confirmed: "Confirmed",
      pending: "Pending",
      cancelled: "Cancelled",
      completed: "Completed",
      noShow: "No Show",
    },
    cancel: {
      title: "Cancel Reservation",
      confirm: "Are you sure you want to cancel this reservation?",
      reason: "Reason for cancellation",
      policy: "Cancellation Policy",
      submit: "Submit Cancellation",
    },
  },
  merchant: {
    dashboard: {
      title: "Dashboard",
      overview: "Overview",
      today: "Today",
      reservations: "Reservations",
      tables: "Tables",
      seating: "Seating View",
      revenue: "Revenue",
      customers: "Customers",
    },
    tables: {
      title: "Table Management",
      tableNumber: "Table Number",
      capacity: "Capacity",
      status: "Status",
      empty: "Empty",
      occupied: "Occupied",
      reserved: "Reserved",
      addTable: "Add Table",
      editTable: "Edit Table",
      deleteTable: "Delete Table",
    },
    reservations: {
      title: "Reservations",
      calendar: "Calendar View",
      list: "List View",
      grid: "Grid View",
      smart: "Smart View",
      mailbox: "Inbox",
      new: "New Reservation",
      noReservations: "No reservations found",
    },
    settings: {
      title: "Settings",
      profile: "Restaurant Profile",
      hours: "Business Hours",
      menu: "Menu Management",
      staff: "Staff Management",
      notifications: "Notifications",
      payment: "Payment Methods",
      seating: "Seating Layout",
      account: "Account Settings",
    },
  },
  settings: {
    title: "Settings",
    account: {
      title: "Account Settings",
      name: "Name",
      email: "Email",
      phone: "Phone Number",
      password: "Change Password",
      language: "Language",
      notifications: "Notifications",
      logout: "Logout",
    },
    appearance: {
      title: "Appearance",
      theme: "Theme",
      light: "Light",
      dark: "Dark",
      system: "System Default",
      fontSize: "Font Size",
    },
    notifications: {
      title: "Notifications",
      push: "Push Notifications",
      email: "Email Notifications",
      sms: "SMS Notifications",
      reservations: "Reservation Updates",
      promotions: "Promotions and Offers",
      system: "System Updates",
    },
    privacy: {
      title: "Privacy",
      dataUsage: "Data Usage",
      location: "Location Services",
      cookies: "Cookies",
      advertising: "Personalized Advertising",
    },
    help: {
      title: "Help & Support",
      faq: "FAQ",
      contact: "Contact Support",
      terms: "Terms of Service",
      privacy: "Privacy Policy",
      about: "About SeatMaster",
    },
  },
};

================
File: src/services/i18n/locales/ja/ja.js
================
export default {
  common: {
    languages: {
      en: "英語",
      ja: "日本語",
      zh: "中国語",
    },
    actions: {
      save: "保存",
      cancel: "キャンセル",
      confirm: "確認",
      delete: "削除",
      edit: "編集",
      view: "表示",
      back: "戻る",
      next: "次へ",
      submit: "送信",
    },
    status: {
      loading: "読み込み中...",
      success: "成功",
      error: "エラー",
      pending: "保留中",
      completed: "完了",
      confirmed: "確認済み",
      cancelled: "キャンセル済み",
    },
    validation: {
      required: "このフィールドは必須です",
      invalidEmail: "有効なメールアドレスを入力してください",
      invalidPhone: "有効な電話番号を入力してください",
      minLength: "{{count}}文字以上である必要があります",
      maxLength: "{{count}}文字以下である必要があります",
      passwordMatch: "パスワードが一致しません",
      invalidInput: "無効な入力",
    },
  },
  auth: {
    login: {
      title: "ログイン",
      phoneNumber: "電話番号",
      password: "パスワード",
      loginButton: "ログイン",
      loggingIn: "ログイン中...",
      noAccount: "アカウントがありませんか？登録する",
      customer: "お客様",
      merchant: "店舗",
      forgotPassword: "パスワードをお忘れですか？",
    },
    signup: {
      title: "新規登録",
      name: "氏名",
      email: "メールアドレス",
      phoneNumber: "電話番号",
      password: "パスワード",
      confirmPassword: "パスワード（確認）",
      signupButton: "登録",
      haveAccount: "すでにアカウントをお持ちですか？ログイン",
    },
    validation: {
      phoneRequired: "電話番号が必要です",
      phoneDigitsOnly: "電話番号は数字のみを含む必要があります",
      passwordRequired: "パスワードが必要です",
      passwordMinLength: "パスワードは6文字以上である必要があります",
      nameRequired: "名前が必要です",
      emailRequired: "メールアドレスが必要です",
    },
    errors: {
      invalidCredentials: "無効な認証情報",
      networkError: "ネットワークエラー、もう一度お試しください",
      unknownError: "不明なエラーが発生しました",
    },
  },
  restaurant: {
    list: {
      title: "レストラン",
      search: "レストランを検索...",
      filter: "フィルター",
      sort: "並び替え",
      noResults: "レストランが見つかりません",
      open: "営業中",
      closed: "閉店",
    },
    detail: {
      menu: "メニュー",
      reviews: "レビュー",
      info: "情報",
      photos: "写真",
      address: "住所",
      hours: "営業時間",
      phone: "電話番号",
      website: "ウェブサイト",
      reserve: "予約する",
      directions: "道順を見る",
    },
    filters: {
      price: "価格",
      cuisine: "料理ジャンル",
      distance: "距離",
      rating: "評価",
      openNow: "営業中",
    },
    menu: {
      starters: "前菜",
      mainCourse: "メインコース",
      desserts: "デザート",
      drinks: "ドリンク",
      specials: "おすすめ",
      popular: "人気商品",
    },
    reviews: {
      write: "レビューを書く",
      rating: "評価",
      comment: "コメント",
      submit: "レビューを送信",
      helpful: "役に立った",
      report: "報告する",
    },
  },
  reservations: {
    new: {
      title: "新規予約",
      date: "日付",
      time: "時間",
      party: "人数",
      notes: "特別リクエスト",
      confirm: "予約を確定",
      termsAgree: "予約規約に同意します",
    },
    list: {
      title: "予約一覧",
      upcoming: "今後の予約",
      past: "過去の予約",
      cancelled: "キャンセル済み",
      noUpcoming: "今後の予約はありません",
      noPast: "過去の予約はありません",
    },
    details: {
      title: "予約詳細",
      restaurant: "レストラン",
      date: "日付",
      time: "時間",
      party: "人数",
      status: "ステータス",
      notes: "特別リクエスト",
      cancel: "予約をキャンセル",
      modify: "予約を変更",
      directions: "道順を見る",
      contact: "レストランに連絡",
    },
    status: {
      confirmed: "確認済み",
      pending: "保留中",
      cancelled: "キャンセル済み",
      completed: "完了",
      noShow: "無断キャンセル",
    },
    cancel: {
      title: "予約のキャンセル",
      confirm: "この予約をキャンセルしてもよろしいですか？",
      reason: "キャンセルの理由",
      policy: "キャンセルポリシー",
      submit: "キャンセルを送信",
    },
  },
  merchant: {
    dashboard: {
      title: "ダッシュボード",
      overview: "概要",
      today: "今日",
      reservations: "予約",
      tables: "テーブル",
      seating: "座席表示",
      revenue: "売上",
      customers: "顧客",
    },
    tables: {
      title: "テーブル管理",
      tableNumber: "テーブル番号",
      capacity: "収容人数",
      status: "状態",
      empty: "空席",
      occupied: "使用中",
      reserved: "予約済み",
      addTable: "テーブルを追加",
      editTable: "テーブルを編集",
      deleteTable: "テーブルを削除",
    },
    reservations: {
      title: "予約",
      calendar: "カレンダー表示",
      list: "リスト表示",
      grid: "グリッド表示",
      smart: "スマート表示",
      mailbox: "受信箱",
      new: "新規予約",
      noReservations: "予約が見つかりません",
    },
    settings: {
      title: "設定",
      profile: "レストランプロフィール",
      hours: "営業時間",
      menu: "メニュー管理",
      staff: "スタッフ管理",
      notifications: "通知",
      payment: "支払い方法",
      seating: "座席レイアウト",
      account: "アカウント設定",
    },
  },
  settings: {
    title: "設定",
    account: {
      title: "アカウント設定",
      name: "名前",
      email: "メール",
      phone: "電話番号",
      password: "パスワード変更",
      language: "言語",
      notifications: "通知",
      logout: "ログアウト",
    },
    appearance: {
      title: "外観",
      theme: "テーマ",
      light: "ライト",
      dark: "ダーク",
      system: "システムデフォルト",
      fontSize: "フォントサイズ",
    },
    notifications: {
      title: "通知",
      push: "プッシュ通知",
      email: "メール通知",
      sms: "SMS通知",
      reservations: "予約アップデート",
      promotions: "プロモーションとオファー",
      system: "システムアップデート",
    },
    privacy: {
      title: "プライバシー",
      dataUsage: "データ使用",
      location: "位置情報サービス",
      cookies: "クッキー",
      advertising: "パーソナライズド広告",
    },
    help: {
      title: "ヘルプ＆サポート",
      faq: "よくある質問",
      contact: "サポートに連絡",
      terms: "利用規約",
      privacy: "プライバシーポリシー",
      about: "SeatMasterについて",
    },
  },
};

================
File: src/services/i18n/locales/zh/zh.js
================
export default {
  common: {
    languages: {
      en: "英文",
      ja: "日文",
      zh: "中文",
    },
    actions: {
      save: "保存",
      cancel: "取消",
      confirm: "确认",
      delete: "删除",
      edit: "编辑",
      view: "查看",
      back: "返回",
      next: "下一步",
      submit: "提交",
    },
    status: {
      loading: "加载中...",
      success: "成功",
      error: "错误",
      pending: "待处理",
      completed: "已完成",
      confirmed: "已确认",
      cancelled: "已取消",
    },
    validation: {
      required: "此字段为必填项",
      invalidEmail: "请输入有效的电子邮件地址",
      invalidPhone: "请输入有效的电话号码",
      minLength: "必须至少有{{count}}个字符",
      maxLength: "必须最多有{{count}}个字符",
      passwordMatch: "密码不匹配",
      invalidInput: "无效输入",
    },
  },
  auth: {
    login: {
      title: "登录",
      phoneNumber: "电话号码",
      password: "密码",
      loginButton: "登录",
      loggingIn: "正在登录...",
      noAccount: "没有账户？注册",
      customer: "顾客",
      merchant: "商家",
      forgotPassword: "忘记密码？",
    },
    signup: {
      title: "注册",
      name: "姓名",
      email: "电子邮件",
      phoneNumber: "电话号码",
      password: "密码",
      confirmPassword: "确认密码",
      signupButton: "注册",
      haveAccount: "已有账户？登录",
    },
    validation: {
      phoneRequired: "电话号码为必填项",
      phoneDigitsOnly: "电话号码只能包含数字",
      passwordRequired: "密码为必填项",
      passwordMinLength: "密码必须至少6个字符",
      nameRequired: "姓名为必填项",
      emailRequired: "电子邮件为必填项",
    },
    errors: {
      invalidCredentials: "无效的凭据",
      networkError: "网络错误，请重试",
      unknownError: "发生未知错误",
    },
  },
  restaurant: {
    list: {
      title: "餐厅",
      search: "搜索餐厅...",
      filter: "筛选",
      sort: "排序",
      noResults: "未找到餐厅",
      open: "营业中",
      closed: "已关闭",
    },
    detail: {
      menu: "菜单",
      reviews: "评价",
      info: "信息",
      photos: "照片",
      address: "地址",
      hours: "营业时间",
      phone: "电话",
      website: "网站",
      reserve: "预订",
      directions: "获取路线",
    },
    filters: {
      price: "价格",
      cuisine: "菜系",
      distance: "距离",
      rating: "评分",
      openNow: "营业中",
    },
    menu: {
      starters: "前菜",
      mainCourse: "主菜",
      desserts: "甜点",
      drinks: "饮品",
      specials: "特色菜",
      popular: "热门菜品",
    },
    reviews: {
      write: "写评价",
      rating: "评分",
      comment: "评论",
      submit: "提交评价",
      helpful: "有帮助",
      report: "举报",
    },
  },
  reservations: {
    new: {
      title: "新预订",
      date: "日期",
      time: "时间",
      party: "人数",
      notes: "特殊要求",
      confirm: "确认预订",
      termsAgree: "我同意预订条款和条件",
    },
    list: {
      title: "我的预订",
      upcoming: "即将到来",
      past: "过去的",
      cancelled: "已取消",
      noUpcoming: "没有即将到来的预订",
      noPast: "没有过去的预订",
    },
    details: {
      title: "预订详情",
      restaurant: "餐厅",
      date: "日期",
      time: "时间",
      party: "人数",
      status: "状态",
      notes: "特殊要求",
      cancel: "取消预订",
      modify: "修改预订",
      directions: "获取路线",
      contact: "联系餐厅",
    },
    status: {
      confirmed: "已确认",
      pending: "待确认",
      cancelled: "已取消",
      completed: "已完成",
      noShow: "未到场",
    },
    cancel: {
      title: "取消预订",
      confirm: "您确定要取消此预订吗？",
      reason: "取消原因",
      policy: "取消政策",
      submit: "提交取消",
    },
  },
  merchant: {
    dashboard: {
      title: "仪表板",
      overview: "概览",
      today: "今天",
      reservations: "预订",
      tables: "餐桌",
      seating: "座位视图",
      revenue: "收入",
      customers: "顾客",
    },
    tables: {
      title: "餐桌管理",
      tableNumber: "餐桌号",
      capacity: "容量",
      status: "状态",
      empty: "空闲",
      occupied: "已占用",
      reserved: "已预订",
      addTable: "添加餐桌",
      editTable: "编辑餐桌",
      deleteTable: "删除餐桌",
    },
    reservations: {
      title: "预订",
      calendar: "日历视图",
      list: "列表视图",
      grid: "网格视图",
      smart: "智能视图",
      mailbox: "收件箱",
      new: "新预订",
      noReservations: "未找到预订",
    },
    settings: {
      title: "设置",
      profile: "餐厅档案",
      hours: "营业时间",
      menu: "菜单管理",
      staff: "员工管理",
      notifications: "通知",
      payment: "支付方式",
      seating: "座位布局",
      account: "账户设置",
    },
  },
  settings: {
    title: "设置",
    account: {
      title: "账户设置",
      name: "姓名",
      email: "电子邮件",
      phone: "电话号码",
      password: "更改密码",
      language: "语言",
      notifications: "通知",
      logout: "退出登录",
    },
    appearance: {
      title: "外观",
      theme: "主题",
      light: "浅色",
      dark: "深色",
      system: "系统默认",
      fontSize: "字体大小",
    },
    notifications: {
      title: "通知",
      push: "推送通知",
      email: "电子邮件通知",
      sms: "短信通知",
      reservations: "预订更新",
      promotions: "促销和优惠",
      system: "系统更新",
    },
    privacy: {
      title: "隐私",
      dataUsage: "数据使用",
      location: "位置服务",
      cookies: "cookies",
      advertising: "个性化广告",
    },
    help: {
      title: "帮助与支持",
      faq: "常见问题",
      contact: "联系支持",
      terms: "服务条款",
      privacy: "隐私政策",
      about: "关于SeatMaster",
    },
  },
};

================
File: src/services/i18n/index.js
================
import i18n from "i18next";
import { initReactI18next } from "react-i18next";
import intervalPlural from "i18next-intervalplural-postprocessor";
import * as RNLocalize from "react-native-localize";
import en from "./locales/en/en";
import ja from "./locales/ja/ja";
import zh from "./locales/zh/zh";
const resources = {
  en: {
    common: en.common,
    auth: en.auth,
    restaurant: en.restaurant,
  },
  ja: {
    common: ja.common,
    auth: ja.auth,
    restaurant: ja.restaurant,
  },
  zh: {
    common: zh.common,
    auth: zh.auth,
    restaurant: zh.restaurant,
  },
};
const deviceLanguage = RNLocalize.getLocales()[0].languageCode;
const supportedLanguages = ["en", "ja", "zh"];
i18n
  .use(initReactI18next)
  .use(intervalPlural)
  .init({
    resources,
    lng: supportedLanguages.includes(deviceLanguage) ? deviceLanguage : "en",
    fallbackLng: "en",
    ns: ["common", "auth", "restaurant", "reservations", "settings"],
    defaultNS: "common",
    interpolation: {
      escapeValue: false,
    },
  });
export default i18n;

================
File: src/services/AuthenticationContext.js
================
import React, { useState, createContext, useContext } from "react";
export const AuthenticationContext = createContext();
export const AuthenticationContextProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const onLogin = async (username, password, role) => {
    setIsLoading(true);
    setError(null);
    setTimeout(() => {
      if (username === "+1123" && password === "123123") {
        setUser({ username, role });
      } else {
        setError("Invalid credentials");
      }
      setIsLoading(false);
    }, 1000);
  };
  const onRegister = async (username, password, repeatedPassword, role) => {
    setIsLoading(true);
    setError(null);
    if (password !== repeatedPassword) {
      setError("Passwords do not match");
      setIsLoading(false);
      return;
    }
    setTimeout(() => {
      setUser({ username, role });
      setIsLoading(false);
    }, 1000);
  };
  const onLogout = () => {
    setUser(null);
  };
  return (
    <AuthenticationContext.Provider
      value={{
        user,
        isAuthenticated: !!user,
        isLoading,
        error,
        onLogin,
        onRegister,
        onLogout,
      }}
    >
      {children}
    </AuthenticationContext.Provider>
  );
};
export const useAuthentication = () => useContext(AuthenticationContext);

================
File: src/services/LanguageContext.js
================
import React, { createContext, useState, useContext, useEffect } from "react";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useTranslation } from "react-i18next";
export const LanguageContext = createContext();
export const LanguageContextProvider = ({ children }) => {
  const { i18n } = useTranslation();
  const [currentLanguage, setCurrentLanguage] = useState(i18n.language);
  const [isLoading, setIsLoading] = useState(true);
  useEffect(() => {
    loadSavedLanguage();
  }, []);
  const loadSavedLanguage = async () => {
    try {
      const savedLanguage = await AsyncStorage.getItem("userLanguage");
      if (savedLanguage) {
        setCurrentLanguage(savedLanguage);
      }
    } catch (error) {
      console.error("Failed to load language preference:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const changeLanguage = async (languageCode) => {
    try {
      setCurrentLanguage(languageCode);
      await i18n.changeLanguage(languageCode);
      await AsyncStorage.setItem("userLanguage", languageCode);
    } catch (error) {
      console.error("Failed to save language preference:", error);
    }
  };
  return (
    <LanguageContext.Provider
      value={{
        currentLanguage,
        changeLanguage,
        isLoading,
      }}
    >
      {children}
    </LanguageContext.Provider>
  );
};
export const useLanguage = () => useContext(LanguageContext);

================
File: src/services/ReservationContext.js
================
import React, { createContext, useState, useContext, useEffect } from "react";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { format } from "date-fns";
import { Alert } from "react-native";
export const ReservationContext = createContext();
export const ReservationProvider = ({ children }) => {
  const [reservations, setReservations] = useState([]);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    loadReservations();
  }, []);
  useEffect(() => {
    if (!loading) {
      saveReservations();
    }
  }, [reservations]);
  const loadReservations = async () => {
    try {
      const jsonValue = await AsyncStorage.getItem("@reservations");
      const savedReservations = jsonValue ? JSON.parse(jsonValue) : [];
      const formattedReservations = savedReservations.map((reservation) => ({
        ...reservation,
        date: new Date(reservation.date),
      }));
      setReservations(formattedReservations);
    } catch (error) {
      console.error("Failed to load reservations:", error);
      Alert.alert("Error", "Failed to load your reservations");
    } finally {
      setLoading(false);
    }
  };
  const saveReservations = async () => {
    try {
      const formattedReservations = reservations.map((reservation) => ({
        ...reservation,
        date:
          reservation.date instanceof Date
            ? reservation.date.toISOString()
            : reservation.date,
      }));
      await AsyncStorage.setItem(
        "@reservations",
        JSON.stringify(formattedReservations)
      );
    } catch (error) {
      console.error("Failed to save reservations:", error);
    }
  };
  const addReservation = (reservationData) => {
    const id = Math.floor(Math.random() * 1000000).toString();
    const newReservation = {
      ...reservationData,
      id,
      status: "confirmed",
      createdAt: new Date().toISOString(),
    };
    setReservations((prev) => [...prev, newReservation]);
    return newReservation;
  };
  const cancelReservation = (reservationId) => {
    return new Promise((resolve, reject) => {
      try {
        setReservations((prevReservations) =>
          prevReservations.map((res) =>
            res.id === reservationId ? { ...res, status: "cancelled" } : res
          )
        );
        resolve(true);
      } catch (error) {
        console.error("Error cancelling reservation:", error);
        reject(error);
      }
    });
  };
  const updateReservation = (reservationId, updatedData) => {
    return new Promise((resolve, reject) => {
      try {
        setReservations((prevReservations) =>
          prevReservations.map((res) =>
            res.id === reservationId ? { ...res, ...updatedData } : res
          )
        );
        resolve(true);
      } catch (error) {
        console.error("Error updating reservation:", error);
        reject(error);
      }
    });
  };
  const getUpcomingReservations = () => {
    const now = new Date();
    return reservations
      .filter((res) => {
        const resDate = new Date(res.date);
        return (
          res.status !== "cancelled" &&
          (resDate > now ||
            (resDate.getDate() === now.getDate() &&
              resDate.getMonth() === now.getMonth() &&
              resDate.getFullYear() === now.getFullYear() &&
              parseInt(res.time.split(":")[0]) >= now.getHours()))
        );
      })
      .sort((a, b) => new Date(a.date) - new Date(b.date));
  };
  const getPastReservations = () => {
    const now = new Date();
    return reservations
      .filter((res) => {
        const resDate = new Date(res.date);
        return (
          res.status !== "cancelled" &&
          (resDate < now ||
            (resDate.getDate() === now.getDate() &&
              resDate.getMonth() === now.getMonth() &&
              resDate.getFullYear() === now.getFullYear() &&
              parseInt(res.time.split(":")[0]) < now.getHours()))
        );
      })
      .sort((a, b) => new Date(b.date) - new Date(a.date));
  };
  const getCancelledReservations = () => {
    return reservations
      .filter((res) => res.status === "cancelled")
      .sort((a, b) => new Date(b.date) - new Date(a.date));
  };
  return (
    <ReservationContext.Provider
      value={{
        isLoading: loading,
        reservations,
        addReservation,
        cancelReservation,
        updateReservation,
        getUpcomingReservations,
        getPastReservations,
        getCancelledReservations,
      }}
    >
      {children}
    </ReservationContext.Provider>
  );
};
export const useReservation = () => useContext(ReservationContext);

================
File: .cursorignore
================
# Add directories or file patterns to ignore during indexing (e.g. foo/ or *.csv)
assets/
android/
node_modules/

================
File: .gitignore
================
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

.vscode

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
ios/
android/

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

# @generated expo-cli sync-2b81b286409207a5da26e14c78851eb30d8ccbdb
# The following patterns were generated by expo-cli

expo-env.d.ts
# @end expo-cli

================
File: App.js
================
import React from "react";
import { theme } from "./src/infrastructure/theme";
import { ThemeProvider } from "styled-components/native";
import { AuthenticationContextProvider } from "./src/services/AuthenticationContext";
import { LanguageContextProvider } from "./src/services/LanguageContext";
import { ReservationProvider } from "./src/services/ReservationContext";
import { Navigation } from "./src/infrastructure/navigation";
import { StatusBar as ExpoStatusBar } from "expo-status-bar";
import "./src/services/i18n";
export default function App() {
  return (
    <>
      <LanguageContextProvider>
        <AuthenticationContextProvider>
          <ReservationProvider>
            {}
            <ThemeProvider theme={theme}>
              <Navigation />
            </ThemeProvider>
          </ReservationProvider>
        </AuthenticationContextProvider>
      </LanguageContextProvider>
      <ExpoStatusBar style="auto" />
    </>
  );
}

================
File: app.json
================
{
  "expo": {
    "name": "seat-master-js",
    "slug": "seat-master-js",
    "version": "1.0.0",
    "assetBundlePatterns": [
      "**/*"
    ],
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "splash": {
      "image": "./assets/images/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.vickerszhu.seatmasterjs"
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "package": "com.vickerszhu.seatmasterjs"
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-image-picker",
        {
          "photosPermission": "The app needs access to your photos to upload restaurant images.",
          "cameraPermission": "The app needs access to your camera to take restaurant photos."
        }
      ],
      "expo-asset",
      "expo-font"
    ],
    "experiments": {
      "typedRoutes": true
    },
    "extra": {
      "router": {
        "origin": false
      },
      "eas": {
        "projectId": "c6d8ffc4-9bc2-4f22-a564-ff0301c850a4"
      }
    }
  }
}

================
File: babel.config.js
================
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo']
  };
};

================
File: eas.json
================
{
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal"
    },
    "production": {}
  }
}

================
File: metro.config.js
================
const { getDefaultConfig } = require('expo/metro-config');
const defaultConfig = getDefaultConfig(__dirname);
defaultConfig.resolver.assetExts.push('glb', 'gltf');
module.exports = defaultConfig;

================
File: package.json
================
{
  "name": "seat-master-js",
  "main": "node_modules/expo/AppEntry.js",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "rebuild-ios": "node scripts/rebuild-ios.js"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.0.2",
    "@react-native-async-storage/async-storage": "^2.1.2",
    "@react-navigation/bottom-tabs": "^6.4.1",
    "@react-navigation/native": "^6.1.18",
    "@react-navigation/stack": "^6.4.1",
    "date-fns": "^4.1.0",
    "expo": "^52.0.42",
    "expo-asset": "~11.0.5",
    "expo-dev-client": "~5.0.17",
    "expo-file-system": "~18.0.12",
    "expo-font": "~13.0.4",
    "expo-gl": "~15.0.5",
    "expo-image-picker": "~16.0.6",
    "expo-linear-gradient": "~14.0.2",
    "expo-linking": "~7.0.5",
    "expo-router": "~4.0.19",
    "expo-splash-screen": "~0.29.22",
    "expo-status-bar": "~2.0.1",
    "expo-system-ui": "~4.0.9",
    "expo-web-browser": "~14.0.2",
    "firebase": "^11.1.0",
    "formik": "^2.4.6",
    "i18next": "^24.2.3",
    "i18next-intervalplural-postprocessor": "^3.0.0",
    "minimist": "^1.2.8",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-i18next": "^15.4.1",
    "react-native": "~0.77.1",
    "react-native-asset": "^2.1.1",
    "react-native-collapsible-tab-view": "^8.0.0",
    "react-native-dropdown-picker": "^5.4.6",
    "react-native-fs": "^2.20.0",
    "react-native-gesture-handler": "~2.22.0",
    "react-native-localize": "^3.4.1",
    "react-native-pager-view": "6.5.1",
    "react-native-paper": "^5.12.3",
    "react-native-reanimated": "~3.16.7",
    "react-native-safe-area-context": "~5.1.0",
    "react-native-screens": "~4.8.0",
    "react-native-static-server": "^0.5.0",
    "react-native-svg": "15.8.0",
    "react-native-tab-view": "^4.0.1",
    "react-native-web": "~0.19.10",
    "react-native-webview": "~13.13.1",
    "react-native-webview-autoheight": "^1.0.6",
    "react-promise-suspense": "^0.3.4",
    "styled-components": "^6.1.12",
    "yup": "^1.5.0"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@types/react": "~18.3.12",
    "@types/react-native": "^0.73.0",
    "depcheck": "^1.4.7",
    "jest": "^29.2.1",
    "jest-expo": "~52.0.6",
    "react-test-renderer": "18.2.0",
    "typescript": "~5.3.3"
  },
  "private": true
}

================
File: repomix-bundle.txt
================
// Generated by rpmix on 2025-04-14T06:13:26.833Z

// File: src/infrastructure/theme/spacing.js
export const lineHeights = {
    title: '28px',
    copy: '20px',
  };
  
  export const space = ['0px', '4px', '8px', '16px', '32px', '64px'];
  

// File: src/infrastructure/theme/sizes.js
export const sizes = ['8px', '16px', '32px', '64px', '128px'];


// File: src/infrastructure/theme/index.js
import { colors } from './colors';
import { sizes } from './sizes';
import { space, lineHeights } from './spacing';
import { fonts, fontWeights, fontSizes } from './fonts';

export const theme = {
  colors,
  sizes,
  space,
  lineHeights,
  fonts,
  fontSizes,
  fontWeights,
};


// File: src/infrastructure/theme/fonts.js
export const fonts = {
  body: "Oswald_400Regular",
  heading: "Lato_400Regular",
  monospace: "Oswald_400Regular",
};

export const fontWeights = {
  regular: 400,
  medium: 500,
  bold: 700,
};

export const fontSizes = {
  caption: "12px",
  button: "14px",
  body: "16px",
  title: "20px",
  h5: "24px",
  h4: "34px",
  h3: "45px",
  h2: "56px",
  h1: "112px",
};


// File: src/infrastructure/theme/colors.js
export const colors = {
  brand: {
    primary: "#FFFFFF",
    secondary: "#757575",
    muted: "#C6DAF7",
  },
  ui: {
    primary: "#262626",
    secondary: "#757575",
    tertiary: "#F1F1F1",
    quaternary: "#FFFFFF",
    disabled: "#DEDEDE",
    error: "#D0421B",
    success: "#138000",
  },
  bg: {
    primary: "#FFFFFF",
    secondary: "#F1F1F1",
  },
  text: {
    primary: "#262626",
    secondary: "#757575",
    disabled: "#9C9C9C",
    inverse: "#FFFFFF",
    error: "#D0421B",
    success: "#138000",
  },
};


// File: src/features/customer/reservations/screens/ReservationFlow.js
// src/features/customer/reservations/screens/ReservationFlow.js
import React, { useState, useEffect, useRef, useCallback } from "react";
import {
  View,
  ScrollView,
  TouchableOpacity,
  Alert,
  FlatList,
} from "react-native";
import { MaterialIcons } from "@expo/vector-icons";
import { format, addDays, isSameDay, getDay } from "date-fns";
import { useNavigation, useRoute } from "@react-navigation/native";
import { CustomText } from "../../../../components/CustomText/CustomText";
import ReservationLayoutView from "../components/ReservationLayoutView";
import { TimeScroll } from "../../../../components/TimeScroll/TimeScroll";
import { Separator } from "../../../../components/Separator/Separator";
import { Spacer } from "../../../../components/Spacer/Spacer";
import { generateTimeSlots } from "../../../merchant/reservations/utils/timeUtils";
import * as Styles from "./ReservationFlow.styles";
import { BackButton } from "../../../../components/BackButton/BackButton";

const getDayAvailability = (date) => {
  const day = getDay(date);
  if (day === 0 || day === 6) return "medium";
  if (day === 1) return "unavailable";
  return "high";
};

const getWeekdayName = (date) => {
  const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  return days[getDay(date)];
};

const ReservationFlow = () => {
  const navigation = useNavigation();
  const route = useRoute();
  const { restaurant, existingReservation } = route.params || {};

  const dateScrollRef = useRef(null);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [partySize, setPartySize] = useState(2);
  const [availableTimes, setAvailableTimes] = useState([]);
  const [selectedTime, setSelectedTime] = useState(null);
  const [showLayout, setShowLayout] = useState(false);
  const [selectedChairs, setSelectedChairs] = useState([]);
  const [notes, setNotes] = useState("");
  const [availability, setAvailability] = useState("high");
  const [scrollEnabled, setScrollEnabled] = useState(true);
  const [duration, setDuration] = useState(90);

  // Pre-fill form with existing reservation data if available
  useEffect(() => {
    if (existingReservation) {
      // Parse the date string to a Date object
      if (existingReservation.date) {
        try {
          const date = new Date(existingReservation.date);
          setSelectedDate(date);
        } catch (e) {
          console.error("Failed to parse date:", e);
        }
      }

      // Set party size
      if (existingReservation.people) {
        setPartySize(existingReservation.people);
      }

      // Set time
      if (existingReservation.time) {
        setSelectedTime(existingReservation.time);
      }

      // Set notes
      if (existingReservation.note) {
        setNotes(existingReservation.note);
      }

      // Set selected chairs
      if (existingReservation.chairs && existingReservation.chairs.length > 0) {
        setSelectedChairs(existingReservation.chairs);
        setShowLayout(true);
      }

      // Set duration
      if (existingReservation.duration) {
        setDuration(existingReservation.duration);
      }
    }
  }, [existingReservation]);

  // Generate dates for selection
  const generateDates = useCallback(() => {
    const dates = [];
    const today = new Date();
    for (let i = 0; i < 60; i++) {
      const date = addDays(today, i);
      const availability = getDayAvailability(date);
      dates.push({
        date,
        label: i === 0 ? "Today" : i === 1 ? "Tomorrow" : format(date, "MMM d"),
        weekday: getWeekdayName(date),
        availability,
        isUnavailable: availability === "unavailable",
      });
    }
    return dates;
  }, []);

  // Generate party size options based on restaurant settings
  const generatePartySizeOptions = useCallback(() => {
    const maxPartySize = restaurant?.settings?.maxReservationSize || 20;
    return Array.from({ length: maxPartySize }, (_, i) => i + 1);
  }, [restaurant?.settings?.maxReservationSize]);

  const [dateOptions] = useState(generateDates);
  const [partySizeOptions] = useState(generatePartySizeOptions);

  // Update available time slots based on selected date
  useEffect(() => {
    const allSlots = generateTimeSlots();
    const dayOfWeek = getDay(selectedDate);
    let filteredTimes;

    // Different hours for weekends vs weekdays
    if (dayOfWeek === 0 || dayOfWeek === 6) {
      // Weekend
      filteredTimes = allSlots.filter((time) => {
        const hour = parseInt(time.split(":")[0]);
        return hour >= 10 && hour <= 22;
      });
    } else {
      // Weekday
      filteredTimes = allSlots.filter((time) => {
        const hour = parseInt(time.split(":")[0]);
        return hour >= 11 && hour <= 21;
      });
    }

    setAvailableTimes(filteredTimes);

    // Set default time if none selected or current selection isn't available
    if (!selectedTime || !filteredTimes.includes(selectedTime)) {
      const defaultTimeIndex = Math.floor(filteredTimes.length / 2);
      setSelectedTime(filteredTimes[defaultTimeIndex]);
    }
  }, [selectedDate]);

  // Update availability and duration based on party size and time
  useEffect(() => {
    if (!selectedTime) return;

    const hour = parseInt(selectedTime.split(":")[0]);

    // Determine availability level based on party size and time
    if (partySize > 10) {
      setAvailability("low");
    } else if ((hour >= 18 && hour <= 20) || partySize > 6) {
      setAvailability("medium");
    } else {
      setAvailability("high");
    }

    // Set duration based on party size
    if (partySize >= 8) {
      setDuration(120);
    } else if (partySize >= 4) {
      setDuration(90);
    } else {
      setDuration(60);
    }
  }, [selectedTime, partySize]);

  // Reset chair selection when party size or time changes
  useEffect(() => {
    // Only reset chairs if the user hasn't explicitly chosen seats
    if (!existingReservation) {
      setSelectedChairs([]);
    }
  }, [partySize, selectedTime]);

  // Handlers for interaction with the 3D layout
  const handleInteractionStart = useCallback(() => {
    setScrollEnabled(false);
  }, []);

  const handleInteractionEnd = useCallback(() => {
    setScrollEnabled(true);
  }, []);

  // Handle chair selection from the 3D layout
  const handleChairSelection = useCallback((chairIds) => {
    if (chairIds) {
      setSelectedChairs(chairIds.split(","));
      console.log("Selected chairs in reserv flow:", chairIds.split(","));
    } else {
      setSelectedChairs([]);
    }
  }, []);

  // Generate a unique reservation ID
  const generateReservationId = () => {
    return Math.floor(Math.random() * 10000) + 1;
  };

  // Handle the reservation submission
  const handleReservePress = useCallback(() => {
    if (!selectedDate || !selectedTime) {
      Alert.alert(
        "Missing Information",
        "Please select a date and time for your reservation."
      );
      return;
    }

    // Validate chair selection if layout is shown
    if (showLayout && selectedChairs.length > 0) {
      if (selectedChairs.length < partySize) {
        Alert.alert(
          "Seat Selection Required",
          `Please select ${partySize} seats. You have selected ${selectedChairs.length}.`
        );
        return;
      }
    }

    const customerName = "Current User";
    const reservationDetails = {
      id: existingReservation?.id || generateReservationId(),
      customerName,
      restaurant: restaurant,
      date: format(selectedDate, "yyyy-MM-dd"),
      time: selectedTime,
      people: partySize,
      duration: duration,
      status: "confirmed",
      note: notes,
    };

    // Include chair information if chairs were selected
    if (selectedChairs.length > 0) {
      reservationDetails.chairs = selectedChairs;
    } else {
      reservationDetails.autoAssigned = true;
    }

    // Determine if this is a new or modified reservation
    const isModification = !!existingReservation;
    const title = isModification
      ? "Reservation Updated!"
      : "Reservation Confirmed!";
    const message = `Your reservation for ${partySize} ${
      partySize > 1 ? "people" : "person"
    } at ${selectedTime} on ${format(selectedDate, "EEE, MMM d")} has been ${
      isModification ? "updated" : "confirmed"
    }.${
      selectedChairs.length === 0
        ? "\n\nYour seats will be assigned upon arrival."
        : ""
    }`;

    // Confirm the reservation
    Alert.alert(title, message, [
      {
        text: "OK",
        onPress: () => {
          // Navigate back to the Reservations screen
          navigation.navigate("ReservationsScreen");
        },
      },
    ]);
  }, [
    selectedDate,
    selectedTime,
    partySize,
    duration,
    selectedChairs,
    showLayout,
    notes,
    restaurant,
    existingReservation,
    navigation,
  ]);

  // Render availability legend
  const renderAvailabilityLegend = () => (
    <View style={{ flexDirection: "row", marginTop: 8, marginBottom: 16 }}>
      <Styles.AvailabilityRow>
        <View
          style={{
            width: 10,
            height: 10,
            borderRadius: 5,
            backgroundColor: "#4CAF50",
            marginRight: 4,
          }}
        />
        <Styles.AvailabilityText>High</Styles.AvailabilityText>
      </Styles.AvailabilityRow>
      <Styles.AvailabilityRow style={{ marginLeft: 12 }}>
        <View
          style={{
            width: 10,
            height: 10,
            borderRadius: 5,
            backgroundColor: "#FFC107",
            marginRight: 4,
          }}
        />
        <Styles.AvailabilityText>Limited</Styles.AvailabilityText>
      </Styles.AvailabilityRow>
      <Styles.AvailabilityRow style={{ marginLeft: 12 }}>
        <View
          style={{
            width: 10,
            height: 10,
            borderRadius: 5,
            backgroundColor: "#F44336",
            marginRight: 4,
          }}
        />
        <Styles.AvailabilityText>Few spots</Styles.AvailabilityText>
      </Styles.AvailabilityRow>
    </View>
  );

  return (
    <Styles.Container scrollEnabled={scrollEnabled}>
      <Styles.HeaderContainer>
        <CustomText variant="h4">
          {existingReservation ? "Modify Reservation" : "Make a Reservation"}
        </CustomText>
      </Styles.HeaderContainer>

      {/* Date Selector */}
      <Styles.DateSelectorContainer>
        <Styles.SectionTitle>Date</Styles.SectionTitle>
        <Styles.DateItemsContainer>
          <FlatList
            ref={dateScrollRef}
            horizontal
            showsHorizontalScrollIndicator={false}
            data={dateOptions}
            keyExtractor={(item, index) => `date-${index}`}
            renderItem={({ item }) => (
              <Styles.DateOption
                selected={isSameDay(selectedDate, item.date)}
                unavailable={item.isUnavailable}
                onPress={() =>
                  !item.isUnavailable && setSelectedDate(item.date)
                }
              >
                <Styles.DateText selected={isSameDay(selectedDate, item.date)}>
                  {item.label}
                </Styles.DateText>
                <Styles.WeekdayText
                  selected={isSameDay(selectedDate, item.date)}
                >
                  {item.weekday}
                </Styles.WeekdayText>
                {!item.isUnavailable && (
                  <Styles.AvailabilityIndicator
                    level={item.availability}
                    selected={isSameDay(selectedDate, item.date)}
                  />
                )}
              </Styles.DateOption>
            )}
            initialNumToRender={7}
            maxToRenderPerBatch={10}
          />
        </Styles.DateItemsContainer>
      </Styles.DateSelectorContainer>

      {/* Party Size Selector */}
      <Styles.PartySelectorContainer>
        <Styles.SectionTitle>Party Size</Styles.SectionTitle>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          <Styles.PartyOptionsContainer>
            {partySizeOptions.map((size) => (
              <Styles.PartyOption
                key={`size-${size}`}
                selected={partySize === size}
                onPress={() => setPartySize(size)}
              >
                <Styles.PartyText selected={partySize === size}>
                  {size}
                </Styles.PartyText>
              </Styles.PartyOption>
            ))}
          </Styles.PartyOptionsContainer>
        </ScrollView>
      </Styles.PartySelectorContainer>

      {/* Time Selector */}
      <Styles.TimeContainer>
        <Styles.SectionTitle>Time</Styles.SectionTitle>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          <Styles.TimeOptionsContainer>
            {availableTimes.map((time, index) => {
              const hour = parseInt(time.split(":")[0]);
              let timeAvailability = "high";
              if (hour >= 18 && hour <= 20) {
                timeAvailability = "medium";
              } else if (hour === 21) {
                timeAvailability = "low";
              }
              return (
                <Styles.TimeOption
                  key={`time-${index}`}
                  selected={selectedTime === time}
                  availability={timeAvailability}
                  onPress={() => setSelectedTime(time)}
                >
                  <Styles.TimeText selected={selectedTime === time}>
                    {time}
                  </Styles.TimeText>
                  <Styles.TimeAvailabilityIndicator
                    level={timeAvailability}
                    selected={selectedTime === time}
                  />
                </Styles.TimeOption>
              );
            })}
          </Styles.TimeOptionsContainer>
        </ScrollView>
        {renderAvailabilityLegend()}
      </Styles.TimeContainer>

      <Separator type="full" />

      {/* Seat Selection Toggle */}
      <Styles.ToggleButton onPress={() => setShowLayout(!showLayout)}>
        <MaterialIcons
          name={showLayout ? "visibility-off" : "visibility"}
          size={24}
          color="#262626"
        />
        <Styles.ToggleText>
          {showLayout ? "Hide Seating Layout" : "Select Your Seats"}
        </Styles.ToggleText>
      </Styles.ToggleButton>

      {/* 3D Layout for Seat Selection */}
      {showLayout && (
        <Styles.LayoutContainer>
          <ReservationLayoutView
            onTableSelect={handleChairSelection}
            partySize={partySize}
            selectedTime={selectedTime}
            selectedDate={format(selectedDate, "yyyy-MM-dd")}
            onInteractionStart={handleInteractionStart}
            onInteractionEnd={handleInteractionEnd}
          />
        </Styles.LayoutContainer>
      )}

      {/* Special Requests */}
      <Styles.SectionTitle>Special Requests (Optional)</Styles.SectionTitle>
      <Styles.NotesInput
        multiline
        placeholder="Add any special requests or dietary requirements..."
        value={notes}
        onChangeText={setNotes}
        textAlignVertical="top"
      />

      {/* Reserve Button */}
      <Styles.ReserveButton onPress={handleReservePress}>
        <Styles.ReserveButtonText>
          {existingReservation ? "Update Reservation" : "Reserve Now"}
        </Styles.ReserveButtonText>
      </Styles.ReserveButton>

      <View style={{ height: 40 }} />
    </Styles.Container>
  );
};

export default ReservationFlow;


// File: /Users/vickerszhu/Projects/seat-master-js/src/components/CustomText/CustomText.js
import { Text } from "react-native";
import styled from "styled-components";

const defaultTextStyles = (theme) => `
  font-family: ${theme.fonts.body};
  font-weight: ${theme.fontWeights.regular};
  color: ${theme.colors.text.primary};
  flex-wrap: wrap;
  margin-top: 0px;
  margin-bottom: 0px;
`;
const title = (theme) => `
  font-size: ${theme.fontSizes.title};
  font-weight: ${theme.fontWeights.medium};
`;
const h5 = (theme) => `
  font-size: ${theme.fontSizes.h5};
`;
const h4 = (theme) => `
  font-size: ${theme.fontSizes.h4};
`;
const h3 = (theme) => `
  font-size: ${theme.fontSizes.h3};
`;
const h2 = (theme) => `
  font-size: ${theme.fontSizes.h2};
`;
const h1 = (theme) => `
  font-size: ${theme.fontSizes.h1};
`;

const body = (theme) => `
  font-size: ${theme.fontSizes.body};
`;

const hint = (theme) => `
  font-size: ${theme.fontSizes.body};
`;

const error = (theme) => `
  color: ${theme.colors.text.error};
`;

const caption = (theme) => `
  font-size: ${theme.fontSizes.caption};
  font-weight: ${theme.fontWeights.bold};
`;

const label = (theme) => `
  font-family: ${theme.fonts.heading};
  font-size: ${theme.fontSizes.body};
  font-weight: ${theme.fontWeights.medium};
`;

const variants = {
  body,
  hint,
  error,
  label,
  caption,
  title,
  h5,
  h4,
  h3,
  h2,
  h1,
};

export const CustomText = styled(Text)`
  ${({ theme }) => defaultTextStyles(theme)};
  ${({ variant, theme }) => variants[variant](theme)};
`;

CustomText.defaultProps = {
  variant: "body",
};


// File: /Users/vickerszhu/Projects/seat-master-js/src/features/customer/reservations/components/ReservationLayoutView.js
// src/features/customer/reservations/components/ReservationLayoutView.js
import React, { useState, useEffect, useCallback } from "react";
import { View, TouchableOpacity, Alert } from "react-native";
import styled from "styled-components/native";
import { MaterialIcons } from "@expo/vector-icons";
import { CustomText } from "../../../../components/CustomText/CustomText";
import WebApp from "../../../../components/WebApp/WebApp";
import ErrorBoundary from "../../../../components/ErrorBoundary/ErrorBoundary";

const Container = styled.View`
  min-height: 250px;
  margin-bottom: ${(props) => props.theme.space[3]};
  border-radius: 8px;
  overflow: hidden;
  background-color: ${(props) => props.theme.colors.bg.secondary};
`;

const InfoBar = styled.View`
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.ui.tertiary};
`;

const InfoText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  color: ${(props) => props.theme.colors.text.secondary};
`;

const PartyLimitText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  color: ${(props) => props.theme.colors.text.error};
  font-weight: bold;
`;

const SelectedSeats = styled(CustomText)`
  font-weight: ${(props) => props.theme.fontWeights.bold};
  color: ${(props) => props.theme.colors.text.primary};
`;

const LegendContainer = styled.View`
  flex-direction: row;
  flex-wrap: wrap;
  padding: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.bg.primary};
  border-top-width: 1px;
  border-top-color: ${(props) => props.theme.colors.ui.tertiary};
`;

const LegendItem = styled.View`
  flex-direction: row;
  align-items: center;
  margin-right: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[1]};
`;

const LegendColor = styled.View`
  width: 12px;
  height: 12px;
  border-radius: 6px;
  margin-right: ${(props) => props.theme.space[1]};
  background-color: ${(props) => props.color};
`;

const LegendText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
`;

/**
 * ReservationLayoutView component for selecting seats in the restaurant layout
 *
 * @param {Object} props - Component props
 * @param {Function} props.onTableSelect - Callback function when seats are selected
 * @param {number} props.partySize - Number of people in the party
 * @param {string} props.selectedTime - Selected reservation time (e.g. "19:00")
 * @param {string} props.selectedDate - Selected reservation date (formatted as YYYY-MM-DD)
 * @param {Function} props.onInteractionStart - Callback when interaction with layout starts
 * @param {Function} props.onInteractionEnd - Callback when interaction with layout ends
 * @returns {JSX.Element} The reservation layout component
 */
const ReservationLayoutView = ({
  onTableSelect,
  partySize,
  selectedTime,
  selectedDate,
  onInteractionStart,
  onInteractionEnd,
}) => {
  // State to track selected seats
  const [selectedItems, setSelectedItems] = useState([]);

  // Reset selections when party size changes
  useEffect(() => {
    setSelectedItems([]);
    if (onTableSelect) {
      onTableSelect(null);
    }
  }, [partySize, onTableSelect]);

  /**
   * Handle selection of chairs/seats from the WebApp
   * @param {Array} items - Array of selected seat IDs
   */
  const handleWebAppSelection = useCallback(
    (items) => {
      // Handle party size limitations
      if (items.length > partySize) {
        // Keep the most recent selections up to the party size limit
        const limitedItems = items.slice(-partySize);

        // Notify user about the limit
        Alert.alert(
          "Selection Limit Reached",
          `You can only select ${partySize} ${
            partySize === 1 ? "seat" : "seats"
          } based on your party size.`
        );

        // Update internal state
        setSelectedItems(limitedItems);

        // Notify parent component about selected items
        if (onTableSelect) {
          onTableSelect(limitedItems.join(","));
        }
      } else {
        // Normal selection within limits
        setSelectedItems(items);

        // Notify parent component
        if (items.length > 0 && onTableSelect) {
          onTableSelect(items.join(","));
        } else if (onTableSelect) {
          onTableSelect(null);
        }
      }
    },
    [partySize, onTableSelect]
  );

  return (
    <Container>
      <InfoBar>
        <InfoText>
          Preview available seats for {partySize}{" "}
          {partySize === 1 ? "person" : "people"} at {selectedTime}
        </InfoText>
        {selectedItems.length > 0 ? (
          <SelectedSeats>
            Selected: {selectedItems.join(", ")}
            {selectedItems.length < partySize &&
              ` (${partySize - selectedItems.length} more needed)`}
          </SelectedSeats>
        ) : (
          <PartyLimitText>Please select up to {partySize} seats</PartyLimitText>
        )}
      </InfoBar>

      <ErrorBoundary>
        <WebApp
          onInteractionStart={onInteractionStart}
          onInteractionEnd={onInteractionEnd}
          selectedItems={selectedItems}
          onSelectedItemsChange={handleWebAppSelection}
        />
      </ErrorBoundary>

      <LegendContainer>
        <LegendItem>
          <LegendColor color="#4CAF50" />
          <LegendText>Selected</LegendText>
        </LegendItem>
        <LegendItem>
          <LegendColor color="#F44336" />
          <LegendText>Occupied</LegendText>
        </LegendItem>
        <LegendItem>
          <LegendColor color="#FFC107" />
          <LegendText>Reserved</LegendText>
        </LegendItem>
      </LegendContainer>
    </Container>
  );
};

export default ReservationLayoutView;


// File: /Users/vickerszhu/Projects/seat-master-js/src/components/WebApp/WebApp.js
// src/components/WebApp/WebApp.js
import React, { useEffect, useRef, useState, useCallback } from "react";
import { View, ActivityIndicator } from "react-native";
import { WebView } from "react-native-webview";
import styled from "styled-components/native";
import useStaticServer from "./useStaticServer";
import {
  Container,
  StyledWebView,
  Footer,
  SelectedText,
  CancelButton,
  CancelButtonText,
} from "./styles";

const WebApp = ({
  onInteractionStart,
  onInteractionEnd,
  onSelectedItemsChange,
  selectedItems: initialSelectedItems = [],
}) => {
  const serverUrl = useStaticServer();
  const webViewRef = useRef(null);
  const [webViewHeight, setWebViewHeight] = useState(200);
  const [internalSelectedItems, setInternalSelectedItems] =
    useState(initialSelectedItems);
  const [occupiedItems, setOccupiedItems] = useState(["CHAIR1", "CHAIR4"]);
  const [isServerReady, setIsServerReady] = useState(false);
  const [currentModel, setCurrentModel] = useState("kitchen");
  const [availableItems, setAvailableItems] = useState([]);
  const [isInitialized, setIsInitialized] = useState(false);

  useEffect(() => {
    if (serverUrl) {
      setIsServerReady(true);
    }
  }, [serverUrl]);

  const cancelSelection = () => {
    setInternalSelectedItems([]);
    if (onSelectedItemsChange) {
      onSelectedItemsChange([]);
    }
  };

  const sendItemsToWebView = useCallback(() => {
    if (webViewRef.current) {
      const script = `
        (function() {
          if (window.updateItems) {
            window.updateItems({
              selectedItems: ${JSON.stringify(internalSelectedItems)},
              occupiedItems: ${JSON.stringify(occupiedItems)}
            });
          }
        })();
        true;
      `;
      webViewRef.current.injectJavaScript(script);
    }
  }, [internalSelectedItems, occupiedItems]);

  useEffect(() => {
    if (isInitialized) {
      sendItemsToWebView();
    }
  }, [internalSelectedItems, occupiedItems, sendItemsToWebView, isInitialized]);

  const handleWebViewLoaded = useCallback(() => {
    setIsInitialized(true);
    setTimeout(() => {
      sendItemsToWebView();
    }, 300);
  }, [sendItemsToWebView]);

  const changeRestaurantModel = useCallback(
    (modelKey) => {
      if (webViewRef.current) {
        const script = `
        (function() {
          if (window.changeRestaurantModel) {
            window.changeRestaurantModel('${modelKey}');
          }
        })();
        true;
      `;
        webViewRef.current.injectJavaScript(script);
        setCurrentModel(modelKey);
        setInternalSelectedItems([]);
        if (onSelectedItemsChange) {
          onSelectedItemsChange([]);
        }
      }
    },
    [onSelectedItemsChange]
  );

  const handleWebViewMessage = useCallback(
    (event) => {
      try {
        const messageData = JSON.parse(event.nativeEvent.data);
        switch (messageData.type) {
          case "itemClicked":
            if (occupiedItems.includes(messageData.id)) {
              return;
            }

            const newSelectedItems = internalSelectedItems.includes(
              messageData.id
            )
              ? internalSelectedItems.filter((id) => id !== messageData.id)
              : [...internalSelectedItems, messageData.id];

            setInternalSelectedItems(newSelectedItems);
            if (onSelectedItemsChange) {
              onSelectedItemsChange(newSelectedItems);
            }
            break;

          case "contentHeight":
            const height = Number(messageData.height);
            if (height > 0 && height !== webViewHeight) {
              setWebViewHeight(height);
            }
            break;

          case "interactionStart":
            if (onInteractionStart) {
              onInteractionStart();
            }
            break;

          case "interactionEnd":
            if (onInteractionEnd) {
              onInteractionEnd();
            }
            break;

          case "modelChanged":
            setAvailableItems(messageData.availableItems || []);
            setCurrentModel(messageData.modelKey);
            setInternalSelectedItems([]);
            if (onSelectedItemsChange) {
              onSelectedItemsChange([]);
            }
            break;

          case "webViewReady":
            handleWebViewLoaded();
            console.log("WebView is ready");
            break;

          default:
            console.warn("Unhandled message type:", messageData.type);
        }
      } catch (error) {
        console.error("Failed to parse message from WebView:", error);
      }
    },
    [
      occupiedItems,
      webViewHeight,
      onInteractionStart,
      onInteractionEnd,
      onSelectedItemsChange,
      internalSelectedItems,
    ]
  );

  return (
    <View style={{ flex: 1 }}>
      {isServerReady ? (
        <Container height={webViewHeight}>
          <StyledWebView
            ref={webViewRef}
            source={{ uri: serverUrl }}
            scrollEnabled={false}
            cacheEnabled={false}
            cacheMode="LOAD_NO_CACHE"
            incognito={true}
            thirdPartyCookiesEnabled={false}
            originWhitelist={["*"]}
            onError={(syntheticEvent) => {
              const { nativeEvent } = syntheticEvent;
              console.warn("WebView error: ", nativeEvent);
            }}
            onMessage={handleWebViewMessage}
            onLoadEnd={() => {
              sendItemsToWebView();
            }}
          />
        </Container>
      ) : (
        <View
          style={{ flex: 1, justifyContent: "center", alignItems: "center" }}
        >
          <ActivityIndicator size="large" color="#0000ff" />
        </View>
      )}
      <Footer>
        <SelectedText>
          Selected Items: {internalSelectedItems.join(", ") || "None"}
        </SelectedText>
        <CancelButton onPress={cancelSelection}>
          <CancelButtonText>Cancel Selection</CancelButtonText>
        </CancelButton>
      </Footer>
    </View>
  );
};

export default WebApp;


// File: /Users/vickerszhu/Projects/seat-master-js/src/components/WebApp/useStaticServer.js
// src/components/WebApp/useStaticServer.js
import { useEffect, useState } from "react";
import StaticServer from "react-native-static-server";
import RNFS from "react-native-fs";

const useStaticServer = () => {
  const [url, setUrl] = useState("");

  useEffect(() => {
    let server = null;

    const startServer = async () => {
      const path = `${RNFS.MainBundlePath}/3d_build`; // Ensure this path exists and contains your web app
      console.log(`Inner webapp path verified: ${path}`);

      // Generate a random port between 8000 and 9000 to avoid caching issues
      const randomPort = Math.floor(Math.random() * 1000) + 8000;

      // Add a cache-busting timestamp query parameter
      const timestamp = Date.now();

      server = new StaticServer(randomPort, path, { localOnly: true });
      try {
        let serverUrl = await server.start();
        // Append cache-busting parameter
        serverUrl = `${serverUrl}?t=${timestamp}`;
        setUrl(serverUrl);
        console.log(`Server hosting at: ${serverUrl}`);
      } catch (error) {
        console.error("Failed to start server:", error);
      }
    };

    startServer();

    // Cleanup: stop the server when the component unmounts
    return () => {
      if (server) {
        server.stop();
      }
    };
  }, []);

  return url;
};

export default useStaticServer;


// File: /Users/vickerszhu/Projects/seat-master-js/src/components/WebApp/styles.js
// src/components/WebApp/styles.js
import styled from "styled-components/native";
import { WebView } from "react-native-webview";
import { TouchableOpacity, Text, View } from "react-native";

// Container for WebView with dynamic height
export const Container = styled.View`
  width: 100%;
  height: ${({ height }) => height}px;
  background-color: ${({ theme }) => theme.colors.bg.primary};
`;

// Styled WebView
export const StyledWebView = styled(WebView)`
  flex: 1;
  width: 100%;
`;

// Footer container
export const Footer = styled.View`
  padding: ${({ theme }) => theme.space[3]};
  background-color: ${({ theme }) => theme.colors.ui.tertiary};
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
`;

// Text displaying selected chairs
export const SelectedText = styled(Text)`
  flex: 1;
  margin-right: ${({ theme }) => theme.space[2]};
  color: ${({ theme }) => theme.colors.text.primary};
  font-size: ${({ theme }) => theme.fontSizes.body};
  font-family: ${({ theme }) => theme.fonts.body};
`;

// Cancel button
export const CancelButton = styled(TouchableOpacity)`
  padding: ${({ theme }) => theme.space[2]};
  background-color: ${({ theme }) => theme.colors.ui.error};
  border-radius: 4px;
`;

// Text inside the Cancel button
export const CancelButtonText = styled(Text)`
  color: ${({ theme }) => theme.colors.text.inverse};
  font-size: ${({ theme }) => theme.fontSizes.button};
  font-family: ${({ theme }) => theme.fonts.body};
  text-align: center;
`;


// File: /Users/vickerszhu/Projects/seat-master-js/src/components/ErrorBoundary/ErrorBoundary.js
// components/ErrorBoundary.js
import React from "react";
import { TouchableOpacity } from "react-native";
import styled from "styled-components/native";

/**
 * ErrorBoundary Component
 * Catches JavaScript errors in its child component tree, logs those errors,
 * and displays a fallback UI instead of the component tree that crashed.
 */
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  /**
   * Update state so the next render will show the fallback UI.
   * @param {Error} error - The error that was thrown.
   */
  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  /**
   * You can also log the error to an error reporting service.
   * @param {Error} error - The error that was thrown.
   * @param {Object} errorInfo - Additional information about the error.
   */
  componentDidCatch(error, errorInfo) {
    this.setState({ errorInfo });
    // Example: Log error to an external service
    console.error("ErrorBoundary caught an error:", error, errorInfo);
    // You can integrate services like Sentry or Bugsnag here.
  }

  /**
   * Optionally, provide a method to reset the error state.
   */
  resetError = () => {
    this.setState({ hasError: false, error: null, errorInfo: null });
  };

  render() {
    if (this.state.hasError) {
      // Render any custom fallback UI
      return (
        <ErrorContainer>
          <ErrorTitle>Something went wrong.</ErrorTitle>
          <ErrorMessage>
            We're sorry for the inconvenience. Please try again later.
          </ErrorMessage>
          {/* Optional: Button to reset the error state */}
          <RetryButton onPress={this.resetError}>
            <RetryButtonText>Try Again</RetryButtonText>
          </RetryButton>
          {/* Optional: Display error details in development mode */}
          {__DEV__ && this.state.errorInfo && (
            <ErrorDetails>
              <ErrorDetailsTitle>Error Details:</ErrorDetailsTitle>
              <ErrorDetailsText>{this.state.error.toString()}</ErrorDetailsText>
              <ErrorDetailsText>
                {this.state.errorInfo.componentStack}
              </ErrorDetailsText>
            </ErrorDetails>
          )}
        </ErrorContainer>
      );
    }

    // If no error, render children components normally
    return this.props.children;
  }
}

// Styled Components for the ErrorBoundary UI
const ErrorContainer = styled.View`
  flex: 1;
  justify-content: center;
  align-items: center;
  padding: ${({ theme }) => theme.space[3]};
  background-color: ${({ theme }) => theme.colors.bg.secondary};
`;

const ErrorTitle = styled.Text`
  font-size: ${({ theme }) => theme.fontSizes.title};
  font-weight: ${({ theme }) => theme.fontWeights.bold};
  color: ${({ theme }) => theme.colors.text.error};
  margin-bottom: ${({ theme }) => theme.space[2]};
`;

const ErrorMessage = styled.Text`
  font-size: ${({ theme }) => theme.fontSizes.body};
  color: ${({ theme }) => theme.colors.text.primary};
  text-align: center;
  margin-bottom: ${({ theme }) => theme.space[3]};
`;

const RetryButton = styled(TouchableOpacity)`
  padding-vertical: ${({ theme }) => theme.space[2]};
  padding-horizontal: ${({ theme }) => theme.space[3]};
  background-color: ${({ theme }) => theme.colors.ui.primary};
  border-radius: 5px;
`;

const RetryButtonText = styled.Text`
  font-size: ${({ theme }) => theme.fontSizes.button};
  color: ${({ theme }) => theme.colors.text.inverse};
  font-weight: ${({ theme }) => theme.fontWeights.bold};
`;

const ErrorDetails = styled.View`
  margin-top: ${({ theme }) => theme.space[3]};
  padding: ${({ theme }) => theme.space[2]};
  background-color: #f8d7da;
  border-radius: 5px;
`;

const ErrorDetailsTitle = styled.Text`
  font-size: ${({ theme }) => theme.fontSizes.body};
  font-weight: ${({ theme }) => theme.fontWeights.bold};
  color: ${({ theme }) => theme.colors.text.error};
  margin-bottom: ${({ theme }) => theme.space[1]};
`;

const ErrorDetailsText = styled.Text`
  font-size: ${({ theme }) => theme.fontSizes.caption};
  color: ${({ theme }) => theme.colors.text.error};
`;

export default ErrorBoundary;


// File: /Users/vickerszhu/Projects/seat-master-js/src/components/TimeScroll/TimeScroll.js
// src/components/TimeScroll/TimeScroll.js
import React, { useRef } from "react";
import styled from "styled-components/native";
import { Animated } from "react-native";
import { LinearGradient } from "expo-linear-gradient";

const ITEM_HEIGHT = 50;
const VISIBLE_ITEMS = 5;
const CONTAINER_HEIGHT = ITEM_HEIGHT * VISIBLE_ITEMS;
const CONTAINER_WIDTH = 60;
const PADDING_VERTICAL = (CONTAINER_HEIGHT - ITEM_HEIGHT) / 2;

const Container = styled.View`
  height: ${CONTAINER_HEIGHT}px;
  width: ${CONTAINER_WIDTH}px;
  background-color: ${(props) => props.theme.colors.bg.secondary};
  overflow: hidden;
  border-radius: 30px;
  position: relative;
`;

const StyledAnimatedItem = styled(Animated.View)`
  height: ${ITEM_HEIGHT}px;
  justify-content: center;
  align-items: center;
`;

const TimeText = styled.Text`
  color: ${(props) => props.theme.colors.text.primary};
  font-size: 18px;
  font-family: ${(props) => props.theme.fonts.body};
`;

export const TimeScroll = ({
  times,
  selectedTime,
  onTimeChange,
  containerHeight = CONTAINER_HEIGHT,
  containerWidth = CONTAINER_WIDTH,
  itemHeight = ITEM_HEIGHT,
  visibleItems = VISIBLE_ITEMS,
}) => {
  const scrollY = useRef(new Animated.Value(0)).current;
  const paddingVertical = (containerHeight - itemHeight) / 2;

  const handleMomentumScrollEnd = (event) => {
    const offsetY = event.nativeEvent.contentOffset.y;
    const index = Math.round(offsetY / itemHeight);
    if (index >= 0 && index < times.length) {
      onTimeChange(times[index]);
    }
  };

  return (
    <Container style={{ height: containerHeight, width: containerWidth }}>
      <Animated.ScrollView
        contentContainerStyle={{ paddingVertical: paddingVertical }}
        showsVerticalScrollIndicator={false}
        snapToInterval={itemHeight}
        decelerationRate="fast"
        bounces={false}
        onMomentumScrollEnd={handleMomentumScrollEnd}
        onScroll={Animated.event(
          [{ nativeEvent: { contentOffset: { y: scrollY } } }],
          { useNativeDriver: true }
        )}
        scrollEventThrottle={16}
      >
        {times.map((time, index) => {
          const inputRange = [
            (index - 1) * itemHeight,
            index * itemHeight,
            (index + 1) * itemHeight,
          ];

          const scale = scrollY.interpolate({
            inputRange,
            outputRange: [0.7, 1, 0.7],
            extrapolate: "clamp",
          });

          const opacity = scrollY.interpolate({
            inputRange,
            outputRange: [0.3, 1, 0.3],
            extrapolate: "clamp",
          });

          const rotateX = scrollY.interpolate({
            inputRange,
            outputRange: ["30deg", "0deg", "-30deg"],
            extrapolate: "clamp",
          });

          return (
            <StyledAnimatedItem
              key={index}
              style={{
                height: itemHeight,
                transform: [{ perspective: 1000 }, { rotateX }, { scale }],
                opacity,
              }}
            >
              <TimeText>{time}</TimeText>
            </StyledAnimatedItem>
          );
        })}
      </Animated.ScrollView>
      {/* Top gradient */}
      <LinearGradient
        colors={["rgba(241,241,241,1)", "rgba(241,241,241,0)"]}
        style={{
          position: "absolute",
          top: 0,
          left: 0,
          right: 0,
          height: 20,
        }}
        pointerEvents="none"
      />
      {/* Bottom gradient */}
      <LinearGradient
        colors={["rgba(241,241,241,0)", "rgba(241,241,241,1)"]}
        style={{
          position: "absolute",
          bottom: 0,
          left: 0,
          right: 0,
          height: 20,
        }}
        pointerEvents="none"
      />
    </Container>
  );
};

export default TimeScroll;


// File: /Users/vickerszhu/Projects/seat-master-js/src/components/Separator/Separator.js
// src/components/Separator/Separator.js

import React from "react";
import PropTypes from "prop-types";
import { SeparatorFull, SeparatorPartial } from "./Separator.styles";

export const Separator = ({ type }) => {
  return type === "full" ? <SeparatorFull /> : <SeparatorPartial />;
};

Separator.propTypes = {
  type: PropTypes.oneOf(["full", "partial"]),
};


// File: /Users/vickerszhu/Projects/seat-master-js/src/components/Separator/Separator.styles.js
// src/components/Separator/Separator.styles.js

import styled from "styled-components/native";

export const SeparatorFull = styled.View`
  height: 1px;
  background-color: rgba(0, 0, 0, 0.1);
  width: 100%;
  margin-vertical: ${(props) => props.theme.space[3]};
`;

export const SeparatorPartial = styled.View`
  height: 1px;
  background-color: rgba(0, 0, 0, 0.1);
  width: 80%;
  margin-vertical: ${(props) => props.theme.space[2]};
  margin-left: 66px;
`;


// File: /Users/vickerszhu/Projects/seat-master-js/src/components/Spacer/Spacer.js
import React from 'react';
import { View } from 'react-native';
import styled, { useTheme } from 'styled-components/native';

const sizeVariant = {
  small: 1,
  medium: 2,
  large: 3,
  xl: 4,
  xxl: 5,
};

const positionVariant = {
  top: 'marginTop',
  left: 'marginLeft',
  right: 'marginRight',
  bottom: 'marginBottom',
};

const getVariant = (position, size, theme) => {
  const sizeIndex = sizeVariant[size];
  const property = positionVariant[position];
  const value = theme.space[sizeIndex];

  return `${property}:${value}`;
};

const SpacerView = styled(View)`
  ${({ variant }) => variant};
`;

export const Spacer = ({ position = 'top', size = 'small', children }) => {
  const theme = useTheme();
  const variant = getVariant(position, size, theme);

  return <SpacerView variant={variant}>{children}</SpacerView>;
};

// File: /Users/vickerszhu/Projects/seat-master-js/src/features/merchant/reservations/utils/timeUtils.js
// src/features/merchant/reservations/utils/timeUtils.js

/**
 * Generate time slots from 9:00 to 22:30 in 30-minute intervals
 * @returns {Array} Array of time strings in format "HH:MM"
 */
export const generateTimeSlots = () => {
  const slots = [];
  for (let hour = 9; hour <= 22; hour++) {
    const hourStr = hour.toString().padStart(2, "0");
    slots.push(`${hourStr}:00`);
    slots.push(`${hourStr}:30`);
  }
  return slots;
};

/**
 * Calculate position of current time indicator in the grid
 * @param {number} timeSlotHeight - Height of a single time slot in pixels
 * @returns {number} Vertical position for the current time indicator
 */
export const calculateCurrentTimePosition = (timeSlotHeight) => {
  const now = new Date();
  const hours = now.getHours();
  const minutes = now.getMinutes();

  // If outside business hours (9AM-10:30PM), return a position that's off-screen
  if (hours < 9 || (hours === 22 && minutes > 30) || hours > 22) {
    return -100;
  }

  const minutesSince9AM = (hours - 9) * 60 + minutes;
  return (minutesSince9AM / 30) * timeSlotHeight;
};

/**
 * Parse a time string into hours and minutes
 * @param {string} timeString - Time in format "HH:MM"
 * @returns {Array} Array containing [hours, minutes] as numbers
 */
export const parseTimeString = (timeString) => {
  return timeString.split(":").map(Number);
};

/**
 * Convert time to minutes since 9AM (start of business day)
 * @param {string} timeString - Time in format "HH:MM"
 * @returns {number} Minutes since 9AM
 */
export const convertToMinutesSince9AM = (timeString) => {
  const [hours, minutes] = parseTimeString(timeString);
  return (hours - 9) * 60 + minutes;
};

/**
 * Calculate time slot index for a given time
 * @param {string} timeString - Time in format "HH:MM"
 * @returns {number} Index in the time slots array
 */
export const getTimeSlotIndex = (timeString) => {
  const minutesSince9AM = convertToMinutesSince9AM(timeString);
  return Math.floor(minutesSince9AM / 30);
};

/**
 * Format a Date object to HH:MM string
 * @param {Date} date - Date object
 * @returns {string} Formatted time string
 */
export const formatTimeFromDate = (date) => {
  const hours = date.getHours().toString().padStart(2, "0");
  const minutes = date.getMinutes().toString().padStart(2, "0");
  return `${hours}:${minutes}`;
};

/**
 * Generate an array of times for the current day in hourly increments
 * @param {number} count - Number of time slots to generate
 * @returns {Array} Array of time strings in format "HH:MM"
 */
export const generateCurrentDayTimes = (count = 5) => {
  let timesArray = [];
  let current = new Date();
  current.setSeconds(0);
  current.setMilliseconds(0);

  // Round to nearest 30 minutes
  const minutes = current.getMinutes();
  current.setMinutes(minutes >= 30 ? 30 : 0);

  for (let i = 0; i < count; i++) {
    timesArray.push(formatTimeFromDate(current));
    current.setMinutes(current.getMinutes() + 30);
  }
  return timesArray;
};


// File: /Users/vickerszhu/Projects/seat-master-js/src/features/customer/reservations/screens/ReservationFlow.styles.js
// src/features/customer/reservations/screens/ReservationFlow.styles.js
import styled from "styled-components/native";
import { CustomText } from "../../../../components/CustomText/CustomText";

export const Container = styled.ScrollView`
  flex: 1;
  background-color: ${(props) => props.theme.colors.bg.primary};
  padding-horizontal: ${(props) => props.theme.space[3]};
`;

export const HeaderContainer = styled.View`
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  margin-top: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[3]};
`;

// Enhanced Date Selector
export const DateSelectorContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;

export const DateItemsContainer = styled.View`
  margin-vertical: ${(props) => props.theme.space[2]};
`;

export const DateOption = styled.TouchableOpacity`
  padding-vertical: ${(props) => props.theme.space[2]};
  padding-horizontal: ${(props) => props.theme.space[3]};
  margin-right: ${(props) => props.theme.space[2]};
  background-color: ${(props) =>
    props.selected
      ? props.theme.colors.ui.primary
      : props.theme.colors.bg.secondary};
  border-radius: 20px;
  min-width: 80px;
  align-items: center;
  ${(props) =>
    props.unavailable &&
    `
    opacity: 0.5;
  `}
  elevation: ${(props) => (props.selected ? 3 : 0)};
  shadow-opacity: ${(props) => (props.selected ? 0.2 : 0)};
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;

export const DateText = styled(CustomText)`
  color: ${(props) =>
    props.selected
      ? props.theme.colors.text.inverse
      : props.theme.colors.text.primary};
  font-size: ${(props) => props.theme.fontSizes.caption};
  font-weight: ${(props) =>
    props.selected
      ? props.theme.fontWeights.bold
      : props.theme.fontWeights.regular};
`;

export const WeekdayText = styled(CustomText)`
  color: ${(props) =>
    props.selected
      ? props.theme.colors.text.inverse
      : props.theme.colors.text.secondary};
  font-size: ${(props) => props.theme.fontSizes.caption};
  margin-top: 2px;
`;

export const AvailabilityIndicator = styled.View`
  width: 6px;
  height: 6px;
  border-radius: 3px;
  margin-top: 2px;
  background-color: ${(props) => {
    if (props.selected) return props.theme.colors.text.inverse;
    switch (props.level) {
      case "high":
        return "#4CAF50";
      case "medium":
        return "#FFC107";
      case "low":
        return "#F44336";
      default:
        return "#BDBDBD";
    }
  }};
`;

// Enhanced Party Size Selector
export const PartySelectorContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;

export const PartyOptionsContainer = styled.View`
  flex-direction: row;
  flex-wrap: wrap;
  margin-top: ${(props) => props.theme.space[2]};
`;

export const PartyOption = styled.TouchableOpacity`
  min-width: 50px;
  height: 50px;
  margin-right: ${(props) => props.theme.space[2]};
  margin-bottom: ${(props) => props.theme.space[2]};
  background-color: ${(props) =>
    props.selected
      ? props.theme.colors.ui.primary
      : props.theme.colors.bg.secondary};
  border-radius: 25px;
  align-items: center;
  justify-content: center;
  elevation: ${(props) => (props.selected ? 3 : 0)};
  shadow-opacity: ${(props) => (props.selected ? 0.2 : 0)};
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;

export const PartyText = styled(CustomText)`
  color: ${(props) =>
    props.selected
      ? props.theme.colors.text.inverse
      : props.theme.colors.text.primary};
  font-size: ${(props) => props.theme.fontSizes.body};
  font-weight: ${(props) =>
    props.selected
      ? props.theme.fontWeights.bold
      : props.theme.fontWeights.regular};
`;

// Enhanced Time Selector
export const TimeContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;

export const TimeOptionsContainer = styled.View`
  flex-direction: row;
  flex-wrap: wrap;
  margin-top: ${(props) => props.theme.space[2]};
`;

export const TimeOption = styled.TouchableOpacity`
  min-width: 80px;
  padding-vertical: ${(props) => props.theme.space[2]};
  padding-horizontal: ${(props) => props.theme.space[2]};
  margin-right: ${(props) => props.theme.space[2]};
  margin-bottom: ${(props) => props.theme.space[2]};
  background-color: ${(props) =>
    props.selected
      ? props.theme.colors.ui.primary
      : props.theme.colors.bg.secondary};
  border-radius: 12px;
  align-items: center;
  justify-content: center;
  ${(props) =>
    props.availability === "low" &&
    `
    border: 1px solid #F44336;
  `}
  ${(props) =>
    props.availability === "medium" &&
    `
    border: 1px solid #FFC107;
  `}
  elevation: ${(props) => (props.selected ? 3 : 0)};
  shadow-opacity: ${(props) => (props.selected ? 0.2 : 0)};
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;

export const TimeText = styled(CustomText)`
  color: ${(props) =>
    props.selected
      ? props.theme.colors.text.inverse
      : props.theme.colors.text.primary};
  font-size: ${(props) => props.theme.fontSizes.body};
  font-weight: ${(props) =>
    props.selected
      ? props.theme.fontWeights.bold
      : props.theme.fontWeights.regular};
`;

export const TimeAvailabilityIndicator = styled.View`
  width: 10px;
  height: 10px;
  border-radius: 5px;
  margin-top: 4px;
  background-color: ${(props) => {
    if (props.selected) return props.theme.colors.text.inverse;
    switch (props.level) {
      case "high":
        return "#4CAF50";
      case "medium":
        return "#FFC107";
      case "low":
        return "#F44336";
      default:
        return "#BDBDBD";
    }
  }};
`;

export const AvailabilityRow = styled.View`
  flex-direction: row;
  align-items: center;
  margin-top: ${(props) => props.theme.space[2]};
`;

export const AvailabilityText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  color: ${(props) => props.theme.colors.text.secondary};
  margin-left: ${(props) => props.theme.space[1]};
`;

// Summary Section
export const SummaryContainer = styled.View`
  margin-bottom: ${(props) => props.theme.space[3]};
`;

export const SummaryBox = styled.View`
  background-color: ${(props) => props.theme.colors.bg.secondary};
  border-radius: 10px;
  padding: ${(props) => props.theme.space[3]};
  margin-bottom: ${(props) => props.theme.space[3]};
`;

export const SummaryRow = styled.View`
  flex-direction: row;
  align-items: center;
  margin-bottom: ${(props) => props.theme.space[2]};
`;

export const SummaryText = styled(CustomText)`
  margin-left: ${(props) => props.theme.space[2]};
  font-size: ${(props) => props.theme.fontSizes.body};
`;

export const ToggleButton = styled.TouchableOpacity`
  flex-direction: row;
  align-items: center;
  padding: ${(props) => props.theme.space[2]};
  background-color: ${(props) => props.theme.colors.bg.secondary};
  border-radius: 8px;
  margin-bottom: ${(props) => props.theme.space[2]};
  elevation: 1;
  shadow-opacity: 0.1;
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;

export const ToggleText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.body};
  margin-left: ${(props) => props.theme.space[2]};
`;

export const LayoutContainer = styled.View`
  min-height: 250px;
  margin-bottom: ${(props) => props.theme.space[3]};
  border-radius: 12px;
  overflow: hidden;
  background-color: ${(props) => props.theme.colors.bg.secondary};
  elevation: 1;
  shadow-opacity: 0.1;
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;

export const NotesInput = styled.TextInput`
  padding: ${(props) => props.theme.space[3]};
  background-color: ${(props) => props.theme.colors.bg.secondary};
  border-radius: 12px;
  margin-bottom: ${(props) => props.theme.space[3]};
  min-height: 100px;
  color: ${(props) => props.theme.colors.text.primary};
  elevation: 1;
  shadow-opacity: 0.1;
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;

export const ReserveButton = styled.TouchableOpacity`
  background-color: ${(props) => props.theme.colors.ui.primary};
  padding: ${(props) => props.theme.space[3]};
  border-radius: 12px;
  align-items: center;
  justify-content: center;
  margin-bottom: ${(props) => props.theme.space[4]};
  elevation: 3;
  shadow-opacity: 0.2;
  shadow-radius: 4px;
  shadow-color: #000;
  shadow-offset: 0px 2px;
`;

export const ReserveButtonText = styled(CustomText)`
  color: ${(props) => props.theme.colors.text.inverse};
  font-size: ${(props) => props.theme.fontSizes.button};
  font-weight: ${(props) => props.theme.fontWeights.bold};
`;

export const SectionTitle = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.body};
  font-weight: ${(props) => props.theme.fontWeights.bold};
  margin-bottom: ${(props) => props.theme.space[2]};
`;

export const InfoText = styled(CustomText)`
  font-size: ${(props) => props.theme.fontSizes.caption};
  color: ${(props) => props.theme.colors.text.secondary};
  margin-bottom: ${(props) => props.theme.space[2]};
  font-style: italic;
`;


// File: /Users/vickerszhu/Projects/seat-master-js/src/components/BackButton/BackButton.js
// src/components/BackButton/BackButton.js
import React from "react";
import { TouchableOpacity } from "react-native";
import { MaterialIcons } from "@expo/vector-icons";
import { useNavigation } from "@react-navigation/native";
import styled from "styled-components/native";

const ButtonWrapper = styled.View`
  position: ${(props) => props.position || "absolute"};
  left: ${(props) => props.theme.space[2]};
  top: ${(props) => props.top || "auto"};
  z-index: 10;
`;

/**
 * A reusable back button component that navigates to the previous screen
 *
 * @param {Object} props - Component props
 * @param {Function} props.onPress - Optional custom onPress function
 * @param {string} props.position - Optional position style, defaults to "absolute"
 * @param {string} props.top - Optional top position, defaults to "auto"
 * @param {number} props.size - Optional icon size, defaults to 24
 * @param {string} props.color - Optional icon color, defaults to "#262626"
 * @returns {React.Component} BackButton component
 */
export const BackButton = ({
  onPress,
  position,
  top,
  size = 24,
  color = "#262626",
}) => {
  const navigation = useNavigation();

  const handlePress = () => {
    if (onPress) {
      onPress();
    } else {
      navigation.goBack();
    }
  };

  return (
    <ButtonWrapper position={position} top={top}>
      <TouchableOpacity onPress={handlePress}>
        <MaterialIcons name="arrow-back" size={size} color={color} />
      </TouchableOpacity>
    </ButtonWrapper>
  );
};

================
File: repomix.config.js
================
module.exports = {
  alwaysInclude: ["src/infrastructure/theme"],
  ignore: ["node_modules/**", "tests/**", "**/*.test.ts", "**/*.spec.ts"],
  outputFile: "repomix-bundle.txt",
  maxDepth: 5,
  verbose: false,
};

================
File: repomix.config.json
================
{
  "include": ["src/**/*", "*.*"],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": ["**/*.log", "node_modules/**/*"]
  },
  "output": {
    "style": "plain",
    "filePath": "repomix-output.txt",
    "removeComments": true,
    "showLineNumbers": false,
    "topFilesLength": 0,
    "removeEmptyLines": true,
    "copyToClipboard": true,
    "git": {
      "sortByChanges": true
    }
  }
}

================
File: tsconfig.json
================
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "jsx": "react-jsx",
    "strict": true,
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts"
  ]
}



================================================================
End of Codebase
================================================================
