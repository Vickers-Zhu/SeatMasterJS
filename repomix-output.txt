This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix. The content has been processed where comments have been removed, empty lines have been removed, line numbers have been added.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/**/*, *.*
- Files matching these patterns are excluded: **/*.log, node_modules/**/*
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Line numbers have been added to the beginning of each line

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  components/
    BackButton/
      BackButton.js
    CustomText/
      CustomText.js
    ErrorBoundary/
      ErrorBoundary.js
    FadeInView/
      FadeInView.js
    Favourite/
      Favourite.js
    GlobalWrapper/
      GlobalWrapper.js
    LanguageSelector/
      LanguageSelector.js
    SafeArea/
      SafeArea.js
    Separator/
      Separator.js
      Separator.styles.js
    Spacer/
      Spacer.js
    Switch/
      Switch.js
      Switch.styles.js
      SwitchAlternate.styles.js
    TimeScroll/
      TimeScroll.js
    WebApp/
      styles.js
      useStaticServer.js
      WebApp.js
  data/
    mockData.js
    mockEditRestaurantData.js
  features/
    auth/
      components/
        CountryListItem.js
        CountryListItem.styles.js
        LoginDropDownPicker.js
        LoginDropDownPicker.styles.js
      screens/
        LoginScreen.js
        LoginScreen.styles.js
    customer/
      reservations/
        components/
          PastReservationCard.js
          PastReservationCard.styles.js
          ReservationCard.js
          ReservationCard.styles.js
          ReservationLayoutView.js
        screens/
          ReservationFlow.js
          ReservationsScreen.js
      restaurants/
        components/
          Others.js
          RestaurantInfoCard.js
          RestaurantInfoCard.styles.js
          RestaurantList.styles.js
          RestaurantMenu.js
          RestaurantTabBar.js
          Reviews.js
          Search.js
          TabNavigation.js
        hooks/
          useReservationHandler.js
          useScrollHandler.js
        screens/
          RestaurantDetailScreen.js
          RestaurantsScreen.js
      settings/
        screens/
          AccountSettingsScreen.js
          AccountSettingsScreen.styles.js
          SettingsScreen.js
    merchant/
      dashboard/
        components/
          CounterSeats.js
          SeatView.js
          SharedTableStyles.styles.js
          TableMatrix.js
        screens/
          MerchantHomeScreen.js
      reservations/
        components/
          ReservationComponents.js
          ReservationComponents.styles.js
          ReservationsGrid.js
          ReservationsMailbox.js
        screens/
          MerchantReservationsScreen.js
        utils/
          timeUtils.js
      settings/
        components/
          EditButton.js
        screens/
          MerchantProfileScreen.js
          MerchantProfileScreen.styles.js
          MerchantSettingsScreen.js
          RestaurantEditScreen.js
          RestaurantEditScreen.styles.js
  infrastructure/
    navigation/
      AppNavigator.js
      AuthNavigator.js
      CheckoutNavigator.js
      index.js
      MerchantNavigator.js
      ReservationsNavigator.js
      RestaurantsNavigator.js
      SettingsNavigator.js
    options/
      GlobalScreenOptions.js
    theme/
      colors.js
      fonts.js
      index.js
      sizes.js
      spacing.js
  services/
    i18n/
      locales/
        en/
          en.js
        ja/
          ja.js
        zh/
          zh.js
      index.js
    AuthenticationContext.js
    LanguageContext.js
    ReservationContext.js
.cursorignore
.gitignore
App.js
app.json
babel.config.js
eas.json
metro.config.js
package.json
repomix.config.json
tsconfig.json

================================================================
Files
================================================================

================
File: src/components/BackButton/BackButton.js
================
 1: import React from "react";
 2: import { TouchableOpacity } from "react-native";
 3: import { MaterialIcons } from "@expo/vector-icons";
 4: import { useNavigation } from "@react-navigation/native";
 5: import styled from "styled-components/native";
 6: const ButtonWrapper = styled.View`
 7:   position: ${(props) => props.position || "absolute"};
 8:   left: ${(props) => props.theme.space[2]};
 9:   top: ${(props) => props.top || "auto"};
10:   z-index: 10;
11: `;
12: export const BackButton = ({
13:   onPress,
14:   position,
15:   top,
16:   size = 24,
17:   color = "#262626",
18: }) => {
19:   const navigation = useNavigation();
20:   const handlePress = () => {
21:     if (onPress) {
22:       onPress();
23:     } else {
24:       navigation.goBack();
25:     }
26:   };
27:   return (
28:     <ButtonWrapper position={position} top={top}>
29:       <TouchableOpacity onPress={handlePress}>
30:         <MaterialIcons name="arrow-back" size={size} color={color} />
31:       </TouchableOpacity>
32:     </ButtonWrapper>
33:   );
34: };

================
File: src/components/CustomText/CustomText.js
================
 1: import { Text } from "react-native";
 2: import styled from "styled-components";
 3: const defaultTextStyles = (theme) => `
 4:   font-family: ${theme.fonts.body};
 5:   font-weight: ${theme.fontWeights.regular};
 6:   color: ${theme.colors.text.primary};
 7:   flex-wrap: wrap;
 8:   margin-top: 0px;
 9:   margin-bottom: 0px;
10: `;
11: const title = (theme) => `
12:   font-size: ${theme.fontSizes.title};
13:   font-weight: ${theme.fontWeights.medium};
14: `;
15: const h5 = (theme) => `
16:   font-size: ${theme.fontSizes.h5};
17: `;
18: const h4 = (theme) => `
19:   font-size: ${theme.fontSizes.h4};
20: `;
21: const h3 = (theme) => `
22:   font-size: ${theme.fontSizes.h3};
23: `;
24: const h2 = (theme) => `
25:   font-size: ${theme.fontSizes.h2};
26: `;
27: const h1 = (theme) => `
28:   font-size: ${theme.fontSizes.h1};
29: `;
30: const body = (theme) => `
31:   font-size: ${theme.fontSizes.body};
32: `;
33: const hint = (theme) => `
34:   font-size: ${theme.fontSizes.body};
35: `;
36: const error = (theme) => `
37:   color: ${theme.colors.text.error};
38: `;
39: const caption = (theme) => `
40:   font-size: ${theme.fontSizes.caption};
41:   font-weight: ${theme.fontWeights.bold};
42: `;
43: const label = (theme) => `
44:   font-family: ${theme.fonts.heading};
45:   font-size: ${theme.fontSizes.body};
46:   font-weight: ${theme.fontWeights.medium};
47: `;
48: const variants = {
49:   body,
50:   hint,
51:   error,
52:   label,
53:   caption,
54:   title,
55:   h5,
56:   h4,
57:   h3,
58:   h2,
59:   h1,
60: };
61: export const CustomText = styled(Text)`
62:   ${({ theme }) => defaultTextStyles(theme)};
63:   ${({ variant, theme }) => variants[variant](theme)};
64: `;
65: CustomText.defaultProps = {
66:   variant: "body",
67: };

================
File: src/components/ErrorBoundary/ErrorBoundary.js
================
 1: import React from "react";
 2: import { TouchableOpacity } from "react-native";
 3: import styled from "styled-components/native";
 4: class ErrorBoundary extends React.Component {
 5:   constructor(props) {
 6:     super(props);
 7:     this.state = { hasError: false, error: null, errorInfo: null };
 8:   }
 9:   static getDerivedStateFromError(error) {
10:     return { hasError: true, error };
11:   }
12:   componentDidCatch(error, errorInfo) {
13:     this.setState({ errorInfo });
14:     console.error("ErrorBoundary caught an error:", error, errorInfo);
15:   }
16:   resetError = () => {
17:     this.setState({ hasError: false, error: null, errorInfo: null });
18:   };
19:   render() {
20:     if (this.state.hasError) {
21:       return (
22:         <ErrorContainer>
23:           <ErrorTitle>Something went wrong.</ErrorTitle>
24:           <ErrorMessage>
25:             We're sorry for the inconvenience. Please try again later.
26:           </ErrorMessage>
27:           {}
28:           <RetryButton onPress={this.resetError}>
29:             <RetryButtonText>Try Again</RetryButtonText>
30:           </RetryButton>
31:           {}
32:           {__DEV__ && this.state.errorInfo && (
33:             <ErrorDetails>
34:               <ErrorDetailsTitle>Error Details:</ErrorDetailsTitle>
35:               <ErrorDetailsText>{this.state.error.toString()}</ErrorDetailsText>
36:               <ErrorDetailsText>
37:                 {this.state.errorInfo.componentStack}
38:               </ErrorDetailsText>
39:             </ErrorDetails>
40:           )}
41:         </ErrorContainer>
42:       );
43:     }
44:     return this.props.children;
45:   }
46: }
47: const ErrorContainer = styled.View`
48:   flex: 1;
49:   justify-content: center;
50:   align-items: center;
51:   padding: ${({ theme }) => theme.space[3]};
52:   background-color: ${({ theme }) => theme.colors.bg.secondary};
53: `;
54: const ErrorTitle = styled.Text`
55:   font-size: ${({ theme }) => theme.fontSizes.title};
56:   font-weight: ${({ theme }) => theme.fontWeights.bold};
57:   color: ${({ theme }) => theme.colors.text.error};
58:   margin-bottom: ${({ theme }) => theme.space[2]};
59: `;
60: const ErrorMessage = styled.Text`
61:   font-size: ${({ theme }) => theme.fontSizes.body};
62:   color: ${({ theme }) => theme.colors.text.primary};
63:   text-align: center;
64:   margin-bottom: ${({ theme }) => theme.space[3]};
65: `;
66: const RetryButton = styled(TouchableOpacity)`
67:   padding-vertical: ${({ theme }) => theme.space[2]};
68:   padding-horizontal: ${({ theme }) => theme.space[3]};
69:   background-color: ${({ theme }) => theme.colors.ui.primary};
70:   border-radius: 5px;
71: `;
72: const RetryButtonText = styled.Text`
73:   font-size: ${({ theme }) => theme.fontSizes.button};
74:   color: ${({ theme }) => theme.colors.text.inverse};
75:   font-weight: ${({ theme }) => theme.fontWeights.bold};
76: `;
77: const ErrorDetails = styled.View`
78:   margin-top: ${({ theme }) => theme.space[3]};
79:   padding: ${({ theme }) => theme.space[2]};
80:   background-color: #f8d7da;
81:   border-radius: 5px;
82: `;
83: const ErrorDetailsTitle = styled.Text`
84:   font-size: ${({ theme }) => theme.fontSizes.body};
85:   font-weight: ${({ theme }) => theme.fontWeights.bold};
86:   color: ${({ theme }) => theme.colors.text.error};
87:   margin-bottom: ${({ theme }) => theme.space[1]};
88: `;
89: const ErrorDetailsText = styled.Text`
90:   font-size: ${({ theme }) => theme.fontSizes.caption};
91:   color: ${({ theme }) => theme.colors.text.error};
92: `;
93: export default ErrorBoundary;

================
File: src/components/FadeInView/FadeInView.js
================
 1: import React, { useRef, useEffect } from 'react';
 2: import { Animated } from 'react-native';
 3: export const FadeInView = ({ duration = 1500, ...props }) => {
 4:   const fadeAnim = useRef(new Animated.Value(0)).current;
 5:   useEffect(() => {
 6:     Animated.timing(fadeAnim, {
 7:       toValue: 1,
 8:       duration: duration,
 9:       useNativeDriver: true,
10:     }).start();
11:   }, [fadeAnim, duration]);
12:   return (
13:     <Animated.View
14:       style={{
15:         ...props.style,
16:         opacity: fadeAnim,
17:       }}
18:     >
19:       {props.children}
20:     </Animated.View>
21:   );
22: };

================
File: src/components/Favourite/Favourite.js
================
 1: import React, { useContext } from 'react';
 2: import { TouchableOpacity } from 'react-native';
 3: import styled from 'styled-components/native';
 4: import { AntDesign } from '@expo/vector-icons';
 5: const FavouriteButton = styled(TouchableOpacity)`
 6:   position: absolute;
 7:   top: 25px;
 8:   right: 25px;
 9:   z-index: 9;
10: `;
11: export const Favourite = ({ restaurant }) => {
12:   return (
13:     <FavouriteButton
14:     >
15:       <AntDesign
16:         name={false ? 'heart' : 'hearto'}
17:         size={24}
18:         color={false ? 'red' : 'white'}
19:       />
20:     </FavouriteButton>
21:   );
22: };

================
File: src/components/GlobalWrapper/GlobalWrapper.js
================
 1: import React from 'react';
 2: import { StatusBar as RNStatusBar, View } from 'react-native';
 3: import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
 4: import styled from 'styled-components/native';
 5: const StatusBarBackground = styled(View)`
 6:   background-color: ${(props) => props.backgroundColor || 'transparent'};
 7: `;
 8: const CustomStatusBar = ({ backgroundColor }) => {
 9:   const insets = useSafeAreaInsets();
10:   return (
11:     <StatusBarBackground style={{ height: insets.top }} backgroundColor={backgroundColor} />
12:   );
13: };
14: export const GlobalWrapper = ({ children }) => (
15:   <SafeAreaProvider>
16:     <RNStatusBar barStyle="dark-content" />
17:     <CustomStatusBar backgroundColor="white" />
18:     {children}
19:   </SafeAreaProvider>
20: );

================
File: src/components/LanguageSelector/LanguageSelector.js
================
 1: import React, { useState } from "react";
 2: import { TouchableOpacity, View } from "react-native";
 3: import { MaterialIcons } from "@expo/vector-icons";
 4: import styled from "styled-components/native";
 5: import { useTranslation } from "react-i18next";
 6: import { CustomText } from "../CustomText/CustomText";
 7: const languages = [
 8:   { code: "en", label: "English" },
 9:   { code: "ja", label: "日本語" },
10:   { code: "zh", label: "中文" },
11: ];
12: const LanguageButton = styled(TouchableOpacity)`
13:   flex-direction: row;
14:   align-items: center;
15:   background-color: ${(props) => props.theme.colors.bg.secondary};
16:   padding: ${(props) => props.theme.space[2]} ${(props) => props.theme.space[3]};
17:   border-radius: 15px;
18: `;
19: const LanguageText = styled(CustomText)`
20:   margin-right: ${(props) => props.theme.space[2]};
21:   font-size: ${(props) => props.theme.fontSizes.body};
22: `;
23: const DropdownContainer = styled.View`
24:   position: absolute;
25:   top: 100%;
26:   left: 0;
27:   margin-top: 5px;
28:   background-color: ${(props) => props.theme.colors.bg.primary};
29:   border-radius: 8px;
30:   padding: ${(props) => props.theme.space[2]};
31:   min-width: 160px;
32:   shadow-opacity: 0.2;
33:   shadow-radius: 3px;
34:   shadow-color: #000;
35:   shadow-offset: 0px 2px;
36:   elevation: 5;
37:   z-index: 1000;
38: `;
39: const LanguageOption = styled(TouchableOpacity)`
40:   padding: ${(props) => props.theme.space[2]} ${(props) => props.theme.space[3]};
41:   border-bottom-width: ${(props) => (props.isLast ? "0" : "0.5px")};
42:   border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
43: `;
44: const LanguageSelector = ({
45:   currentLanguage = "en",
46:   onChangeLanguage,
47:   style,
48: }) => {
49:   const [isOpen, setIsOpen] = useState(false);
50:   const { t } = useTranslation("common");
51:   const toggleDropdown = () => {
52:     setIsOpen(!isOpen);
53:   };
54:   const handleSelectLanguage = (languageCode) => {
55:     if (onChangeLanguage) {
56:       onChangeLanguage(languageCode);
57:     }
58:     setIsOpen(false);
59:   };
60:   return (
61:     <View style={[{ position: "relative" }, style]}>
62:       <LanguageButton onPress={toggleDropdown}>
63:         <LanguageText>{t("languages." + currentLanguage)}</LanguageText>
64:         <MaterialIcons
65:           name={isOpen ? "keyboard-arrow-up" : "keyboard-arrow-down"}
66:           size={22}
67:           color="#262626"
68:         />
69:       </LanguageButton>
70:       {isOpen && (
71:         <DropdownContainer>
72:           {languages.map((language, index) => (
73:             <LanguageOption
74:               key={language.code}
75:               isLast={index === languages.length - 1}
76:               onPress={() => handleSelectLanguage(language.code)}
77:             >
78:               <LanguageText>{t("languages." + language.code)}</LanguageText>
79:             </LanguageOption>
80:           ))}
81:         </DropdownContainer>
82:       )}
83:     </View>
84:   );
85: };
86: export default LanguageSelector;

================
File: src/components/SafeArea/SafeArea.js
================
1: import { StatusBar, SafeAreaView } from 'react-native';
2: import styled from 'styled-components';
3: export const SafeArea = styled(SafeAreaView)`
4:   flex: 1;
5:   ${StatusBar.currentHeight && `margin-top: ${StatusBar.currentHeight}px`};
6:   background-color: ${(props) => props.theme.colors.bg.primary};
7: `;

================
File: src/components/Separator/Separator.js
================
1: import React from "react";
2: import PropTypes from "prop-types";
3: import { SeparatorFull, SeparatorPartial } from "./Separator.styles";
4: export const Separator = ({ type }) => {
5:   return type === "full" ? <SeparatorFull /> : <SeparatorPartial />;
6: };
7: Separator.propTypes = {
8:   type: PropTypes.oneOf(["full", "partial"]),
9: };

================
File: src/components/Separator/Separator.styles.js
================
 1: import styled from "styled-components/native";
 2: export const SeparatorFull = styled.View`
 3:   height: 1px;
 4:   background-color: rgba(0, 0, 0, 0.1);
 5:   width: 100%;
 6:   margin-vertical: ${(props) => props.theme.space[3]};
 7: `;
 8: export const SeparatorPartial = styled.View`
 9:   height: 1px;
10:   background-color: rgba(0, 0, 0, 0.1);
11:   width: 80%;
12:   margin-vertical: ${(props) => props.theme.space[2]};
13:   margin-left: 66px;
14: `;

================
File: src/components/Spacer/Spacer.js
================
 1: import React from 'react';
 2: import { View } from 'react-native';
 3: import styled, { useTheme } from 'styled-components/native';
 4: const sizeVariant = {
 5:   small: 1,
 6:   medium: 2,
 7:   large: 3,
 8:   xl: 4,
 9:   xxl: 5,
10: };
11: const positionVariant = {
12:   top: 'marginTop',
13:   left: 'marginLeft',
14:   right: 'marginRight',
15:   bottom: 'marginBottom',
16: };
17: const getVariant = (position, size, theme) => {
18:   const sizeIndex = sizeVariant[size];
19:   const property = positionVariant[position];
20:   const value = theme.space[sizeIndex];
21:   return `${property}:${value}`;
22: };
23: const SpacerView = styled(View)`
24:   ${({ variant }) => variant};
25: `;
26: export const Spacer = ({ position = 'top', size = 'small', children }) => {
27:   const theme = useTheme();
28:   const variant = getVariant(position, size, theme);
29:   return <SpacerView variant={variant}>{children}</SpacerView>;
30: };

================
File: src/components/Switch/Switch.js
================
 1: import React, { useRef, useEffect } from "react";
 2: import { Animated, TouchableWithoutFeedback } from "react-native";
 3: import * as DefaultStyles from "./Switch.styles";
 4: import * as AltStyles from "./SwitchAlternate.styles";
 5: const SwitchContainer = ({
 6:   isOn,
 7:   setIsOn,
 8:   leftLabel,
 9:   rightLabel,
10:   variant = "default",
11: }) => {
12:   const Styles = variant === "alternate" ? AltStyles : DefaultStyles;
13:   const capsulePosition = useRef(new Animated.Value(isOn ? 96 : 0)).current;
14:   useEffect(() => {
15:     Animated.timing(capsulePosition, {
16:       toValue: isOn ? 96 : 0,
17:       duration: 200,
18:       useNativeDriver: false,
19:     }).start();
20:   }, [isOn]);
21:   return (
22:     <Styles.Container>
23:       <Styles.SwitchBackground>
24:         <Styles.Capsule style={{ left: capsulePosition }} />
25:         <TouchableWithoutFeedback onPress={() => setIsOn(false)}>
26:           <Styles.TextWrapper>
27:             {}
28:             <Styles.Label active={!isOn}>{leftLabel}</Styles.Label>
29:           </Styles.TextWrapper>
30:         </TouchableWithoutFeedback>
31:         <TouchableWithoutFeedback onPress={() => setIsOn(true)}>
32:           <Styles.TextWrapper>
33:             {}
34:             <Styles.Label active={isOn}>{rightLabel}</Styles.Label>
35:           </Styles.TextWrapper>
36:         </TouchableWithoutFeedback>
37:       </Styles.SwitchBackground>
38:     </Styles.Container>
39:   );
40: };
41: export default SwitchContainer;

================
File: src/components/Switch/Switch.styles.js
================
 1: import styled from "styled-components/native";
 2: import { Animated, Text } from "react-native";
 3: export const Container = styled.View`
 4:   flex-direction: row;
 5:   justify-content: center;
 6:   align-items: center;
 7:   margin: 10px;
 8: `;
 9: export const SwitchBackground = styled.View`
10:   flex-direction: row;
11:   justify-content: space-around;
12:   align-items: center;
13:   background-color: ${(props) => props.theme.colors.ui.disabled};
14:   border-radius: 25px;
15:   width: 200px;
16:   height: 50px;
17:   padding: 3px;
18: `;
19: export const Capsule = styled(Animated.View)`
20:   position: absolute;
21:   width: 50%;
22:   height: 100%;
23:   background-color: ${(props) => props.theme.colors.bg.primary};
24:   border-radius: 25px;
25:   margin: 3px;
26: `;
27: export const TextWrapper = styled.View`
28:   flex: 1;
29:   align-items: center;
30:   justify-content: center;
31: `;
32: export const Label = styled(Text)`
33:   font-size: ${(props) => props.theme.fontSizes.button};
34:   color: ${(props) => props.theme.colors.text.primary};
35: `;

================
File: src/components/Switch/SwitchAlternate.styles.js
================
 1: import styled from "styled-components/native";
 2: import { Animated, Text } from "react-native";
 3: export const Container = styled.View`
 4:   flex-direction: row;
 5:   justify-content: center;
 6:   align-items: center;
 7:   margin: ${(props) => props.theme.space[2]};
 8: `;
 9: export const SwitchBackground = styled.View`
10:   flex-direction: row;
11:   justify-content: space-around;
12:   align-items: center;
13:   background-color: ${(props) =>
14:     props.theme.colors.ui.disabled};
15:   border-radius: 25px;
16:   width: 200px;
17:   height: 50px;
18:   padding: ${(props) => props.theme.space[1]};
19: `;
20: export const Capsule = styled(Animated.View)`
21:   position: absolute;
22:   width: 50%;
23:   height: 100%;
24:   background-color: ${(props) =>
25:     props.theme.colors.ui.primary};
26:   border-radius: 25px;
27:   margin: ${(props) => props.theme.space[1]};
28: `;
29: export const TextWrapper = styled.View`
30:   flex: 1;
31:   align-items: center;
32:   justify-content: center;
33: `;
34: export const Label = styled(Text)`
35:   font-size: ${(props) => props.theme.fontSizes.button};
36:   font-family: ${(props) => props.theme.fonts.body};
37:   color: ${(props) =>
38:     props.active
39:       ? props.theme.colors.text.inverse
40:       : props.theme.colors.text.primary};
41: `;

================
File: src/components/TimeScroll/TimeScroll.js
================
  1: import React, { useRef } from "react";
  2: import styled from "styled-components/native";
  3: import { Animated } from "react-native";
  4: import { LinearGradient } from "expo-linear-gradient";
  5: const ITEM_HEIGHT = 50;
  6: const VISIBLE_ITEMS = 5;
  7: const CONTAINER_HEIGHT = ITEM_HEIGHT * VISIBLE_ITEMS;
  8: const CONTAINER_WIDTH = 60;
  9: const PADDING_VERTICAL = (CONTAINER_HEIGHT - ITEM_HEIGHT) / 2;
 10: const Container = styled.View`
 11:   height: ${CONTAINER_HEIGHT}px;
 12:   width: ${CONTAINER_WIDTH}px;
 13:   background-color: ${(props) => props.theme.colors.bg.secondary};
 14:   overflow: hidden;
 15:   border-radius: 30px;
 16:   position: relative;
 17: `;
 18: const StyledAnimatedItem = styled(Animated.View)`
 19:   height: ${ITEM_HEIGHT}px;
 20:   justify-content: center;
 21:   align-items: center;
 22: `;
 23: const TimeText = styled.Text`
 24:   color: ${(props) => props.theme.colors.text.primary};
 25:   font-size: 18px;
 26:   font-family: ${(props) => props.theme.fonts.body};
 27: `;
 28: export const TimeScroll = ({
 29:   times,
 30:   selectedTime,
 31:   onTimeChange,
 32:   containerHeight = CONTAINER_HEIGHT,
 33:   containerWidth = CONTAINER_WIDTH,
 34:   itemHeight = ITEM_HEIGHT,
 35:   visibleItems = VISIBLE_ITEMS,
 36: }) => {
 37:   const scrollY = useRef(new Animated.Value(0)).current;
 38:   const paddingVertical = (containerHeight - itemHeight) / 2;
 39:   const handleMomentumScrollEnd = (event) => {
 40:     const offsetY = event.nativeEvent.contentOffset.y;
 41:     const index = Math.round(offsetY / itemHeight);
 42:     if (index >= 0 && index < times.length) {
 43:       onTimeChange(times[index]);
 44:     }
 45:   };
 46:   return (
 47:     <Container style={{ height: containerHeight, width: containerWidth }}>
 48:       <Animated.ScrollView
 49:         contentContainerStyle={{ paddingVertical: paddingVertical }}
 50:         showsVerticalScrollIndicator={false}
 51:         snapToInterval={itemHeight}
 52:         decelerationRate="fast"
 53:         bounces={false}
 54:         onMomentumScrollEnd={handleMomentumScrollEnd}
 55:         onScroll={Animated.event(
 56:           [{ nativeEvent: { contentOffset: { y: scrollY } } }],
 57:           { useNativeDriver: true }
 58:         )}
 59:         scrollEventThrottle={16}
 60:       >
 61:         {times.map((time, index) => {
 62:           const inputRange = [
 63:             (index - 1) * itemHeight,
 64:             index * itemHeight,
 65:             (index + 1) * itemHeight,
 66:           ];
 67:           const scale = scrollY.interpolate({
 68:             inputRange,
 69:             outputRange: [0.7, 1, 0.7],
 70:             extrapolate: "clamp",
 71:           });
 72:           const opacity = scrollY.interpolate({
 73:             inputRange,
 74:             outputRange: [0.3, 1, 0.3],
 75:             extrapolate: "clamp",
 76:           });
 77:           const rotateX = scrollY.interpolate({
 78:             inputRange,
 79:             outputRange: ["30deg", "0deg", "-30deg"],
 80:             extrapolate: "clamp",
 81:           });
 82:           return (
 83:             <StyledAnimatedItem
 84:               key={index}
 85:               style={{
 86:                 height: itemHeight,
 87:                 transform: [{ perspective: 1000 }, { rotateX }, { scale }],
 88:                 opacity,
 89:               }}
 90:             >
 91:               <TimeText>{time}</TimeText>
 92:             </StyledAnimatedItem>
 93:           );
 94:         })}
 95:       </Animated.ScrollView>
 96:       {}
 97:       <LinearGradient
 98:         colors={["rgba(241,241,241,1)", "rgba(241,241,241,0)"]}
 99:         style={{
100:           position: "absolute",
101:           top: 0,
102:           left: 0,
103:           right: 0,
104:           height: 20,
105:         }}
106:         pointerEvents="none"
107:       />
108:       {}
109:       <LinearGradient
110:         colors={["rgba(241,241,241,0)", "rgba(241,241,241,1)"]}
111:         style={{
112:           position: "absolute",
113:           bottom: 0,
114:           left: 0,
115:           right: 0,
116:           height: 20,
117:         }}
118:         pointerEvents="none"
119:       />
120:     </Container>
121:   );
122: };
123: export default TimeScroll;

================
File: src/components/WebApp/styles.js
================
 1: import styled from "styled-components/native";
 2: import { WebView } from "react-native-webview";
 3: import { TouchableOpacity, Text, View } from "react-native";
 4: export const Container = styled.View`
 5:   width: 100%;
 6:   height: ${({ height }) => height}px;
 7:   background-color: ${({ theme }) => theme.colors.bg.primary};
 8: `;
 9: // Styled WebView
10: export const StyledWebView = styled(WebView)`
11:   flex: 1;
12:   width: 100%;
13: `;
14: // Footer container
15: export const Footer = styled.View`
16:   padding: ${({ theme }) => theme.space[3]};
17:   background-color: ${({ theme }) => theme.colors.ui.tertiary};
18:   flex-direction: row;
19:   justify-content: space-between;
20:   align-items: center;
21: `;
22: // Text displaying selected chairs
23: export const SelectedText = styled(Text)`
24:   flex: 1;
25:   margin-right: ${({ theme }) => theme.space[2]};
26:   color: ${({ theme }) => theme.colors.text.primary};
27:   font-size: ${({ theme }) => theme.fontSizes.body};
28:   font-family: ${({ theme }) => theme.fonts.body};
29: `;
30: // Cancel button
31: export const CancelButton = styled(TouchableOpacity)`
32:   padding: ${({ theme }) => theme.space[2]};
33:   background-color: ${({ theme }) => theme.colors.ui.error};
34:   border-radius: 4px;
35: `;
36: // Text inside the Cancel button
37: export const CancelButtonText = styled(Text)`
38:   color: ${({ theme }) => theme.colors.text.inverse};
39:   font-size: ${({ theme }) => theme.fontSizes.button};
40:   font-family: ${({ theme }) => theme.fonts.body};
41:   text-align: center;
42: `;

================
File: src/components/WebApp/useStaticServer.js
================
 1: import { useEffect, useState } from "react";
 2: import StaticServer from "react-native-static-server";
 3: import RNFS from "react-native-fs";
 4: const useStaticServer = () => {
 5:   const [url, setUrl] = useState("");
 6:   useEffect(() => {
 7:     let server = null;
 8:     const startServer = async () => {
 9:       const path = `${RNFS.MainBundlePath}/3d_build`; // Ensure this path exists and contains your web app
10:       console.log(`Inner webapp path verified: ${path}`);
11:       // Generate a random port between 8000 and 9000 to avoid caching issues
12:       const randomPort = Math.floor(Math.random() * 1000) + 8000;
13:       // Add a cache-busting timestamp query parameter
14:       const timestamp = Date.now();
15:       server = new StaticServer(randomPort, path, { localOnly: true });
16:       try {
17:         let serverUrl = await server.start();
18:         // Append cache-busting parameter
19:         serverUrl = `${serverUrl}?t=${timestamp}`;
20:         setUrl(serverUrl);
21:         console.log(`Server hosting at: ${serverUrl}`);
22:       } catch (error) {
23:         console.error("Failed to start server:", error);
24:       }
25:     };
26:     startServer();
27:     return () => {
28:       if (server) {
29:         server.stop();
30:       }
31:     };
32:   }, []);
33:   return url;
34: };
35: export default useStaticServer;

================
File: src/components/WebApp/WebApp.js
================
  1: import React, { useEffect, useRef, useState, useCallback } from "react";
  2: import { View, ActivityIndicator } from "react-native";
  3: import { WebView } from "react-native-webview";
  4: import styled from "styled-components/native";
  5: import useStaticServer from "./useStaticServer";
  6: import { Container, StyledWebView } from "./styles";
  7: const WebApp = ({ onInteractionStart, onInteractionEnd }) => {
  8:   const serverUrl = useStaticServer();
  9:   const webViewRef = useRef(null);
 10:   const [webViewHeight, setWebViewHeight] = useState(200);
 11:   const [selectedItems, setSelectedItems] = useState([]);
 12:   const [occupiedItems, setOccupiedItems] = useState(["CHAIR2", "CHAIR4"]);
 13:   const [isServerReady, setIsServerReady] = useState(false);
 14:   const [currentModel, setCurrentModel] = useState("kitchen");
 15:   const [availableItems, setAvailableItems] = useState([]);
 16:   const [isInitialized, setIsInitialized] = useState(false);
 17:   useEffect(() => {
 18:     if (serverUrl) {
 19:       setIsServerReady(true);
 20:     }
 21:   }, [serverUrl]);
 22:   const sendItemsToWebView = useCallback(() => {
 23:     if (webViewRef.current) {
 24:       const script = `
 25:         (function() {
 26:           if (window.updateItems) {
 27:             window.updateItems({
 28:               selectedItems: ${JSON.stringify(selectedItems)},
 29:               occupiedItems: ${JSON.stringify(occupiedItems)}
 30:             });
 31:           }
 32:         })();
 33:         true;
 34:       `;
 35:       webViewRef.current.injectJavaScript(script);
 36:     }
 37:   }, [selectedItems, occupiedItems]);
 38:   useEffect(() => {
 39:     if (isInitialized) {
 40:       sendItemsToWebView();
 41:     }
 42:   }, [selectedItems, occupiedItems, sendItemsToWebView, isInitialized]);
 43:   const handleWebViewLoaded = useCallback(() => {
 44:     setIsInitialized(true);
 45:     setTimeout(() => {
 46:       sendItemsToWebView();
 47:     }, 300);
 48:   }, [sendItemsToWebView]);
 49:   const changeRestaurantModel = useCallback((modelKey) => {
 50:     if (webViewRef.current) {
 51:       const script = `
 52:         (function() {
 53:           if (window.changeRestaurantModel) {
 54:             window.changeRestaurantModel('${modelKey}');
 55:           }
 56:         })();
 57:         true;
 58:       `;
 59:       webViewRef.current.injectJavaScript(script);
 60:       setCurrentModel(modelKey);
 61:       setSelectedItems([]);
 62:     }
 63:   }, []);
 64:   const handleWebViewMessage = useCallback(
 65:     (event) => {
 66:       try {
 67:         const messageData = JSON.parse(event.nativeEvent.data);
 68:         switch (messageData.type) {
 69:           case "itemClicked":
 70:             if (occupiedItems.includes(messageData.id)) {
 71:               return;
 72:             }
 73:             setSelectedItems((prevSelected) => {
 74:               if (prevSelected.includes(messageData.id)) {
 75:                 return prevSelected.filter((id) => id !== messageData.id);
 76:               } else {
 77:                 return [...prevSelected, messageData.id];
 78:               }
 79:             });
 80:             break;
 81:           case "contentHeight":
 82:             const height = Number(messageData.height);
 83:             if (height > 0 && height !== webViewHeight) {
 84:               setWebViewHeight(height);
 85:             }
 86:             break;
 87:           case "interactionStart":
 88:             if (onInteractionStart) {
 89:               onInteractionStart();
 90:             }
 91:             break;
 92:           case "interactionEnd":
 93:             if (onInteractionEnd) {
 94:               onInteractionEnd();
 95:             }
 96:             break;
 97:           case "modelChanged":
 98:             setAvailableItems(messageData.availableItems || []);
 99:             setCurrentModel(messageData.modelKey);
100:             setSelectedItems([]);
101:             break;
102:           default:
103:             console.warn("Unhandled message type:", messageData.type);
104:         }
105:       } catch (error) {
106:         console.error("Failed to parse message from WebView:", error);
107:       }
108:     },
109:     [occupiedItems, webViewHeight, onInteractionStart, onInteractionEnd]
110:   );
111:   return (
112:     <View style={{ flex: 1 }}>
113:       {isServerReady ? (
114:         <Container height={webViewHeight}>
115:           <StyledWebView
116:             ref={webViewRef}
117:             source={{ uri: serverUrl }}
118:             scrollEnabled={false}
119:             cacheEnabled={false}
120:             cacheMode="LOAD_NO_CACHE"
121:             incognito={true}
122:             thirdPartyCookiesEnabled={false}
123:             originWhitelist={["*"]}
124:             onError={(syntheticEvent) => {
125:               const { nativeEvent } = syntheticEvent;
126:               console.warn("WebView error: ", nativeEvent);
127:             }}
128:             onMessage={handleWebViewMessage}
129:             onLoadEnd={() => {
130:               sendItemsToWebView();
131:             }}
132:           />
133:         </Container>
134:       ) : (
135:         <View
136:           style={{ flex: 1, justifyContent: "center", alignItems: "center" }}
137:         >
138:           <ActivityIndicator size="large" color="#0000ff" />
139:         </View>
140:       )}
141:     </View>
142:   );
143: };
144: export default WebApp;

================
File: src/data/mockData.js
================
  1: export const restaurants = [
  2:   {
  3:     name: "La Piazza",
  4:     icon: "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
  5:     photos: [
  6:       "https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8Zm9vZHxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60",
  7:     ],
  8:     address: "123 Piazza Street",
  9:     isOpenNow: true,
 10:     rating: 4.5,
 11:     isClosedTemporarily: false,
 12:     placeId: "1",
 13:   },
 14:   {
 15:     name: "Sushi World",
 16:     icon: "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
 17:     photos: ["https://images.unsplash.com/photo-1553621042-f6e147245754"],
 18:     address: "456 Sushi Lane",
 19:     isOpenNow: true,
 20:     rating: 5,
 21:     isClosedTemporarily: false,
 22:     placeId: "2",
 23:   },
 24:   {
 25:     name: "Burger House",
 26:     icon: "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
 27:     photos: ["https://images.unsplash.com/photo-1550547660-d9450f859349"],
 28:     address: "789 Burger Blvd",
 29:     isOpenNow: false,
 30:     rating: 3.8,
 31:     isClosedTemporarily: false,
 32:     placeId: "3",
 33:   },
 34:   {
 35:     name: "Ocean Breeze Café",
 36:     icon: "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
 37:     photos: [
 38:       "https://images.unsplash.com/photo-1544511916-0148ccdeb877?auto=format&fit=crop&w=400&q=60",
 39:     ],
 40:     address: "101 Ocean Drive",
 41:     isOpenNow: true,
 42:     rating: 4.2,
 43:     isClosedTemporarily: false,
 44:     placeId: "4",
 45:   },
 46: ];
 47: export const reservations = [
 48:   {
 49:     id: 1,
 50:     restaurant: restaurants[0],
 51:     date: "2024-04-01",
 52:     time: "7:00 PM",
 53:     seatsNumber: 4,
 54:     status: "Confirmed",
 55:   },
 56:   {
 57:     id: 2,
 58:     restaurant: restaurants[1],
 59:     date: "2024-03-15",
 60:     time: "6:30 PM",
 61:     seatsNumber: 2,
 62:     status: "Completed",
 63:   },
 64:   {
 65:     id: 3,
 66:     restaurant: restaurants[2],
 67:     date: "2024-03-20",
 68:     time: "6:00 PM",
 69:     seatsNumber: 3,
 70:     status: "Completed",
 71:   },
 72:   {
 73:     id: 4,
 74:     restaurant: restaurants[3],
 75:     date: "2024-03-28",
 76:     time: "6:00 PM",
 77:     seatsNumber: 3,
 78:     status: "Completed",
 79:   },
 80: ];
 81: export const countryCodes = [
 82:   {
 83:     flag: "🇺🇸",
 84:     countryName: "United States",
 85:     code: "+1",
 86:   },
 87:   {
 88:     flag: "🇬🇧",
 89:     countryName: "United Kingdom",
 90:     code: "+44",
 91:   },
 92:   {
 93:     flag: "🇨🇦",
 94:     countryName: "Canada",
 95:     code: "+1",
 96:   },
 97:   {
 98:     flag: "🇦🇺",
 99:     countryName: "Australia",
100:     code: "+61",
101:   },
102:   {
103:     flag: "🇳🇿",
104:     countryName: "New Zealand",
105:     code: "+64",
106:   },
107:   {
108:     flag: "🇮🇳",
109:     countryName: "India",
110:     code: "+91",
111:   },
112:   {
113:     flag: "🇨🇳",
114:     countryName: "China",
115:     code: "+86",
116:   },
117:   {
118:     flag: "🇯🇵",
119:     countryName: "Japan",
120:     code: "+81",
121:   },
122: ];
123: export const users = [
124:   {
125:     username: "Vickers Zhu",
126:     email: "****@example.com",
127:     profileImage: require("../../assets/images/user_profile.jpg"),
128:     phoneNumber: "+81 **** ****",
129:   },
130: ];
131: export const tableStatuses = {
132:   "0-1": { id: 1, row: 0, col: 1, status: "empty" },
133:   "0-2": { id: 2, row: 0, col: 2, status: "empty" },
134:   "1-0": { id: 3, row: 1, col: 0, status: "empty" },
135:   "1-1": { id: 4, row: 1, col: 1, status: "occupied" },
136:   "1-2": { id: 5, row: 1, col: 2, status: "empty" },
137:   "1-3": { id: 6, row: 1, col: 3, status: "empty" },
138:   "2-0": { id: 7, row: 2, col: 0, status: "reserved" },
139:   "2-1": { id: 8, row: 2, col: 1, status: "empty" },
140:   "2-2": { id: 9, row: 2, col: 2, status: "empty" },
141:   "2-3": { id: 10, row: 2, col: 3, status: "occupied" },
142:   "3-1": { id: 11, row: 3, col: 1, status: "empty" },
143:   "3-2": { id: 12, row: 3, col: 2, status: "empty" },
144: };
145: export const seatingData = {
146:   tables: [
147:     {
148:       id: 1,
149:       chairs: [
150:         { id: "1A", status: "occupied" },
151:         { id: "1B", status: "empty" },
152:         { id: "1C", status: "empty" },
153:       ],
154:     },
155:     {
156:       id: 2,
157:       chairs: [
158:         { id: "2A", status: "empty" },
159:         { id: "2B", status: "empty" },
160:         { id: "2C", status: "reserved" },
161:         { id: "2D", status: "reserved" },
162:       ],
163:     },
164:     {
165:       id: 3,
166:       chairs: ["3A", "3B", "3C", "3D", "3E", "3F", "3G", "3H", "3I", "3J"].map(
167:         (chairId, index) => {
168:           if (index === 2 || index === 5) {
169:             return { id: chairId, status: "occupied" };
170:           }
171:           return { id: chairId, status: "empty" };
172:         }
173:       ),
174:     },
175:     {
176:       id: 4,
177:       chairs: [
178:         { id: "4A", status: "empty" },
179:         { id: "4B", status: "occupied" },
180:         { id: "4C", status: "empty" },
181:         { id: "4D", status: "empty" },
182:       ],
183:     },
184:     {
185:       id: 5,
186:       chairs: [
187:         { id: "5A", status: "empty" },
188:         { id: "5B", status: "reserved" },
189:         { id: "5C", status: "empty" },
190:       ],
191:     },
192:     {
193:       id: 6,
194:       chairs: [
195:         { id: "6A", status: "occupied" },
196:         { id: "6B", status: "occupied" },
197:       ],
198:     },
199:     {
200:       id: 7,
201:       chairs: ["7A", "7B", "7C", "7D", "7E", "7F", "7G", "7H", "7I", "7J"].map(
202:         (chairId, index) => {
203:           return index % 3 === 0
204:             ? { id: chairId, status: "reserved" }
205:             : { id: chairId, status: "empty" };
206:         }
207:       ),
208:     },
209:     {
210:       id: 8,
211:       chairs: [
212:         { id: "8A", status: "empty" },
213:         { id: "8B", status: "occupied" },
214:       ],
215:     },
216:     {
217:       id: 9,
218:       chairs: [
219:         { id: "9A", status: "empty" },
220:         { id: "9B", status: "empty" },
221:         { id: "9C", status: "reserved" },
222:       ],
223:     },
224:     {
225:       id: 10,
226:       chairs: [
227:         "10A",
228:         "10B",
229:         "10C",
230:         "10D",
231:         "10E",
232:         "10F",
233:         "10G",
234:         "10H",
235:         "10I",
236:         "10J",
237:       ].map((chairId, index) => {
238:         if (index === 4) return { id: chairId, status: "occupied" };
239:         if (index === 7) return { id: chairId, status: "reserved" };
240:         return { id: chairId, status: "empty" };
241:       }),
242:     },
243:     {
244:       id: 11,
245:       chairs: [
246:         { id: "11A", status: "empty" },
247:         { id: "11B", status: "empty" },
248:       ],
249:     },
250:     {
251:       id: 12,
252:       chairs: [
253:         { id: "12A", status: "occupied" },
254:         { id: "12B", status: "empty" },
255:         { id: "12C", status: "empty" },
256:       ],
257:     },
258:   ],
259:   counterSeats: Array.from({ length: 30 }, (_, i) => ({
260:     id: `C${i + 1}`,
261:     status: i % 5 === 0 ? "occupied" : i % 7 === 0 ? "reserved" : "empty",
262:   })),
263: };
264: export const merchantReservations = [
265:   {
266:     id: 1,
267:     customerName: "John Smith",
268:     people: 2,
269:     time: "11:00",
270:     duration: 90,
271:     tableId: 2,
272:     chairs: ["2A", "2B"],
273:     status: "confirmed",
274:     note: "Anniversary celebration",
275:   },
276:   {
277:     id: 2,
278:     customerName: "Emma Wilson",
279:     people: 4,
280:     time: "12:30",
281:     duration: 120,
282:     tableId: 4,
283:     chairs: ["4A", "4B", "4C", "4D"],
284:     status: "pending",
285:     note: "Window seat preferred",
286:   },
287:   {
288:     id: 3,
289:     customerName: "David Lee",
290:     people: 1,
291:     time: "13:00",
292:     duration: 60,
293:     tableId: 6,
294:     chairs: ["6A"],
295:     status: "confirmed",
296:     note: "",
297:   },
298:   {
299:     id: 4,
300:     customerName: "Sarah Johnson",
301:     people: 3,
302:     time: "15:30",
303:     duration: 90,
304:     tableId: 1,
305:     chairs: ["1A", "1B", "1C"],
306:     status: "confirmed",
307:     note: "Allergic to nuts",
308:   },
309:   {
310:     id: 5,
311:     customerName: "Michael Brown",
312:     people: 2,
313:     time: "18:00",
314:     duration: 120,
315:     tableId: 5,
316:     chairs: ["5A", "5B"],
317:     status: "confirmed",
318:     note: "Birthday celebration",
319:   },
320:   {
321:     id: 9,
322:     customerName: "Lisa Wong",
323:     people: 3,
324:     time: "17:00",
325:     duration: 90,
326:     tableId: 7,
327:     chairs: ["7A", "7D", "7G"],
328:     status: "confirmed",
329:     note: "Family dinner",
330:   },
331:   {
332:     id: 10,
333:     customerName: "Tom Garcia",
334:     people: 2,
335:     time: "19:00",
336:     duration: 60,
337:     tableId: 10,
338:     chairs: ["10E"],
339:     status: "confirmed",
340:     note: "Quick business dinner",
341:   },
342:   {
343:     id: 11,
344:     customerName: "Rachel Kim",
345:     people: 2,
346:     time: "16:30",
347:     duration: 90,
348:     tableId: 12,
349:     chairs: ["12A"],
350:     status: "confirmed",
351:     note: "Late lunch",
352:   },
353:   {
354:     id: 12,
355:     customerName: "Mark Rodriguez",
356:     people: 1,
357:     time: "20:00",
358:     duration: 60,
359:     tableId: 8,
360:     chairs: ["8B"],
361:     status: "confirmed",
362:     note: "Solo dinner",
363:   },
364:   {
365:     id: 6,
366:     customerName: "Alex Chen",
367:     people: 1,
368:     time: "10:00",
369:     duration: 60,
370:     counterSeatId: "C3",
371:     isCounterSeat: true,
372:     status: "confirmed",
373:     note: "Business breakfast",
374:   },
375:   {
376:     id: 7,
377:     customerName: "Jessica Miller",
378:     people: 1,
379:     time: "14:00",
380:     duration: 90,
381:     counterSeatId: "C7",
382:     isCounterSeat: true,
383:     status: "confirmed",
384:     note: "Solo diner",
385:   },
386:   {
387:     id: 8,
388:     customerName: "Robert Taylor",
389:     people: 1,
390:     time: "19:30",
391:     duration: 60,
392:     counterSeatId: "C15",
393:     isCounterSeat: true,
394:     status: "pending",
395:     note: "Late dinner",
396:   },
397:   {
398:     id: 13,
399:     customerName: "Emily Chen",
400:     people: 1,
401:     time: "11:30",
402:     duration: 45,
403:     counterSeatId: "C10",
404:     isCounterSeat: true,
405:     status: "confirmed",
406:     note: "Quick lunch",
407:   },
408:   {
409:     id: 14,
410:     customerName: "Alex Johnson",
411:     people: 1,
412:     time: "17:45",
413:     duration: 75,
414:     counterSeatId: "C20",
415:     isCounterSeat: true,
416:     status: "confirmed",
417:     note: "After-work drink",
418:   },
419: ];
420: export const timeSlots = [
421:   "09:00",
422:   "09:30",
423:   "10:00",
424:   "10:30",
425:   "11:00",
426:   "11:30",
427:   "12:00",
428:   "12:30",
429:   "13:00",
430:   "13:30",
431:   "14:00",
432:   "14:30",
433:   "15:00",
434:   "15:30",
435:   "16:00",
436:   "16:30",
437:   "17:00",
438:   "17:30",
439:   "18:00",
440:   "18:30",
441:   "19:00",
442:   "19:30",
443:   "20:00",
444:   "20:30",
445:   "21:00",
446:   "21:30",
447:   "22:00",
448:   "22:30",
449: ];
450: export const merchantProfile = {
451:   name: "Restaurant Owner",
452:   email: "restaurant@example.com",
453:   restaurantName: "Gourmet Delights",
454:   profileImage: require("../../assets/images/user_profile.jpg"),
455:   phoneNumber: "+81 80 6748 5678",
456: };

================
File: src/data/mockEditRestaurantData.js
================
  1: export const sampleRestaurantData = {
  2:   id: "rest-123456",
  3:   name: "La Piazza Ristorante",
  4:   description: "Authentic Italian cuisine with a modern twist",
  5:   cuisine: ["Italian", "Mediterranean"],
  6:   address: {
  7:     street: "123 Piazza Street",
  8:     city: "San Francisco",
  9:     state: "CA",
 10:     postalCode: "94110",
 11:     country: "USA",
 12:     coordinates: {
 13:       latitude: 37.7598,
 14:       longitude: -122.4271,
 15:     },
 16:   },
 17:   phoneNumber: "+1 (415) 555-1234",
 18:   email: "info@lapiazzasf.com",
 19:   website: "https://www.lapiazzasf.com",
 20:   photos: [
 21:     "https://images.unsplash.com/photo-1504674900247-0877df9cc836",
 22:     "https://images.unsplash.com/photo-1621275471769-e6aa344546d5",
 23:     "https://images.unsplash.com/photo-1544025162-d76694265947",
 24:   ],
 25:   logo: "https://example.com/logo.png",
 26:   coverImage: "https://images.unsplash.com/photo-1504754524776-8f4f37790ca0",
 27:   businessHours: {
 28:     monday: { open: "11:00", close: "22:00", isClosed: false },
 29:     tuesday: { open: "11:00", close: "22:00", isClosed: false },
 30:     wednesday: { open: "11:00", close: "22:00", isClosed: false },
 31:     thursday: { open: "11:00", close: "22:00", isClosed: false },
 32:     friday: { open: "11:00", close: "23:00", isClosed: false },
 33:     saturday: { open: "10:00", close: "23:00", isClosed: false },
 34:     sunday: { open: "10:00", close: "21:00", isClosed: false },
 35:   },
 36:   isOpenNow: true,
 37:   isClosedTemporarily: false,
 38:   holidayHours: [
 39:     {
 40:       date: "2025-12-24",
 41:       open: "11:00",
 42:       close: "15:00",
 43:       isClosed: false,
 44:     },
 45:     {
 46:       date: "2025-12-25",
 47:       open: "",
 48:       close: "",
 49:       isClosed: true,
 50:     },
 51:   ],
 52:   capacity: {
 53:     totalSeats: 80,
 54:     indoorSeats: 60,
 55:     outdoorSeats: 20,
 56:     privateRooms: [
 57:       {
 58:         name: "Wine Cellar",
 59:         capacity: 12,
 60:       },
 61:     ],
 62:   },
 63:   features: {
 64:     hasWifi: true,
 65:     hasParking: true,
 66:     isWheelchairAccessible: true,
 67:     allowsPets: false,
 68:     hasOutdoorSeating: true,
 69:     hasTakeout: true,
 70:     hasDelivery: true,
 71:     acceptsReservations: true,
 72:   },
 73:   menu: {
 74:     categories: [
 75:       {
 76:         name: "Appetizers",
 77:         items: [
 78:           {
 79:             name: "Bruschetta",
 80:             description:
 81:               "Grilled bread rubbed with garlic and topped with tomatoes, olive oil, salt, and pepper",
 82:             price: 9.99,
 83:             image: "https://example.com/bruschetta.jpg",
 84:             dietaryFlags: ["Vegetarian"],
 85:           },
 86:         ],
 87:       },
 88:       {
 89:         name: "Pasta",
 90:         items: [
 91:           {
 92:             name: "Spaghetti Carbonara",
 93:             description:
 94:               "Spaghetti with a creamy sauce of eggs, cheese, pancetta, and black pepper",
 95:             price: 18.99,
 96:             image: "https://example.com/carbonara.jpg",
 97:             dietaryFlags: [],
 98:           },
 99:         ],
100:       },
101:     ],
102:   },
103:   rating: 4.7,
104:   reviewCount: 253,
105:   socialMedia: {
106:     instagram: "https://instagram.com/lapiazzasf",
107:     facebook: "https://facebook.com/lapiazzasf",
108:     twitter: "https://twitter.com/lapiazzasf",
109:     yelp: "https://yelp.com/biz/la-piazza-ristorante-san-francisco",
110:   },
111:   settings: {
112:     reservationTimeSlotDuration: 30,
113:     maxReservationSize: 20,
114:     reservationLeadTime: 1,
115:     automaticConfirmation: true,
116:   },
117: };

================
File: src/features/auth/components/CountryListItem.js
================
 1: import React from "react";
 2: import {
 3:   ListItemContainer,
 4:   FlagText,
 5:   CodeText,
 6: } from "./CountryListItem.styles";
 7: import { TouchableOpacity } from "react-native";
 8: const CountryListItem = ({ item, onPress }) => (
 9:   <TouchableOpacity onPress={() => onPress(item)} activeOpacity={0.6}>
10:     <ListItemContainer>
11:       <FlagText>{item.flag}</FlagText>
12:       <CodeText>{item.code}</CodeText>
13:     </ListItemContainer>
14:   </TouchableOpacity>
15: );
16: export default CountryListItem;

================
File: src/features/auth/components/CountryListItem.styles.js
================
 1: import styled from "styled-components/native";
 2: import { View, Text } from "react-native";
 3: export const ListItemContainer = styled(View)`
 4:   flex-direction: row;
 5:   align-items: center;
 6:   padding-vertical: ${(props) => props.theme.space[2]};
 7:   padding-horizontal: ${(props) => props.theme.space[2]};
 8:   background-color: ${(props) => props.theme.colors.bg.primary};
 9:   border-bottom-width: 0.5px;
10:   border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
11: `;
12: export const CountryInfoContainer = styled(View)`
13:   flex-direction: row;
14:   align-items: center;
15:   flex: 1;
16:   margin-right: ${(props) => props.theme.space[2]};
17: `;
18: export const FlagText = styled(Text)`
19:   font-size: 20px;
20:   margin-right: ${(props) => props.theme.space[2]};
21: `;
22: export const CountryNameText = styled(Text)`
23:   font-family: ${(props) => props.theme.fonts.body};
24:   font-size: ${(props) => props.theme.fontSizes.body};
25:   color: ${(props) => props.theme.colors.text.primary};
26:   flex: 1;
27: `;
28: export const CodeText = styled(Text)`
29:   font-family: ${(props) => props.theme.fonts.body};
30:   font-size: 16px;
31:   font-weight: ${(props) => props.theme.fontWeights.medium};
32:   color: ${(props) => props.theme.colors.text.primary};
33: `;

================
File: src/features/auth/components/LoginDropDownPicker.js
================
 1: import React, { useState, useEffect } from "react";
 2: import { MaterialIcons } from "@expo/vector-icons";
 3: import {
 4:   DropdownContainer,
 5:   PlaceholderText,
 6:   SelectedItemWrapper,
 7:   FlagText,
 8:   CodeText,
 9:   StyledDropDownPicker,
10: } from "./LoginDropDownPicker.styles";
11: import CountryListItem from "./CountryListItem";
12: import { useTheme } from "styled-components/native";
13: const LoginDropDownPicker = ({
14:   countryCodes,
15:   selectedCountry,
16:   setSelectedCountry,
17:   style,
18: }) => {
19:   const [open, setOpen] = useState(false);
20:   const [selectedItem, setSelectedItem] = useState(null);
21:   const theme = useTheme();
22:   useEffect(() => {
23:     if (selectedCountry && countryCodes) {
24:       const item = countryCodes.find(
25:         (item) => item.countryName === selectedCountry
26:       );
27:       setSelectedItem(item);
28:     }
29:   }, [selectedCountry, countryCodes]);
30:   const handleSelectItem = (item) => {
31:     setSelectedCountry(item.countryName);
32:     setOpen(false);
33:   };
34:   const dropdownItems = countryCodes.map((item) => ({
35:     label: `${item.flag}  ${item.code}`,
36:     value: item.countryName,
37:     countryName: item.countryName,
38:     code: item.code,
39:     flag: item.flag,
40:   }));
41:   return (
42:     <DropdownContainer style={style}>
43:       <StyledDropDownPicker
44:         open={open}
45:         value={selectedCountry}
46:         items={dropdownItems}
47:         setOpen={setOpen}
48:         setValue={(val) => {
49:           const item = countryCodes.find((item) => item.countryName === val);
50:           setSelectedCountry(item?.countryName);
51:         }}
52:         listMode="SCROLLVIEW"
53:         renderListItem={({ item }) => (
54:           <CountryListItem item={item} onPress={handleSelectItem} />
55:         )}
56:       />
57:     </DropdownContainer>
58:   );
59: };
60: export default LoginDropDownPicker;

================
File: src/features/auth/components/LoginDropDownPicker.styles.js
================
 1: import styled from "styled-components/native";
 2: import DropDownPicker from "react-native-dropdown-picker";
 3: import { View, Text } from "react-native";
 4: export const DropdownContainer = styled(View)`
 5:   position: relative;
 6:   background-color: ${(props) => props.theme.colors.bg.secondary};
 7:   border-radius: 8px;
 8: `;
 9: export const PlaceholderText = styled(Text)`
10:   color: ${(props) => props.theme.colors.text.disabled};
11:   font-family: ${(props) => props.theme.fonts.body};
12:   font-size: 16px;
13:   padding-horizontal: ${(props) => props.theme.space[2]};
14: `;
15: export const SelectedItemWrapper = styled(View)`
16:   flex-direction: row;
17:   align-items: center;
18:   padding-horizontal: ${(props) => props.theme.space[2]};
19: `;
20: export const FlagText = styled(Text)`
21:   font-size: 20px;
22:   margin-right: ${(props) => props.theme.space[2]};
23: `;
24: export const CodeText = styled(Text)`
25:   font-family: ${(props) => props.theme.fonts.body};
26:   font-size: 16px;
27:   font-weight: ${(props) => props.theme.fontWeights.medium};
28:   color: ${(props) => props.theme.colors.text.primary};
29: `;
30: export const StyledDropDownPicker = styled(DropDownPicker).attrs(
31:   ({ theme }) => ({
32:     style: {
33:       backgroundColor: theme.colors.bg.secondary,
34:       borderColor: theme.colors.ui.tertiary,
35:       borderRadius: 8,
36:       minHeight: 50,
37:       borderWidth: 1,
38:       width: "100%",
39:     },
40:     dropDownContainerStyle: {
41:       position: "absolute",
42:       width: "100%",
43:       backgroundColor: theme.colors.bg.primary,
44:       borderColor: theme.colors.ui.tertiary,
45:       borderWidth: 1,
46:       borderTopWidth: 0,
47:       borderBottomLeftRadius: 8,
48:       borderBottomRightRadius: 8,
49:       elevation: 5,
50:       shadowColor: "#000",
51:       shadowOffset: { width: 0, height: 2 },
52:       shadowOpacity: 0.1,
53:       shadowRadius: 4,
54:       zIndex: 1000,
55:     },
56:     placeholderStyle: {
57:       color: theme.colors.text.disabled,
58:       fontFamily: theme.fonts.body,
59:       fontSize: 16,
60:     },
61:     selectedItemContainerStyle: {
62:       flexDirection: 'row',
63:       alignItems: 'center',
64:       paddingHorizontal: parseInt(theme.space[2]),
65:     },
66:     listItemContainerStyle: {
67:       height: 50,
68:       flexDirection: 'row',
69:       alignItems: 'center',
70:     },
71:     listParentContainerStyle: {
72:       maxHeight: 250,
73:     },
74:     itemSeparatorStyle: {
75:       backgroundColor: theme.colors.ui.tertiary,
76:       height: 0.5,
77:     },
78:   })
79: )`
80:   z-index: 2000;
81: `;

================
File: src/features/auth/screens/LoginScreen.js
================
  1: import React, { useState } from "react";
  2: import { View } from "react-native";
  3: import { Formik } from "formik";
  4: import * as yup from "yup";
  5: import { countryCodes } from "../../../data/mockData";
  6: import {
  7:   Container,
  8:   TopRightContainer,
  9:   Logo,
 10:   InputContainer,
 11:   FlexContainer,
 12:   TextInput,
 13:   Button,
 14:   ButtonText,
 15:   LinkText,
 16:   ErrorText,
 17:   TitleText,
 18: } from "./LoginScreen.styles";
 19: import { useAuthentication } from "../../../services/AuthenticationContext";
 20: import { useLanguage } from "../../../services/LanguageContext";
 21: import LoginDropDownPicker from "../components/LoginDropDownPicker";
 22: import SwitchContainer from "../../../components/Switch/Switch";
 23: import LanguageSelector from "../../../components/LanguageSelector/LanguageSelector";
 24: const validationSchema = yup.object().shape({
 25:   phone: yup
 26:     .string()
 27:     .required("Phone number is required")
 28:     .matches(/^\d+$/, "Phone number must contain only digits"),
 29:   password: yup
 30:     .string()
 31:     .min(6, "Password must be at least 6 characters")
 32:     .required("Password is required"),
 33: });
 34: export const LoginScreen = ({ navigation }) => {
 35:   const [selectedCountry, setSelectedCountry] = useState("United States");
 36:   const [containerWidth, setContainerWidth] = useState(380);
 37:   const [isMerchant, setIsMerchant] = useState(false);
 38:   const { onLogin, isLoading, error } = useAuthentication();
 39:   const { currentLanguage, changeLanguage } = useLanguage();
 40:   const handleLogin = (values) => {
 41:     const selectedCode =
 42:       countryCodes.find((country) => country.countryName === selectedCountry)
 43:         ?.code || "+1";
 44:     onLogin(
 45:       `${selectedCode}${values.phone}`,
 46:       values.password,
 47:       isMerchant ? "merchant" : "customer"
 48:     );
 49:   };
 50:   return (
 51:     <Container>
 52:       <LanguageSelector
 53:         currentLanguage={currentLanguage}
 54:         onChangeLanguage={changeLanguage}
 55:         style={{
 56:           position: "absolute",
 57:           top: 20,
 58:           left: 20,
 59:           zIndex: 1000,
 60:         }}
 61:       />
 62:       {}
 63:       <TopRightContainer style={{ transform: [{ scale: 0.8 }] }}>
 64:         <SwitchContainer
 65:           isOn={isMerchant}
 66:           setIsOn={setIsMerchant}
 67:           leftLabel="Customer"
 68:           rightLabel="Merchant"
 69:           variant="alternate"
 70:         />
 71:       </TopRightContainer>
 72:       <Logo source={require("../../../../assets/images/splash copy.png")} />
 73:       <TitleText variant="title">Login</TitleText>
 74:       <Formik
 75:         initialValues={{ phone: "", password: "" }}
 76:         validationSchema={validationSchema}
 77:         onSubmit={handleLogin}
 78:       >
 79:         {({
 80:           handleChange,
 81:           handleBlur,
 82:           handleSubmit,
 83:           values,
 84:           errors,
 85:           touched,
 86:           isValid,
 87:         }) => (
 88:           <>
 89:             <InputContainer
 90:               style={{ zIndex: 2000, elevation: 2000 }}
 91:               onLayout={(event) => {
 92:                 const { width } = event.nativeEvent.layout;
 93:                 setContainerWidth(width);
 94:               }}
 95:             >
 96:               <FlexContainer>
 97:                 <View
 98:                   style={{
 99:                     flex: 0.31,
100:                     marginRight: "2%",
101:                     zIndex: 9000,
102:                     elevation: 9000,
103:                   }}
104:                 >
105:                   <LoginDropDownPicker
106:                     countryCodes={countryCodes}
107:                     selectedCountry={selectedCountry}
108:                     setSelectedCountry={setSelectedCountry}
109:                     containerWidth={containerWidth}
110:                   />
111:                 </View>
112:                 <View style={{ flex: 0.69 }}>
113:                   <TextInput
114:                     placeholder="Phone number"
115:                     placeholderTextColor="#9C9C9C"
116:                     keyboardType="number-pad"
117:                     onChangeText={handleChange("phone")}
118:                     onBlur={handleBlur("phone")}
119:                     value={values.phone}
120:                   />
121:                 </View>
122:               </FlexContainer>
123:               {errors.phone && touched.phone && (
124:                 <ErrorText>{errors.phone}</ErrorText>
125:               )}
126:             </InputContainer>
127:             <InputContainer>
128:               <TextInput
129:                 placeholder="Password"
130:                 placeholderTextColor="#9C9C9C"
131:                 secureTextEntry
132:                 autoCapitalize="none"
133:                 onChangeText={handleChange("password")}
134:                 onBlur={handleBlur("password")}
135:                 value={values.password}
136:               />
137:               {errors.password && touched.password && (
138:                 <ErrorText>{errors.password}</ErrorText>
139:               )}
140:             </InputContainer>
141:             <Button onPress={handleSubmit} disabled={!isValid}>
142:               <ButtonText> {isLoading ? "Logging in..." : "Login"} </ButtonText>
143:             </Button>
144:             {error && <ErrorText>{error}</ErrorText>}
145:             <LinkText onPress={() => console.log("Navigate to SignUp")}>
146:               Don't have an account? Sign Up
147:             </LinkText>
148:           </>
149:         )}
150:       </Formik>
151:     </Container>
152:   );
153: };

================
File: src/features/auth/screens/LoginScreen.styles.js
================
 1: import styled from "styled-components/native";
 2: import { CustomText } from "../../../components/CustomText/CustomText";
 3: export const Container = styled.View`
 4:   flex: 1;
 5:   justify-content: flex-start;
 6:   align-items: center;
 7:   background-color: ${(props) => props.theme.colors.bg.primary};
 8:   padding: ${(props) => props.theme.space[4]};
 9: `;
10: export const Logo = styled.Image`
11:   height: 100px;
12:   width: 100px;
13:   margin-bottom: ${(props) => props.theme.space[4]};
14: `;
15: export const InputContainer = styled.View`
16:   width: 100%;
17:   margin-bottom: ${(props) => props.theme.space[3]};
18: `;
19: export const TextInput = styled.TextInput`
20:   width: 100%;
21:   padding: ${(props) => props.theme.space[3]};
22:   font-size: ${(props) => props.theme.fontSizes.body};
23:   color: ${(props) => props.theme.colors.text.primary};
24:   background-color: ${(props) => props.theme.colors.bg.secondary};
25:   border-radius: ${(props) => props.theme.space[2]};
26: `;
27: export const FlexContainer = styled.View`
28:   z-index: 9999;
29:   elevation: 9999;
30:   flex-direction: row;
31:   align-items: center;
32:   width: 100%;
33: `;
34: export const Button = styled.TouchableOpacity`
35:   width: 90%;
36:   padding: ${(props) => props.theme.space[3]};
37:   background-color: ${(props) => props.theme.colors.ui.primary};
38:   border-radius: ${(props) => props.theme.space[1]};
39:   align-items: center;
40:   margin-top: ${(props) => props.theme.space[3]};
41: `;
42: export const ButtonText = styled(CustomText)`
43:   color: ${(props) => props.theme.colors.text.inverse};
44:   font-size: ${(props) => props.theme.fontSizes.body};
45: `;
46: export const LinkText = styled(CustomText)`
47:   margin-top: ${(props) => props.theme.space[2]};
48:   color: ${(props) => props.theme.colors.text.secondary};
49:   text-decoration: underline;
50:   font-size: ${(props) => props.theme.fontSizes.caption};
51: `;
52: export const ErrorText = styled(CustomText)`
53:   color: ${(props) => props.theme.colors.text.error};
54:   font-size: ${(props) => props.theme.fontSizes.caption};
55:   margin-top: ${(props) => props.theme.space[1]};
56: `;
57: export const TitleText = styled(CustomText)`
58:   color: ${(props) => props.theme.colors.text.primary};
59:   padding-bottom: ${(props) => props.theme.space[4]};
60:   font-size: ${(props) => props.theme.fontSizes.title};
61: `;
62: export const TopRightContainer = styled.View`
63:   position: absolute;
64:   top: ${(props) => props.theme.space[0]};
65:   right: ${(props) => props.theme.space[0]};
66:   z-index: 10000;
67: `;

================
File: src/features/customer/reservations/components/PastReservationCard.js
================
 1: import React from "react";
 2: import { View } from "react-native";
 3: import { useNavigation } from "@react-navigation/native";
 4: import { format } from "date-fns";
 5: import styled, { useTheme } from "styled-components/native";
 6: import { Spacer } from "../../../../components/Spacer/Spacer";
 7: import { CustomText } from "../../../../components/CustomText/CustomText";
 8: import {
 9:   PastReservationCardContainer,
10:   CircleImage,
11:   InfoContainer,
12:   InfoText,
13:   StatusText,
14:   ViewStoreButton,
15:   ViewStoreButtonText,
16: } from "./PastReservationCard.styles";
17: const SelectedPastCardContainer = styled(PastReservationCardContainer)`
18:   background-color: ${(props) =>
19:     props.isSelected ? props.theme.colors.bg.secondary : "transparent"};
20:   border-radius: 8px;
21: `;
22: export const PastReservationCard = ({
23:   reservation = {},
24:   isSelected = false,
25: }) => {
26:   const navigation = useNavigation();
27:   const theme = useTheme();
28:   const {
29:     restaurant = {},
30:     date = "2024-04-01",
31:     status = "Completed",
32:   } = reservation;
33:   const formattedDate =
34:     typeof date === "string" ? date : format(date, "MMM d, yyyy");
35:   return (
36:     <SelectedPastCardContainer isSelected={isSelected}>
37:       <CircleImage source={{ uri: restaurant.photos[0] }} />
38:       <InfoContainer>
39:         <CustomText variant="title">{restaurant.name}</CustomText>
40:         <Spacer position="top" size="small" />
41:         <InfoText>Reserved Date: {formattedDate}</InfoText>
42:         <Spacer position="top" size="small" />
43:         <StatusText>{status}</StatusText>
44:       </InfoContainer>
45:       <ViewStoreButton
46:         onPress={() => {
47:           navigation.navigate("RestaurantDetailScreen", {
48:             restaurant: restaurant,
49:           });
50:         }}
51:       >
52:         <ViewStoreButtonText>View</ViewStoreButtonText>
53:       </ViewStoreButton>
54:     </SelectedPastCardContainer>
55:   );
56: };

================
File: src/features/customer/reservations/components/PastReservationCard.styles.js
================
 1: import styled from "styled-components/native";
 2: import { View, Text, Image, TouchableOpacity } from "react-native";
 3: export const PastReservationCardContainer = styled(View)`
 4:   flex-direction: row;
 5:   align-items: center;
 6:   padding-left: ${(props) => props.theme.space[3]};
 7:   padding-right: ${(props) => props.theme.space[3]};
 8:   border-radius: 8px;
 9:   margin-vertical: ${(props) => props.theme.space[2]};
10: `;
11: export const CircleImage = styled(Image)`
12:   width: 50px;
13:   height: 50px;
14:   border-radius: 25px;
15: `;
16: export const InfoContainer = styled(View)`
17:   flex: 1;
18:   margin-left: ${(props) => props.theme.space[3]};
19: `;
20: export const InfoText = styled(Text)`
21:   font-family: ${(props) => props.theme.fonts.body};
22:   font-size: ${(props) => props.theme.fontSizes.body};
23:   color: ${(props) => props.theme.colors.text.primary};
24: `;
25: export const StatusText = styled(Text)`
26:   font-family: ${(props) => props.theme.fonts.body};
27:   font-size: ${(props) => props.theme.fontSizes.body};
28:   color: ${(props) => props.theme.colors.text.primary};
29: `;
30: export const ViewStoreButton = styled(TouchableOpacity)`
31:   padding-vertical: ${(props) => props.theme.space[2]};
32:   padding-horizontal: ${(props) => props.theme.space[2]};
33:   background-color: ${(props) => props.theme.colors.ui.tertiary};
34:   border-radius: 25px;
35: `;
36: export const ViewStoreButtonText = styled(Text)`
37:   font-family: ${(props) => props.theme.fonts.body};
38:   font-size: ${(props) => props.theme.fontSizes.button};
39:   color: ${(props) => props.theme.colors.text.primary};
40:   text-align: center;
41: `;

================
File: src/features/customer/reservations/components/ReservationCard.js
================
  1: import React from "react";
  2: import { View } from "react-native";
  3: import { format, isToday, isTomorrow } from "date-fns";
  4: import styled, { useTheme } from "styled-components/native";
  5: import { Spacer } from "../../../../components/Spacer/Spacer";
  6: import { CustomText } from "../../../../components/CustomText/CustomText";
  7: import { MaterialIcons } from "@expo/vector-icons";
  8: import {
  9:   ReservationCardContainer,
 10:   ReservationCardCover,
 11:   Info,
 12:   Section,
 13:   ReservationDetails,
 14:   DetailText,
 15:   TrackButton,
 16:   TrackButtonText,
 17: } from "./ReservationCard.styles";
 18: const SelectedIndicator = styled.View`
 19:   position: absolute;
 20:   top: 0;
 21:   left: 0;
 22:   right: 0;
 23:   bottom: 0;
 24:   border: 2px solid ${(props) => props.theme.colors.ui.primary};
 25:   border-radius: 8px;
 26:   pointer-events: none;
 27: `;
 28: const StatusContainer = styled.View`
 29:   position: absolute;
 30:   top: ${(props) => props.theme.space[2]};
 31:   right: ${(props) => props.theme.space[2]};
 32:   background-color: ${(props) => {
 33:     switch (props.status) {
 34:       case "Confirmed":
 35:         return "#4CAF50";
 36:       case "Pending":
 37:         return "#FFC107";
 38:       default:
 39:         return "#757575";
 40:     }
 41:   }};
 42:   padding: ${(props) => props.theme.space[1]} ${(props) => props.theme.space[2]};
 43:   border-radius: 4px;
 44: `;
 45: const StatusText = styled(CustomText)`
 46:   color: white;
 47:   font-size: ${(props) => props.theme.fontSizes.caption};
 48:   font-weight: bold;
 49: `;
 50: const IconRow = styled.View`
 51:   flex-direction: row;
 52:   align-items: center;
 53:   margin-vertical: ${(props) => props.theme.space[1]};
 54: `;
 55: const formatDate = (date) => {
 56:   if (isToday(date)) return "Today";
 57:   if (isTomorrow(date)) return "Tomorrow";
 58:   return format(date, "EEE, MMM d");
 59: };
 60: export const ReservationCard = ({ reservation = {}, isSelected = false }) => {
 61:   const theme = useTheme();
 62:   const {
 63:     restaurant = {},
 64:     date = new Date(),
 65:     time = "7:00 PM",
 66:     seatsNumber = 4,
 67:     status = "Confirmed",
 68:   } = reservation;
 69:   return (
 70:     <ReservationCardContainer elevation={0}>
 71:       <ReservationCardCover source={{ uri: restaurant.photos[0] }} />
 72:       <StatusContainer status={status}>
 73:         <StatusText>{status}</StatusText>
 74:       </StatusContainer>
 75:       <Info>
 76:         <CustomText variant="title">{restaurant.name}</CustomText>
 77:         <Section>
 78:           <ReservationDetails>
 79:             <IconRow>
 80:               <MaterialIcons
 81:                 name="event"
 82:                 size={16}
 83:                 color={theme.colors.text.primary}
 84:               />
 85:               <Spacer position="left" size="small" />
 86:               <DetailText>{formatDate(new Date(date))}</DetailText>
 87:             </IconRow>
 88:             <IconRow>
 89:               <MaterialIcons
 90:                 name="schedule"
 91:                 size={16}
 92:                 color={theme.colors.text.primary}
 93:               />
 94:               <Spacer position="left" size="small" />
 95:               <DetailText>{time}</DetailText>
 96:             </IconRow>
 97:             <IconRow>
 98:               <MaterialIcons
 99:                 name="people"
100:                 size={16}
101:                 color={theme.colors.text.primary}
102:               />
103:               <Spacer position="left" size="small" />
104:               <DetailText>
105:                 {seatsNumber} {seatsNumber === 1 ? "person" : "people"}
106:               </DetailText>
107:             </IconRow>
108:           </ReservationDetails>
109:           <TrackButton>
110:             <TrackButtonText>Details</TrackButtonText>
111:           </TrackButton>
112:         </Section>
113:       </Info>
114:       {isSelected && <SelectedIndicator />}
115:     </ReservationCardContainer>
116:   );
117: };

================
File: src/features/customer/reservations/components/ReservationCard.styles.js
================
 1: import styled from "styled-components/native";
 2: import { Image, View, TouchableOpacity, Text } from "react-native";
 3: import { Card } from "react-native-paper";
 4: export const ReservationCardContainer = styled(Card)`
 5:   background-color: ${(props) => props.theme.colors.bg.primary};
 6:   width: 98%;
 7:   align-self: center;
 8:   border-radius: 8px;
 9:   /* Remove elevation for Android */
10:   elevation: 0;
11:   /* Remove shadow for iOS */
12:   shadow-color: transparent;
13:   shadow-opacity: 0;
14:   shadow-radius: 0px;
15: `;
16: export const ReservationCardCover = styled(Card.Cover)`
17:   padding: ${(props) => props.theme.space[3]};
18:   background-color: ${(props) => props.theme.colors.bg.primary};
19:   height: 150px;
20:   border-top-left-radius: 8px;
21:   border-top-right-radius: 8px;
22: `;
23: export const Info = styled(View)`
24:   padding-left: ${(props) => props.theme.space[3]};
25:   padding-right: ${(props) => props.theme.space[3]};
26:   padding-bottom: 0;
27:   margin-top: -5px;
28: `;
29: export const Section = styled(View)`
30:   flex-direction: row;
31:   justify-content: space-between;
32:   align-items: center;
33:   margin-top: ${(props) => props.theme.space[2]};
34: `;
35: export const ReservationDetails = styled(View)`
36:   flex-direction: column;
37: `;
38: export const DetailText = styled(Text)`
39:   font-family: ${(props) => props.theme.fonts.body};
40:   font-size: ${(props) => props.theme.fontSizes.body};
41:   color: ${(props) => props.theme.colors.text.primary};
42: `;
43: export const TrackButton = styled(TouchableOpacity)`
44:   padding: ${(props) => props.theme.space[1]} ${(props) => props.theme.space[2]};
45:   background-color: ${(props) => props.theme.colors.ui.primary};
46:   border-radius: 25px;
47: `;
48: export const TrackButtonText = styled(Text)`
49:   padding: ${(props) => props.theme.space[2]};
50:   font-family: ${(props) => props.theme.fonts.body};
51:   font-size: ${(props) => props.theme.fontSizes.body};
52:   color: ${(props) => props.theme.colors.bg.primary};
53:   text-align: center;
54: `;

================
File: src/features/customer/reservations/components/ReservationLayoutView.js
================
  1: import React, { useState } from "react";
  2: import { View, TouchableOpacity } from "react-native";
  3: import styled from "styled-components/native";
  4: import { MaterialIcons } from "@expo/vector-icons";
  5: import { CustomText } from "../../../../components/CustomText/CustomText";
  6: import WebApp from "../../../../components/WebApp/WebApp";
  7: import ErrorBoundary from "../../../../components/ErrorBoundary/ErrorBoundary";
  8: const Container = styled.View`
  9:   min-height: 250px;
 10:   margin-bottom: ${(props) => props.theme.space[3]};
 11:   border-radius: 8px;
 12:   overflow: hidden;
 13:   background-color: ${(props) => props.theme.colors.bg.secondary};
 14: `;
 15: const InfoBar = styled.View`
 16:   flex-direction: row;
 17:   justify-content: space-between;
 18:   align-items: center;
 19:   padding: ${(props) => props.theme.space[2]};
 20:   background-color: ${(props) => props.theme.colors.ui.tertiary};
 21: `;
 22: const InfoText = styled(CustomText)`
 23:   font-size: ${(props) => props.theme.fontSizes.caption};
 24:   color: ${(props) => props.theme.colors.text.secondary};
 25: `;
 26: const SelectedTable = styled(CustomText)`
 27:   font-weight: ${(props) => props.theme.fontWeights.bold};
 28:   color: ${(props) => props.theme.colors.text.primary};
 29: `;
 30: const LegendContainer = styled.View`
 31:   flex-direction: row;
 32:   flex-wrap: wrap;
 33:   padding: ${(props) => props.theme.space[2]};
 34:   background-color: ${(props) => props.theme.colors.bg.primary};
 35:   border-top-width: 1px;
 36:   border-top-color: ${(props) => props.theme.colors.ui.tertiary};
 37: `;
 38: const LegendItem = styled.View`
 39:   flex-direction: row;
 40:   align-items: center;
 41:   margin-right: ${(props) => props.theme.space[3]};
 42:   margin-bottom: ${(props) => props.theme.space[1]};
 43: `;
 44: const LegendColor = styled.View`
 45:   width: 12px;
 46:   height: 12px;
 47:   border-radius: 6px;
 48:   margin-right: ${(props) => props.theme.space[1]};
 49:   background-color: ${(props) => props.color};
 50: `;
 51: const LegendText = styled(CustomText)`
 52:   font-size: ${(props) => props.theme.fontSizes.caption};
 53: `;
 54: const ReservationLayoutView = ({
 55:   partySize,
 56:   selectedTime,
 57:   selectedDate,
 58:   onTableSelect,
 59:   onInteractionStart,
 60:   onInteractionEnd,
 61: }) => {
 62:   const [selectedItems, setSelectedItems] = useState([]);
 63:   const handleSelectedItems = (items) => {
 64:     setSelectedItems(items);
 65:     if (items.length === 1 && onTableSelect) {
 66:       onTableSelect(items[0]);
 67:     } else if (items.length === 0 && onTableSelect) {
 68:       onTableSelect(null);
 69:     }
 70:   };
 71:   return (
 72:     <Container>
 73:       <InfoBar>
 74:         <InfoText>
 75:           Preview available tables for {partySize}{" "}
 76:           {partySize === 1 ? "person" : "people"} at {selectedTime}
 77:         </InfoText>
 78:         {selectedItems.length > 0 && (
 79:           <SelectedTable>Selected: {selectedItems.join(", ")}</SelectedTable>
 80:         )}
 81:       </InfoBar>
 82:       <ErrorBoundary>
 83:         <WebApp
 84:           onInteractionStart={onInteractionStart}
 85:           onInteractionEnd={onInteractionEnd}
 86:           onSelectedItemsChange={handleSelectedItems}
 87:         />
 88:       </ErrorBoundary>
 89:       <LegendContainer>
 90:         <LegendItem>
 91:           <LegendColor color="#4CAF50" />
 92:           <LegendText>Selected</LegendText>
 93:         </LegendItem>
 94:         <LegendItem>
 95:           <LegendColor color="#F44336" />
 96:           <LegendText>Occupied</LegendText>
 97:         </LegendItem>
 98:         <LegendItem>
 99:           <LegendColor color="#FFC107" />
100:           <LegendText>Reserved</LegendText>
101:         </LegendItem>
102:       </LegendContainer>
103:     </Container>
104:   );
105: };
106: export default ReservationLayoutView;

================
File: src/features/customer/reservations/screens/ReservationFlow.js
================
  1: import React, { useState, useEffect, useRef } from "react";
  2: import {
  3:   View,
  4:   ScrollView,
  5:   TouchableOpacity,
  6:   Alert,
  7:   FlatList,
  8:   Platform,
  9: } from "react-native";
 10: import styled from "styled-components/native";
 11: import { MaterialIcons } from "@expo/vector-icons";
 12: import {
 13:   format,
 14:   addDays,
 15:   addMonths,
 16:   isSameDay,
 17:   isWeekend,
 18:   getDay,
 19: } from "date-fns";
 20: import { CustomText } from "../../../../components/CustomText/CustomText";
 21: import WebApp from "../../../../components/WebApp/WebApp";
 22: import ReservationLayoutView from "../components/ReservationLayoutView";
 23: import { TimeScroll } from "../../../../components/TimeScroll/TimeScroll";
 24: import { Separator } from "../../../../components/Separator/Separator";
 25: import { Spacer } from "../../../../components/Spacer/Spacer";
 26: import { generateTimeSlots } from "../../../merchant/reservations/utils/timeUtils";
 27: const Container = styled(ScrollView)`
 28:   flex: 1;
 29:   background-color: ${(props) => props.theme.colors.bg.primary};
 30:   padding-horizontal: ${(props) => props.theme.space[3]};
 31: `;
 32: const HeaderContainer = styled.View`
 33:   flex-direction: row;
 34:   align-items: center;
 35:   justify-content: space-between;
 36:   margin-top: ${(props) => props.theme.space[3]};
 37:   margin-bottom: ${(props) => props.theme.space[3]};
 38: `;
 39: // Enhanced Date Selector
 40: const DateSelectorContainer = styled.View`
 41:   margin-bottom: ${(props) => props.theme.space[3]};
 42: `;
 43: const DateItemsContainer = styled.View`
 44:   margin-vertical: ${(props) => props.theme.space[2]};
 45: `;
 46: const DateOption = styled(TouchableOpacity)`
 47:   padding-vertical: ${(props) => props.theme.space[2]};
 48:   padding-horizontal: ${(props) => props.theme.space[3]};
 49:   margin-right: ${(props) => props.theme.space[2]};
 50:   background-color: ${(props) =>
 51:     props.selected
 52:       ? props.theme.colors.ui.primary
 53:       : props.theme.colors.bg.secondary};
 54:   border-radius: 20px;
 55:   min-width: 80px;
 56:   align-items: center;
 57:   ${(props) =>
 58:     props.unavailable &&
 59:     `
 60:     opacity: 0.5;
 61:   `}
 62:   elevation: ${(props) => (props.selected ? 3 : 0)};
 63:   shadow-opacity: ${(props) => (props.selected ? 0.2 : 0)};
 64:   shadow-radius: 4px;
 65:   shadow-color: #000;
 66:   shadow-offset: 0px 2px;
 67: `;
 68: const DateText = styled(CustomText)`
 69:   color: ${(props) =>
 70:     props.selected
 71:       ? props.theme.colors.text.inverse
 72:       : props.theme.colors.text.primary};
 73:   font-size: ${(props) => props.theme.fontSizes.caption};
 74:   font-weight: ${(props) =>
 75:     props.selected
 76:       ? props.theme.fontWeights.bold
 77:       : props.theme.fontWeights.regular};
 78: `;
 79: const WeekdayText = styled(CustomText)`
 80:   color: ${(props) =>
 81:     props.selected
 82:       ? props.theme.colors.text.inverse
 83:       : props.theme.colors.text.secondary};
 84:   font-size: ${(props) => props.theme.fontSizes.caption};
 85:   margin-top: 2px;
 86: `;
 87: const AvailabilityIndicator = styled.View`
 88:   width: 6px;
 89:   height: 6px;
 90:   border-radius: 3px;
 91:   margin-top: 2px;
 92:   background-color: ${(props) => {
 93:     if (props.selected) return props.theme.colors.text.inverse;
 94:     switch (props.level) {
 95:       case "high":
 96:         return "#4CAF50";
 97:       case "medium":
 98:         return "#FFC107";
 99:       case "low":
100:         return "#F44336";
101:       default:
102:         return "#BDBDBD";
103:     }
104:   }};
105: `;
106: // Enhanced Party Size Selector
107: const PartySelectorContainer = styled.View`
108:   margin-bottom: ${(props) => props.theme.space[3]};
109: `;
110: const PartyOptionsContainer = styled.View`
111:   flex-direction: row;
112:   flex-wrap: wrap;
113:   margin-top: ${(props) => props.theme.space[2]};
114: `;
115: const PartyOption = styled(TouchableOpacity)`
116:   min-width: 50px;
117:   height: 50px;
118:   margin-right: ${(props) => props.theme.space[2]};
119:   margin-bottom: ${(props) => props.theme.space[2]};
120:   background-color: ${(props) =>
121:     props.selected
122:       ? props.theme.colors.ui.primary
123:       : props.theme.colors.bg.secondary};
124:   border-radius: 25px;
125:   align-items: center;
126:   justify-content: center;
127:   elevation: ${(props) => (props.selected ? 3 : 0)};
128:   shadow-opacity: ${(props) => (props.selected ? 0.2 : 0)};
129:   shadow-radius: 4px;
130:   shadow-color: #000;
131:   shadow-offset: 0px 2px;
132: `;
133: const PartyText = styled(CustomText)`
134:   color: ${(props) =>
135:     props.selected
136:       ? props.theme.colors.text.inverse
137:       : props.theme.colors.text.primary};
138:   font-size: ${(props) => props.theme.fontSizes.body};
139:   font-weight: ${(props) =>
140:     props.selected
141:       ? props.theme.fontWeights.bold
142:       : props.theme.fontWeights.regular};
143: `;
144: // Enhanced Time Selector
145: const TimeContainer = styled.View`
146:   margin-bottom: ${(props) => props.theme.space[3]};
147: `;
148: const TimeOptionsContainer = styled.View`
149:   flex-direction: row;
150:   flex-wrap: wrap;
151:   margin-top: ${(props) => props.theme.space[2]};
152: `;
153: const TimeOption = styled(TouchableOpacity)`
154:   min-width: 80px;
155:   padding-vertical: ${(props) => props.theme.space[2]};
156:   padding-horizontal: ${(props) => props.theme.space[2]};
157:   margin-right: ${(props) => props.theme.space[2]};
158:   margin-bottom: ${(props) => props.theme.space[2]};
159:   background-color: ${(props) =>
160:     props.selected
161:       ? props.theme.colors.ui.primary
162:       : props.theme.colors.bg.secondary};
163:   border-radius: 12px;
164:   align-items: center;
165:   justify-content: center;
166:   ${(props) =>
167:     props.availability === "low" &&
168:     `
169:     border: 1px solid #F44336;
170:   `}
171:   ${(props) =>
172:     props.availability === "medium" &&
173:     `
174:     border: 1px solid #FFC107;
175:   `}
176:   elevation: ${(props) => (props.selected ? 3 : 0)};
177:   shadow-opacity: ${(props) => (props.selected ? 0.2 : 0)};
178:   shadow-radius: 4px;
179:   shadow-color: #000;
180:   shadow-offset: 0px 2px;
181: `;
182: const TimeText = styled(CustomText)`
183:   color: ${(props) =>
184:     props.selected
185:       ? props.theme.colors.text.inverse
186:       : props.theme.colors.text.primary};
187:   font-size: ${(props) => props.theme.fontSizes.body};
188:   font-weight: ${(props) =>
189:     props.selected
190:       ? props.theme.fontWeights.bold
191:       : props.theme.fontWeights.regular};
192: `;
193: const TimeAvailabilityIndicator = styled.View`
194:   width: 10px;
195:   height: 10px;
196:   border-radius: 5px;
197:   margin-top: 4px;
198:   background-color: ${(props) => {
199:     if (props.selected) return props.theme.colors.text.inverse;
200:     switch (props.level) {
201:       case "high":
202:         return "#4CAF50";
203:       case "medium":
204:         return "#FFC107";
205:       case "low":
206:         return "#F44336";
207:       default:
208:         return "#BDBDBD";
209:     }
210:   }};
211: `;
212: const AvailabilityRow = styled.View`
213:   flex-direction: row;
214:   align-items: center;
215:   margin-top: ${(props) => props.theme.space[2]};
216: `;
217: const AvailabilityText = styled(CustomText)`
218:   font-size: ${(props) => props.theme.fontSizes.caption};
219:   color: ${(props) => props.theme.colors.text.secondary};
220:   margin-left: ${(props) => props.theme.space[1]};
221: `;
222: const ToggleButton = styled(TouchableOpacity)`
223:   flex-direction: row;
224:   align-items: center;
225:   padding: ${(props) => props.theme.space[2]};
226:   background-color: ${(props) => props.theme.colors.bg.secondary};
227:   border-radius: 8px;
228:   margin-bottom: ${(props) => props.theme.space[2]};
229:   elevation: 1;
230:   shadow-opacity: 0.1;
231:   shadow-radius: 4px;
232:   shadow-color: #000;
233:   shadow-offset: 0px 2px;
234: `;
235: const ToggleText = styled(CustomText)`
236:   font-size: ${(props) => props.theme.fontSizes.body};
237:   margin-left: ${(props) => props.theme.space[2]};
238: `;
239: const LayoutContainer = styled.View`
240:   min-height: 250px;
241:   margin-bottom: ${(props) => props.theme.space[3]};
242:   border-radius: 12px;
243:   overflow: hidden;
244:   background-color: ${(props) => props.theme.colors.bg.secondary};
245:   elevation: 1;
246:   shadow-opacity: 0.1;
247:   shadow-radius: 4px;
248:   shadow-color: #000;
249:   shadow-offset: 0px 2px;
250: `;
251: const NotesInput = styled.TextInput`
252:   padding: ${(props) => props.theme.space[3]};
253:   background-color: ${(props) => props.theme.colors.bg.secondary};
254:   border-radius: 12px;
255:   margin-bottom: ${(props) => props.theme.space[3]};
256:   min-height: 100px;
257:   color: ${(props) => props.theme.colors.text.primary};
258:   elevation: 1;
259:   shadow-opacity: 0.1;
260:   shadow-radius: 4px;
261:   shadow-color: #000;
262:   shadow-offset: 0px 2px;
263: `;
264: const ReserveButton = styled(TouchableOpacity)`
265:   background-color: ${(props) => props.theme.colors.ui.primary};
266:   padding: ${(props) => props.theme.space[3]};
267:   border-radius: 12px;
268:   align-items: center;
269:   justify-content: center;
270:   margin-bottom: ${(props) => props.theme.space[4]};
271:   elevation: 3;
272:   shadow-opacity: 0.2;
273:   shadow-radius: 4px;
274:   shadow-color: #000;
275:   shadow-offset: 0px 2px;
276: `;
277: const ReserveButtonText = styled(CustomText)`
278:   color: ${(props) => props.theme.colors.text.inverse};
279:   font-size: ${(props) => props.theme.fontSizes.button};
280:   font-weight: ${(props) => props.theme.fontWeights.bold};
281: `;
282: const SectionTitle = styled(CustomText)`
283:   font-size: ${(props) => props.theme.fontSizes.body};
284:   font-weight: ${(props) => props.theme.fontWeights.bold};
285:   margin-bottom: ${(props) => props.theme.space[2]};
286: `;
287: // Helper for determining day availability (would come from restaurant settings)
288: const getDayAvailability = (date) => {
289:   const day = getDay(date); // 0 = Sunday, 6 = Saturday
290:   // Example: Lower availability on weekends
291:   if (day === 0 || day === 6) return "medium";
292:   // Example: No availability on Mondays (day === 1)
293:   if (day === 1) return "unavailable";
294:   return "high";
295: };
296: // Get weekday name
297: const getWeekdayName = (date) => {
298:   const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
299:   return days[getDay(date)];
300: };
301: const ReservationFlow = ({ restaurant, onComplete }) => {
302:   // Reference for date selection horizontal scroll
303:   const dateScrollRef = useRef(null);
304:   // State variables
305:   const [selectedDate, setSelectedDate] = useState(new Date());
306:   const [partySize, setPartySize] = useState(2);
307:   const [allTimeSlots, setAllTimeSlots] = useState(generateTimeSlots());
308:   const [availableTimes, setAvailableTimes] = useState([]);
309:   const [selectedTime, setSelectedTime] = useState(null);
310:   const [showLayout, setShowLayout] = useState(false);
311:   const [selectedTable, setSelectedTable] = useState(null);
312:   const [notes, setNotes] = useState("");
313:   const [availability, setAvailability] = useState("high");
314:   const [scrollEnabled, setScrollEnabled] = useState(true);
315:   // Generate dates for selection (up to 2 months)
316:   const generateDates = () => {
317:     const dates = [];
318:     const today = new Date();
319:     // Generate dates for the next 2 months
320:     for (let i = 0; i < 60; i++) {
321:       const date = addDays(today, i);
322:       const availability = getDayAvailability(date);
323:       dates.push({
324:         date,
325:         label: i === 0 ? "Today" : i === 1 ? "Tomorrow" : format(date, "MMM d"),
326:         weekday: getWeekdayName(date),
327:         availability,
328:         isUnavailable: availability === "unavailable",
329:       });
330:     }
331:     return dates;
332:   };
333:   // Generate party size options (1-20 default, can be customized by restaurant)
334:   const generatePartySizeOptions = () => {
335:     // Default max party size
336:     const maxPartySize = restaurant?.settings?.maxReservationSize || 20;
337:     const sizes = [];
338:     for (let i = 1; i <= maxPartySize; i++) {
339:       sizes.push(i);
340:     }
341:     return sizes;
342:   };
343:   const [dateOptions] = useState(generateDates);
344:   const [partySizeOptions] = useState(generatePartySizeOptions);
345:   // Filter available time slots based on day and party size
346:   useEffect(() => {
347:     // In a real app, this would be based on restaurant settings and availability
348:     const allSlots = generateTimeSlots();
349:     // Filter times based on day of week
350:     const dayOfWeek = getDay(selectedDate);
351:     let filteredTimes = allSlots;
352:     // Example: Weekend has different hours
353:     if (dayOfWeek === 0 || dayOfWeek === 6) {
354:       filteredTimes = allSlots.filter((time) => {
355:         const hour = parseInt(time.split(":")[0]);
356:         return hour >= 10 && hour <= 22;
357:       });
358:     } else {
359:       filteredTimes = allSlots.filter((time) => {
360:         const hour = parseInt(time.split(":")[0]);
361:         return hour >= 11 && hour <= 21;
362:       });
363:     }
364:     setAvailableTimes(filteredTimes);
365:     // Select a default time (middle of the day)
366:     if (!selectedTime || !filteredTimes.includes(selectedTime)) {
367:       const defaultTimeIndex = Math.floor(filteredTimes.length / 2);
368:       setSelectedTime(filteredTimes[defaultTimeIndex]);
369:     }
370:   }, [selectedDate]);
371:   // Calculate availability based on time and party size
372:   useEffect(() => {
373:     // In a real app, this would make an API call to check availability
374:     if (!selectedTime) return;
375:     const timeIndex = availableTimes.indexOf(selectedTime);
376:     const hour = parseInt(selectedTime.split(":")[0]);
377:     // Example logic for availability calculation
378:     if (partySize > 10) {
379:       setAvailability("low");
380:     } else if ((hour >= 18 && hour <= 20) || partySize > 6) {
381:       setAvailability("medium");
382:     } else {
383:       setAvailability("high");
384:     }
385:   }, [selectedTime, partySize, availableTimes]);
386:   const handleInteractionStart = () => {
387:     setScrollEnabled(false);
388:   };
389:   const handleInteractionEnd = () => {
390:     setScrollEnabled(true);
391:   };
392:   // Handle reservation submission
393:   const handleReservePress = () => {
394:     if (!selectedDate || !selectedTime) {
395:       Alert.alert(
396:         "Missing Information",
397:         "Please select a date and time for your reservation."
398:       );
399:       return;
400:     }
401:     // In a real app, this would make an API call to create the reservation
402:     const reservationDetails = {
403:       restaurant: restaurant.name,
404:       date: format(selectedDate, "yyyy-MM-dd"),
405:       time: selectedTime,
406:       partySize: partySize,
407:       tableId: selectedTable || "Not specified",
408:       notes: notes,
409:       status: "Confirmed",
410:     };
411:     Alert.alert(
412:       "Reservation Confirmed!",
413:       `Your reservation for ${partySize} ${
414:         partySize > 1 ? "people" : "person"
415:       } at ${selectedTime} on ${format(
416:         selectedDate,
417:         "EEE, MMM d"
418:       )} has been confirmed.`,
419:       [
420:         {
421:           text: "OK",
422:           onPress: () => onComplete && onComplete(reservationDetails),
423:         },
424:       ]
425:     );
426:   };
427:   const handleTableSelection = (tableId) => {
428:     setSelectedTable(tableId);
429:   };
430:   // Get availability color indicator
431:   const getAvailabilityColor = (level) => {
432:     switch (level) {
433:       case "high":
434:         return "#4CAF50";
435:       case "medium":
436:         return "#FFC107";
437:       case "low":
438:         return "#F44336";
439:       default:
440:         return "#BDBDBD";
441:     }
442:   };
443:   const renderAvailabilityLegend = () => {
444:     return (
445:       <View style={{ flexDirection: "row", marginTop: 8, marginBottom: 16 }}>
446:         <AvailabilityRow>
447:           <View
448:             style={{
449:               width: 10,
450:               height: 10,
451:               borderRadius: 5,
452:               backgroundColor: "#4CAF50",
453:               marginRight: 4,
454:             }}
455:           />
456:           <AvailabilityText>High</AvailabilityText>
457:         </AvailabilityRow>
458:         <AvailabilityRow style={{ marginLeft: 12 }}>
459:           <View
460:             style={{
461:               width: 10,
462:               height: 10,
463:               borderRadius: 5,
464:               backgroundColor: "#FFC107",
465:               marginRight: 4,
466:             }}
467:           />
468:           <AvailabilityText>Limited</AvailabilityText>
469:         </AvailabilityRow>
470:         <AvailabilityRow style={{ marginLeft: 12 }}>
471:           <View
472:             style={{
473:               width: 10,
474:               height: 10,
475:               borderRadius: 5,
476:               backgroundColor: "#F44336",
477:               marginRight: 4,
478:             }}
479:           />
480:           <AvailabilityText>Few spots</AvailabilityText>
481:         </AvailabilityRow>
482:       </View>
483:     );
484:   };
485:   return (
486:     <Container scrollEnabled={scrollEnabled}>
487:       <HeaderContainer>
488:         <CustomText variant="h4">Make a Reservation</CustomText>
489:       </HeaderContainer>
490:       {/* Date Selection */}
491:       <DateSelectorContainer>
492:         <SectionTitle>Date</SectionTitle>
493:         <DateItemsContainer>
494:           <FlatList
495:             ref={dateScrollRef}
496:             horizontal
497:             showsHorizontalScrollIndicator={false}
498:             data={dateOptions}
499:             keyExtractor={(item, index) => `date-${index}`}
500:             renderItem={({ item }) => (
501:               <DateOption
502:                 selected={isSameDay(selectedDate, item.date)}
503:                 unavailable={item.isUnavailable}
504:                 onPress={() =>
505:                   !item.isUnavailable && setSelectedDate(item.date)
506:                 }
507:               >
508:                 <DateText selected={isSameDay(selectedDate, item.date)}>
509:                   {item.label}
510:                 </DateText>
511:                 <WeekdayText selected={isSameDay(selectedDate, item.date)}>
512:                   {item.weekday}
513:                 </WeekdayText>
514:                 {!item.isUnavailable && (
515:                   <AvailabilityIndicator
516:                     level={item.availability}
517:                     selected={isSameDay(selectedDate, item.date)}
518:                   />
519:                 )}
520:               </DateOption>
521:             )}
522:             initialNumToRender={7}
523:             maxToRenderPerBatch={10}
524:           />
525:         </DateItemsContainer>
526:       </DateSelectorContainer>
527:       {/* Party Size Selection */}
528:       <PartySelectorContainer>
529:         <SectionTitle>Party Size</SectionTitle>
530:         <ScrollView horizontal showsHorizontalScrollIndicator={false}>
531:           <PartyOptionsContainer>
532:             {partySizeOptions.map((size) => (
533:               <PartyOption
534:                 key={`size-${size}`}
535:                 selected={partySize === size}
536:                 onPress={() => setPartySize(size)}
537:               >
538:                 <PartyText selected={partySize === size}>{size}</PartyText>
539:               </PartyOption>
540:             ))}
541:           </PartyOptionsContainer>
542:         </ScrollView>
543:       </PartySelectorContainer>
544:       {/* Time Selection */}
545:       <TimeContainer>
546:         <SectionTitle>Time</SectionTitle>
547:         <ScrollView horizontal showsHorizontalScrollIndicator={false}>
548:           <TimeOptionsContainer>
549:             {availableTimes.map((time, index) => {
550:               // Calculate availability per time slot (would be from API in real app)
551:               const hour = parseInt(time.split(":")[0]);
552:               let timeAvailability = "high";
553:               if (hour >= 18 && hour <= 20) {
554:                 timeAvailability = "medium";
555:               } else if (hour === 21) {
556:                 timeAvailability = "low";
557:               }
558:               return (
559:                 <TimeOption
560:                   key={`time-${index}`}
561:                   selected={selectedTime === time}
562:                   availability={timeAvailability}
563:                   onPress={() => setSelectedTime(time)}
564:                 >
565:                   <TimeText selected={selectedTime === time}>{time}</TimeText>
566:                   <TimeAvailabilityIndicator
567:                     level={timeAvailability}
568:                     selected={selectedTime === time}
569:                   />
570:                 </TimeOption>
571:               );
572:             })}
573:           </TimeOptionsContainer>
574:         </ScrollView>
575:         {renderAvailabilityLegend()}
576:       </TimeContainer>
577:       <Separator type="full" />
578:       {}
579:       <ToggleButton onPress={() => setShowLayout(!showLayout)}>
580:         <MaterialIcons
581:           name={showLayout ? "visibility-off" : "visibility"}
582:           size={24}
583:           color="#262626"
584:         />
585:         <ToggleText>
586:           {showLayout ? "Hide Restaurant Layout" : "Preview Your Table"}
587:         </ToggleText>
588:       </ToggleButton>
589:       {showLayout && (
590:         <LayoutContainer>
591:           <ReservationLayoutView
592:             onTableSelect={handleTableSelection}
593:             partySize={partySize}
594:             selectedTime={selectedTime}
595:             selectedDate={format(selectedDate, "yyyy-MM-dd")}
596:             onInteractionStart={handleInteractionStart}
597:             onInteractionEnd={handleInteractionEnd}
598:           />
599:         </LayoutContainer>
600:       )}
601:       {}
602:       <SectionTitle>Special Requests (Optional)</SectionTitle>
603:       <NotesInput
604:         multiline
605:         placeholder="Add any special requests or dietary requirements..."
606:         value={notes}
607:         onChangeText={setNotes}
608:         textAlignVertical="top"
609:       />
610:       {}
611:       <ReserveButton onPress={handleReservePress}>
612:         <ReserveButtonText>Reserve Now</ReserveButtonText>
613:       </ReserveButton>
614:       {}
615:       <View style={{ height: 40 }} />
616:     </Container>
617:   );
618: };
619: export default ReservationFlow;

================
File: src/features/customer/reservations/screens/ReservationsScreen.js
================
  1: import React, { useState, useEffect } from "react";
  2: import styled from "styled-components/native";
  3: import { ScrollView, TouchableOpacity, View, Alert } from "react-native";
  4: import { useNavigation } from "@react-navigation/native";
  5: import { MaterialIcons } from "@expo/vector-icons";
  6: import { format, isToday, isTomorrow, isPast, parseISO } from "date-fns";
  7: import { reservations } from "../../../../data/mockData";
  8: import { CustomText } from "../../../../components/CustomText/CustomText";
  9: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
 10: import { Spacer } from "../../../../components/Spacer/Spacer";
 11: import { Separator } from "../../../../components/Separator/Separator";
 12: import { ReservationCard } from "../components/ReservationCard";
 13: import { PastReservationCard } from "../components/PastReservationCard";
 14: import { useReservation } from "../../../../services/ReservationContext";
 15: import { FadeInView } from "../../../../components/FadeInView/FadeInView";
 16: const Container = styled(SafeArea)`
 17:   flex: 1;
 18:   background-color: ${(props) => props.theme.colors.bg.primary};
 19: `;
 20: const TabBar = styled.View`
 21:   flex-direction: row;
 22:   align-items: center;
 23:   justify-content: space-around;
 24:   padding: ${(props) => props.theme.space[2]};
 25:   background-color: ${(props) => props.theme.colors.bg.primary};
 26:   border-bottom-width: 1px;
 27:   border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
 28: `;
 29: const Tab = styled(TouchableOpacity)`
 30:   align-items: center;
 31:   padding: ${(props) => props.theme.space[2]};
 32:   border-bottom-width: 2px;
 33:   border-bottom-color: ${(props) =>
 34:     props.active ? props.theme.colors.ui.primary : "transparent"};
 35: `;
 36: const TabText = styled(CustomText)`
 37:   color: ${(props) =>
 38:     props.active
 39:       ? props.theme.colors.ui.primary
 40:       : props.theme.colors.text.primary};
 41:   font-weight: ${(props) => (props.active ? "bold" : "normal")};
 42: `;
 43: const SectionTitle = styled(CustomText)`
 44:   margin-left: ${(props) => props.theme.space[2]};
 45:   padding-left: ${(props) => props.theme.space[2]};
 46:   padding-top: ${(props) => props.theme.space[2]};
 47: `;
 48: const EmptyState = styled.View`
 49:   padding: ${(props) => props.theme.space[4]};
 50:   align-items: center;
 51:   justify-content: center;
 52: `;
 53: const EmptyStateText = styled(CustomText)`
 54:   text-align: center;
 55:   color: ${(props) => props.theme.colors.text.secondary};
 56:   margin-top: ${(props) => props.theme.space[2]};
 57: `;
 58: const ActionButton = styled(TouchableOpacity)`
 59:   flex-direction: row;
 60:   align-items: center;
 61:   justify-content: center;
 62:   background-color: ${(props) => props.theme.colors.ui.primary};
 63:   padding: ${(props) => props.theme.space[2]};
 64:   border-radius: 8px;
 65:   margin-top: ${(props) => props.theme.space[3]};
 66: `;
 67: const ActionButtonText = styled(CustomText)`
 68:   color: ${(props) => props.theme.colors.text.inverse};
 69:   font-weight: bold;
 70:   margin-left: ${(props) => props.theme.space[1]};
 71: `;
 72: const ReservationDetails = styled.View`
 73:   background-color: ${(props) => props.theme.colors.bg.secondary};
 74:   padding: ${(props) => props.theme.space[3]};
 75:   margin: ${(props) => props.theme.space[3]};
 76:   border-radius: 8px;
 77: `;
 78: const DetailRow = styled.View`
 79:   flex-direction: row;
 80:   align-items: flex-start;
 81:   margin-bottom: ${(props) => props.theme.space[2]};
 82: `;
 83: const DetailIcon = styled(MaterialIcons)`
 84:   margin-right: ${(props) => props.theme.space[2]};
 85:   color: ${(props) => props.theme.colors.text.secondary};
 86: `;
 87: const DetailInfo = styled.View`
 88:   flex: 1;
 89: `;
 90: const DetailLabel = styled(CustomText)`
 91:   color: ${(props) => props.theme.colors.text.secondary};
 92:   font-size: ${(props) => props.theme.fontSizes.caption};
 93: `;
 94: const DetailValue = styled(CustomText)`
 95:   font-weight: ${(props) => props.theme.fontWeights.bold};
 96: `;
 97: const DetailsActions = styled.View`
 98:   flex-direction: row;
 99:   justify-content: space-around;
100:   margin-top: ${(props) => props.theme.space[3]};
101: `;
102: const DetailsActionButton = styled(TouchableOpacity)`
103:   align-items: center;
104:   padding: ${(props) => props.theme.space[2]};
105: `;
106: const StatusBadge = styled.View`
107:   background-color: ${(props) => {
108:     switch (props.status) {
109:       case "Confirmed":
110:         return "#4CAF50";
111:       case "Pending":
112:         return "#FFC107";
113:       case "Completed":
114:         return "#9E9E9E";
115:       case "Cancelled":
116:         return "#F44336";
117:       default:
118:         return "#757575";
119:     }
120:   }};
121:   padding: ${(props) => props.theme.space[1]} ${(props) => props.theme.space[2]};
122:   border-radius: 4px;
123:   align-self: flex-start;
124:   margin-bottom: ${(props) => props.theme.space[2]};
125: `;
126: const StatusText = styled(CustomText)`
127:   color: white;
128:   font-size: ${(props) => props.theme.fontSizes.caption};
129:   font-weight: bold;
130: `;
131: export const ReservationsScreen = () => {
132:   const navigation = useNavigation();
133:   const [activeTab, setActiveTab] = useState("upcoming");
134:   const [selectedReservation, setSelectedReservation] = useState(null);
135:   const {
136:     isLoading,
137:     getUpcomingReservations,
138:     getPastReservations,
139:     cancelReservation,
140:   } = useReservation();
141:   const upcomingReservations = reservations.filter(
142:     (reservation) =>
143:       reservation.status === "Confirmed" || reservation.status === "Pending"
144:   );
145:   const pastReservations = reservations.filter(
146:     (reservation) => reservation.status === "Completed"
147:   );
148:   const formatDate = (dateString) => {
149:     if (!dateString) return "";
150:     const date = new Date(dateString);
151:     if (isToday(date)) return "Today";
152:     if (isTomorrow(date)) return "Tomorrow";
153:     return format(date, "EEE, MMM d, yyyy");
154:   };
155:   const handleReservationPress = (reservation) => {
156:     setSelectedReservation(
157:       selectedReservation?.id === reservation.id ? null : reservation
158:     );
159:   };
160:   const handleCancelReservation = () => {
161:     Alert.alert(
162:       "Cancel Reservation",
163:       "Are you sure you want to cancel this reservation?",
164:       [
165:         {
166:           text: "No",
167:           style: "cancel",
168:         },
169:         {
170:           text: "Yes, Cancel",
171:           style: "destructive",
172:           onPress: async () => {
173:             Alert.alert("Cancelled", "Your reservation has been cancelled.");
174:             setSelectedReservation(null);
175:           },
176:         },
177:       ]
178:     );
179:   };
180:   const handleModifyReservation = () => {
181:     navigation.navigate("RestaurantDetailScreen", {
182:       restaurant: selectedReservation.restaurant,
183:       openReservationView: true,
184:     });
185:   };
186:   const renderEmptyState = () => (
187:     <EmptyState>
188:       <MaterialIcons name="event-busy" size={60} color="#757575" />
189:       <EmptyStateText>
190:         {activeTab === "upcoming"
191:           ? "You don't have any upcoming reservations"
192:           : "You don't have any past reservations"}
193:       </EmptyStateText>
194:       {activeTab === "upcoming" && (
195:         <ActionButton onPress={() => navigation.navigate("Restaurants")}>
196:           <MaterialIcons name="add" size={20} color="white" />
197:           <ActionButtonText>Make a Reservation</ActionButtonText>
198:         </ActionButton>
199:       )}
200:     </EmptyState>
201:   );
202:   const renderReservationDetails = () => {
203:     if (!selectedReservation) return null;
204:     const isPastReservation = selectedReservation.status === "Completed";
205:     return (
206:       <ReservationDetails>
207:         <StatusBadge status={selectedReservation.status}>
208:           <StatusText>{selectedReservation.status}</StatusText>
209:         </StatusBadge>
210:         <DetailRow>
211:           <DetailIcon name="restaurant" size={20} />
212:           <DetailInfo>
213:             <DetailLabel>Restaurant</DetailLabel>
214:             <DetailValue>{selectedReservation.restaurant.name}</DetailValue>
215:           </DetailInfo>
216:         </DetailRow>
217:         <DetailRow>
218:           <DetailIcon name="event" size={20} />
219:           <DetailInfo>
220:             <DetailLabel>Date & Time</DetailLabel>
221:             <DetailValue>
222:               {formatDate(selectedReservation.date)} at{" "}
223:               {selectedReservation.time}
224:             </DetailValue>
225:           </DetailInfo>
226:         </DetailRow>
227:         <DetailRow>
228:           <DetailIcon name="people" size={20} />
229:           <DetailInfo>
230:             <DetailLabel>Party Size</DetailLabel>
231:             <DetailValue>{selectedReservation.seatsNumber} people</DetailValue>
232:           </DetailInfo>
233:         </DetailRow>
234:         {!isPastReservation && (
235:           <DetailsActions>
236:             <DetailsActionButton onPress={handleModifyReservation}>
237:               <MaterialIcons name="edit" size={24} color="#262626" />
238:               <CustomText>Modify</CustomText>
239:             </DetailsActionButton>
240:             <DetailsActionButton
241:               onPress={() => {
242:                 navigation.navigate("RestaurantDetailScreen", {
243:                   restaurant: selectedReservation.restaurant,
244:                 });
245:               }}
246:             >
247:               <MaterialIcons name="info" size={24} color="#262626" />
248:               <CustomText>Details</CustomText>
249:             </DetailsActionButton>
250:             <DetailsActionButton onPress={handleCancelReservation}>
251:               <MaterialIcons name="cancel" size={24} color="#F44336" />
252:               <CustomText style={{ color: "#F44336" }}>Cancel</CustomText>
253:             </DetailsActionButton>
254:           </DetailsActions>
255:         )}
256:       </ReservationDetails>
257:     );
258:   };
259:   return (
260:     <Container>
261:       <TabBar>
262:         <Tab
263:           active={activeTab === "upcoming"}
264:           onPress={() => setActiveTab("upcoming")}
265:         >
266:           <TabText active={activeTab === "upcoming"}>Upcoming</TabText>
267:         </Tab>
268:         <Tab active={activeTab === "past"} onPress={() => setActiveTab("past")}>
269:           <TabText active={activeTab === "past"}>Past</TabText>
270:         </Tab>
271:       </TabBar>
272:       {selectedReservation && renderReservationDetails()}
273:       <ScrollView>
274:         {activeTab === "upcoming" && (
275:           <>
276:             {upcomingReservations.length > 0 ? (
277:               <>
278:                 <SectionTitle variant="title">
279:                   Upcoming Reservations
280:                 </SectionTitle>
281:                 {upcomingReservations.map((reservation, index) => (
282:                   <FadeInView key={reservation.id} duration={300 + index * 100}>
283:                     <TouchableOpacity
284:                       onPress={() => handleReservationPress(reservation)}
285:                     >
286:                       <ReservationCard
287:                         reservation={reservation}
288:                         isSelected={selectedReservation?.id === reservation.id}
289:                       />
290:                     </TouchableOpacity>
291:                     {index < upcomingReservations.length - 1 && (
292:                       <Separator type="full" />
293:                     )}
294:                   </FadeInView>
295:                 ))}
296:               </>
297:             ) : (
298:               renderEmptyState()
299:             )}
300:           </>
301:         )}
302:         {activeTab === "past" && (
303:           <>
304:             {pastReservations.length > 0 ? (
305:               <>
306:                 <SectionTitle variant="title">Past Reservations</SectionTitle>
307:                 <Spacer position="top" size="small" />
308:                 {pastReservations.map((reservation, index) => (
309:                   <FadeInView key={reservation.id} duration={300 + index * 100}>
310:                     <TouchableOpacity
311:                       onPress={() => handleReservationPress(reservation)}
312:                     >
313:                       <PastReservationCard
314:                         reservation={reservation}
315:                         isSelected={selectedReservation?.id === reservation.id}
316:                       />
317:                     </TouchableOpacity>
318:                     {index < pastReservations.length - 1 && (
319:                       <Separator type="partial" />
320:                     )}
321:                   </FadeInView>
322:                 ))}
323:               </>
324:             ) : (
325:               renderEmptyState()
326:             )}
327:           </>
328:         )}
329:       </ScrollView>
330:     </Container>
331:   );
332: };

================
File: src/features/customer/restaurants/components/Others.js
================
 1: import React from "react";
 2: import { View, Text } from "react-native";
 3: import { List, Divider } from "react-native-paper";
 4: const Others = () => (
 5:   <View>
 6:     <Text style={{ fontSize: 24, margin: 16 }}>Others</Text>
 7:     <List.Accordion
 8:       title="Others"
 9:       left={(props) => <List.Icon {...props} icon="dots-horizontal" />}
10:     >
11:       {Array.from({ length: 50 }, (_, index) => (
12:         <List.Item key={index} title={`Other ${index + 1}`} />
13:       ))}
14:     </List.Accordion>
15:     <Divider />
16:   </View>
17: );
18: export default Others;

================
File: src/features/customer/restaurants/components/RestaurantInfoCard.js
================
 1: import React from "react";
 2: import { View } from "react-native";
 3: import { SvgXml } from "react-native-svg";
 4: import { Spacer } from "../../../../components/Spacer/Spacer";
 5: import { CustomText } from "../../../../components/CustomText/CustomText";
 6: import { Favourite } from "../../../../components/Favourite/Favourite";
 7: import star from "../../../../../assets/icons/star";
 8: import open from "../../../../../assets/icons/open";
 9: import {
10:   RestaurantCard,
11:   RestaurantCardCover,
12:   Address,
13:   Info,
14:   Section,
15:   Rating,
16:   OperationStatus,
17:   Icon,
18: } from "./RestaurantInfoCard.styles";
19: export const RestaurantInfoCard = ({ restaurant = {}, elevation = 5 }) => {
20:   const {
21:     name = "Sick Eats",
22:     icon = "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
23:     photos = [
24:       "https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8Zm9vZHxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60",
25:     ],
26:     address = "100 random sick avenue",
27:     isOpenNow = true,
28:     rating = 4,
29:     isClosedTemporarily = true,
30:     placeId,
31:   } = restaurant;
32:   const ratingArray = Array.from(new Array(Math.floor(rating)));
33:   return (
34:     <RestaurantCard elevation={elevation}>
35:       <View>
36:         <Favourite restaurant={restaurant} />
37:         <RestaurantCardCover key={name} source={{ uri: photos[0] }} />
38:       </View>
39:       <Info>
40:         <CustomText variant="label">{name}</CustomText>
41:         <Section>
42:           <Rating>
43:             {ratingArray.map((_, i) => (
44:               <SvgXml
45:                 key={`star-${placeId}-${i}`}
46:                 xml={star}
47:                 width={20}
48:                 height={20}
49:               />
50:             ))}
51:           </Rating>
52:           <OperationStatus>
53:             {isClosedTemporarily && (
54:               <CustomText variant="error">CLOSED TEMPORARILY</CustomText>
55:             )}
56:             {isOpenNow && <SvgXml xml={open} width={20} height={20} />}
57:             <Spacer position="left" size="large">
58:               <Icon source={{ uri: icon }} />
59:             </Spacer>
60:           </OperationStatus>
61:         </Section>
62:         <Address>{address}</Address>
63:       </Info>
64:     </RestaurantCard>
65:   );
66: };

================
File: src/features/customer/restaurants/components/RestaurantInfoCard.styles.js
================
 1: import { Image, View, Text } from 'react-native';
 2: import { Card } from 'react-native-paper';
 3: import styled from 'styled-components/native';
 4: export const RestaurantCard = styled(Card)`
 5:   background-color: ${(props) => props.theme.colors.bg.primary};
 6:   width: 95%;
 7:   align-self: center;
 8: `;
 9: export const RestaurantCardCover = styled(Card.Cover)`
10:   padding: ${(props) => props.theme.space[3]};
11:   background-color: ${(props) => props.theme.colors.bg.primary};
12: `;
13: export const Address = styled(Text)`
14:   font-family: ${(props) => props.theme.fonts.body};
15:   font-size: ${(props) => props.theme.fontSizes.caption};
16: `;
17: export const Info = styled(View)`
18:   padding: ${(props) => props.theme.space[3]};
19: `;
20: export const Section = styled(View)`
21:   flex-direction: row;
22:   align-items: center;
23: `;
24: export const Rating = styled(View)`
25:   flex-direction: row;
26:   padding-top: ${(props) => props.theme.space[2]};
27:   padding-bottom: ${(props) => props.theme.space[2]};
28: `;
29: export const OperationStatus = styled(View)`
30:   flex: 1;
31:   flex-direction: row;
32:   justify-content: flex-end;
33: `;
34: export const Icon = styled(Image)`
35:   width: 15px;
36:   height: 15px;
37: `;

================
File: src/features/customer/restaurants/components/RestaurantList.styles.js
================
 1: import { FlatList } from "react-native";
 2: import { Button } from "react-native-paper";
 3: import styled from "styled-components/native";
 4: import { colors } from "../../../../infrastructure/theme/colors";
 5: export const RestaurantList = styled(FlatList).attrs({
 6:   contentContainerStyle: {
 7:     padding: 16,
 8:   },
 9: })``;
10: export const OrderButton = styled(Button).attrs({
11:   color: colors.brand.primary,
12: })`
13:   padding: ${(props) => props.theme.space[2]};
14:   width: 80%;
15:   align-self: center;
16: `;

================
File: src/features/customer/restaurants/components/RestaurantMenu.js
================
 1: import React from "react";
 2: import { View, Text } from "react-native";
 3: import { List, Divider } from "react-native-paper";
 4: const RestaurantMenu = () => (
 5:   <View>
 6:     <Text style={{ fontSize: 24, margin: 16 }}>Menu</Text>
 7:     <List.Accordion
 8:       title="Menu"
 9:       left={(props) => <List.Icon {...props} icon="bread-slice" />}
10:     >
11:       {Array.from({ length: 30 }, (_, index) => (
12:         <List.Item key={index} title={`Item ${index + 1}`} />
13:       ))}
14:     </List.Accordion>
15:     <Divider />
16:   </View>
17: );
18: export default RestaurantMenu;

================
File: src/features/customer/restaurants/components/RestaurantTabBar.js
================
  1: import React, { useRef, useEffect, useCallback, useState } from "react";
  2: import { View, TouchableOpacity, Animated, StyleSheet } from "react-native";
  3: import { useTheme } from "styled-components/native";
  4: const TabBar = (props) => {
  5:   const { routes, navigationState, scrollToTab, setIndex } = props;
  6:   const theme = useTheme();
  7:   const indicatorPosition = useRef(
  8:     new Animated.Value(navigationState.index * (100 / routes.length))
  9:   ).current;
 10:   const [animationProgress, setAnimationProgress] = useState(
 11:     navigationState.index
 12:   );
 13:   const animationRef = useRef(null);
 14:   useEffect(() => {
 15:     if (animationRef.current) {
 16:       animationRef.current.stop();
 17:     }
 18:     animationRef.current = Animated.timing(indicatorPosition, {
 19:       toValue: navigationState.index * (100 / routes.length),
 20:       duration: 100,
 21:       useNativeDriver: false,
 22:     });
 23:     animationRef.current.start();
 24:     const listenerId = indicatorPosition.addListener(({ value }) => {
 25:       const currentSegmentValue = value / (100 / routes.length);
 26:       const closestIndex = Math.round(currentSegmentValue);
 27:       if (closestIndex !== animationProgress) {
 28:         setAnimationProgress(closestIndex);
 29:       }
 30:     });
 31:     return () => {
 32:       indicatorPosition.removeListener(listenerId);
 33:     };
 34:   }, [navigationState.index, routes.length, indicatorPosition]);
 35:   const handleTabPress = useCallback(
 36:     (route, index) => {
 37:       if (navigationState.index !== index && scrollToTab) {
 38:         scrollToTab(route.key, index);
 39:       }
 40:     },
 41:     [scrollToTab, navigationState.index]
 42:   );
 43:   return (
 44:     <View style={[styles.tabBar, { backgroundColor: theme.colors.bg.primary }]}>
 45:       {routes.map((route, i) => {
 46:         const isActive = animationProgress === i;
 47:         return (
 48:           <TouchableOpacity
 49:             key={route.key}
 50:             style={styles.tabItem}
 51:             onPress={() => handleTabPress(route, i)}
 52:             activeOpacity={0.7}
 53:           >
 54:             <Animated.Text
 55:               style={{
 56:                 color: isActive
 57:                   ? theme.colors.text.primary
 58:                   : theme.colors.text.secondary,
 59:                 fontFamily: theme.fonts.body,
 60:                 fontSize: parseInt(theme.fontSizes.body, 10),
 61:                 fontWeight: isActive ? "bold" : "normal",
 62:               }}
 63:             >
 64:               {route.title}
 65:             </Animated.Text>
 66:           </TouchableOpacity>
 67:         );
 68:       })}
 69:       {}
 70:       <Animated.View
 71:         style={[
 72:           styles.indicator,
 73:           {
 74:             backgroundColor: theme.colors.text.primary,
 75:             left: indicatorPosition.interpolate({
 76:               inputRange: [0, 100],
 77:               outputRange: ["0%", "100%"],
 78:             }),
 79:             width: `${100 / routes.length}%`,
 80:           },
 81:         ]}
 82:       />
 83:     </View>
 84:   );
 85: };
 86: const styles = StyleSheet.create({
 87:   tabBar: {
 88:     flexDirection: "row",
 89:     height: 48,
 90:     elevation: 0,
 91:     shadowOpacity: 0,
 92:     borderBottomWidth: 1,
 93:     borderBottomColor: "#F0F0F0",
 94:     position: "relative",
 95:     backgroundColor: "white",
 96:   },
 97:   tabItem: {
 98:     flex: 1,
 99:     alignItems: "center",
100:     justifyContent: "center",
101:     paddingVertical: 12,
102:   },
103:   indicator: {
104:     position: "absolute",
105:     bottom: 0,
106:     height: 2,
107:     borderRadius: 1,
108:   },
109: });
110: export default TabBar;

================
File: src/features/customer/restaurants/components/Reviews.js
================
 1: import React from "react";
 2: import { View, Text } from "react-native";
 3: import { List, Divider } from "react-native-paper";
 4: const Reviews = () => (
 5:   <View>
 6:     <Text style={{ fontSize: 24, margin: 16 }}>Reviews</Text>
 7:     <List.Accordion
 8:       title="Reviews"
 9:       left={(props) => <List.Icon {...props} icon="star" />}
10:     >
11:       {Array.from({ length: 50 }, (_, index) => (
12:         <List.Item key={index} title={`Review ${index + 1}`} />
13:       ))}
14:     </List.Accordion>
15:     <Divider />
16:   </View>
17: );
18: export default Reviews;

================
File: src/features/customer/restaurants/components/Search.js
================
 1: import React, { useContext, useState, useEffect } from "react";
 2: import { View } from "react-native";
 3: import { Searchbar } from "react-native-paper";
 4: import styled from "styled-components/native";
 5: const SearchContainer = styled(View)`
 6:   padding: ${(props) => props.theme.space[3]};
 7:   background-color: ${(props) => props.theme.colors.brand.secondary};
 8: `;
 9: export const Search = () => {
10:   keyword = "TestKeyword";
11:   const [searchKeyword, setSearchKeyword] = useState(keyword);
12:   useEffect(() => {
13:     setSearchKeyword(keyword);
14:   }, [keyword]);
15:   return (
16:     <SearchContainer>
17:       <Searchbar
18:         placeholder="Search"
19:         value={searchKeyword}
20:         onChangeText={(text) => setSearchKeyword(text)}
21:         style={{ backgroundColor: "#ffffff" }}
22:       />
23:     </SearchContainer>
24:   );
25: };

================
File: src/features/customer/restaurants/components/TabNavigation.js
================
 1: import React from "react";
 2: import { TabView, SceneMap } from "react-native-tab-view";
 3: import { Animated } from "react-native";
 4: import RestaurantMenu from "./RestaurantMenu";
 5: import Reviews from "./Reviews";
 6: import Others from "./Others";
 7: import TabBar from "./RestaurantTabBar";
 8: const renderSceneMap = {
 9:   menu: RestaurantMenu,
10:   reviews: Reviews,
11:   others: Others,
12: };
13: const TabNavigation = ({
14:   index,
15:   setIndex,
16:   routes,
17:   layout,
18:   renderOpacity,
19:   scrollToTab,
20:   heights,
21: }) => {
22:   const renderScene = SceneMap(renderSceneMap);
23:   const handleIndexChange = (newIndex) => {
24:     if (scrollToTab && routes[newIndex]) {
25:       scrollToTab(routes[newIndex].key, newIndex);
26:     }
27:   };
28:   return (
29:     <Animated.View style={{ opacity: renderOpacity }}>
30:       <TabView
31:         navigationState={{ index, routes }}
32:         renderScene={renderScene}
33:         renderTabBar={(props) => (
34:           <TabBar
35:             {...props}
36:             routes={routes}
37:             scrollToTab={scrollToTab}
38:             setIndex={setIndex}
39:           />
40:         )}
41:         onIndexChange={handleIndexChange}
42:         initialLayout={{ width: layout.width }}
43:         swipeEnabled={true}
44:       />
45:     </Animated.View>
46:   );
47: };
48: export default TabNavigation;

================
File: src/features/customer/restaurants/hooks/useReservationHandler.js
================
 1: import { useState } from "react";
 2: import { Animated } from "react-native";
 3: const useReservationHandler = () => {
 4:   const [isReservation, setIsReservation] = useState(false);
 5:   const [isShowReservationContent, setIsShowReservationContent] =
 6:     useState(false);
 7:   const [opacity] = useState(new Animated.Value(1));
 8:   const animateAndSwitch = (newIsReservation) => {
 9:     Animated.timing(opacity, {
10:       toValue: 0,
11:       duration: 200,
12:       useNativeDriver: true,
13:     }).start(() => {
14:       setIsReservation(newIsReservation);
15:       setTimeout(() => {
16:         setIsShowReservationContent(newIsReservation);
17:         Animated.timing(opacity, {
18:           toValue: 1,
19:           duration: 200,
20:           useNativeDriver: true,
21:         }).start();
22:       }, 200);
23:     });
24:   };
25:   return {
26:     isReservation,
27:     isShowReservationContent,
28:     opacity,
29:     animateAndSwitch,
30:   };
31: };
32: export default useReservationHandler;

================
File: src/features/customer/restaurants/hooks/useScrollHandler.js
================
 1: import { useState, useCallback } from "react";
 2: const useScrollHandler = (routes, heights, setIndex) => {
 3:   const handleScroll = useCallback(
 4:     (event) => {
 5:       const scrollYValue = event.nativeEvent.contentOffset.y;
 6:       let accumulatedHeight =
 7:         heights.restaurantInfoCard + heights.ReservationButton + heights.switch;
 8:       for (let i = 0; i < routes.length; i++) {
 9:         if (
10:           scrollYValue <
11:           accumulatedHeight + (heights.content[routes[i].key] || 0) / 2
12:         ) {
13:           setIndex(i);
14:           break;
15:         }
16:         accumulatedHeight += heights.content[routes[i].key] || 0;
17:       }
18:     },
19:     [routes, heights, setIndex]
20:   );
21:   return handleScroll;
22: };
23: export default useScrollHandler;

================
File: src/features/customer/restaurants/screens/RestaurantDetailScreen.js
================
  1: import React, { useState, useRef, useEffect, useCallback } from "react";
  2: import {
  3:   Animated,
  4:   Dimensions,
  5:   View,
  6:   TouchableOpacity,
  7:   Modal,
  8:   StatusBar,
  9:   Platform,
 10:   Pressable,
 11: } from "react-native";
 12: import styled from "styled-components/native";
 13: import { MaterialIcons } from "@expo/vector-icons";
 14: import { CustomText } from "../../../../components/CustomText/CustomText";
 15: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
 16: import SwitchContainer from "../../../../components/Switch/Switch";
 17: import WebApp from "../../../../components/WebApp/WebApp";
 18: import ErrorBoundary from "../../../../components/ErrorBoundary/ErrorBoundary";
 19: import { BackButton } from "../../../../components/BackButton/BackButton";
 20: import { RestaurantInfoCard } from "../components/RestaurantInfoCard";
 21: import RestaurantMenu from "../components/RestaurantMenu";
 22: import Reviews from "../components/Reviews";
 23: import Others from "../components/Others";
 24: import TabNavigation from "../components/TabNavigation";
 25: import useScrollHandler from "../hooks/useScrollHandler";
 26: import useReservationHandler from "../hooks/useReservationHandler";
 27: import ReservationFlow from "../../reservations/screens/ReservationFlow";
 28: import { EditButton } from "../../../merchant/settings/components/EditButton";
 29: export const Header = styled.View`
 30:   flex-direction: row;
 31:   align-items: center;
 32:   justify-content: center;
 33:   padding: ${(props) => props.theme.space[2]};
 34:   position: relative;
 35:   background-color: ${(props) => props.theme.colors.bg.primary};
 36:   margin-bottom: ${(props) => props.theme.space[2]};
 37: `;
 38: const Spacing = styled.View`
 39:   padding-bottom: ${(props) => props.theme.space[2]};
 40: `;
 41: const ReservationButton = styled(TouchableOpacity)`
 42:   background-color: ${(props) => props.theme.colors.ui.primary};
 43:   padding: ${(props) => props.theme.space[2]};
 44:   border-radius: 8px;
 45:   align-items: center;
 46:   justify-content: center;
 47:   margin-horizontal: ${(props) => props.theme.space[3]};
 48:   margin-vertical: ${(props) => props.theme.space[2]};
 49: `;
 50: const ReservationButtonText = styled(CustomText)`
 51:   color: ${(props) => props.theme.colors.text.inverse};
 52:   font-size: ${(props) => props.theme.fontSizes.body};
 53:   font-weight: ${(props) => props.theme.fontWeights.bold};
 54: `;
 55: const ModalContainer = styled.View`
 56:   flex: 1;
 57:   background-color: ${(props) => props.theme.colors.bg.primary};
 58: `;
 59: const ModalHeader = styled.View`
 60:   flex-direction: row;
 61:   align-items: center;
 62:   padding: ${(props) => props.theme.space[3]};
 63:   border-bottom-width: 1px;
 64:   border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
 65:   margin-top: ${(props) => (Platform.OS === "ios" ? props.theme.space[4] : 0)};
 66: `;
 67: const ModalTitle = styled(CustomText)`
 68:   font-size: ${(props) => props.theme.fontSizes.title};
 69:   font-weight: ${(props) => props.theme.fontWeights.bold};
 70:   flex: 1;
 71:   text-align: center;
 72: `;
 73: const CloseButton = styled(TouchableOpacity)`
 74:   padding: ${(props) => props.theme.space[2]};
 75: `;
 76: const formatAddressToString = (address) => {
 77:   if (!address) return "";
 78:   const { street, city, state, postalCode, country } = address;
 79:   const parts = [street, city, state, postalCode, country].filter(Boolean);
 80:   return parts.join(", ");
 81: };
 82: export const RestaurantDetailScreen = ({ route, navigation }) => {
 83:   // Get restaurant data from route params or use default
 84:   const initialRestaurant = route.params?.restaurant || {};
 85:   const [restaurant, setRestaurant] = useState(initialRestaurant);
 86:   const isMerchantView = route.params?.isMerchantView || false;
 87:   const openReservationView = route.params?.openReservationView || false;
 88:   // Reservation modal state
 89:   const [showReservationModal, setShowReservationModal] =
 90:     useState(openReservationView);
 91:   // Handle null or undefined restaurant properties safely
 92:   useEffect(() => {
 93:     // Ensure restaurant has all necessary properties to avoid rendering errors
 94:     if (!restaurant.address) {
 95:       setRestaurant((prev) => ({
 96:         ...prev,
 97:         address: {
 98:           street: "",
 99:           city: "",
100:           state: "",
101:           postalCode: "",
102:         },
103:       }));
104:     }
105:   }, []);
106:   // Update restaurant if coming back from edit screen
107:   useEffect(() => {
108:     if (route.params?.updatedRestaurant) {
109:       setRestaurant(route.params.updatedRestaurant);
110:     }
111:   }, [route.params?.updatedRestaurant]);
112:   const layout = useRef(Dimensions.get("window")).current;
113:   const [index, setIndex] = useState(0);
114:   const [routes] = useState([
115:     { key: "menu", title: "Menu" },
116:     { key: "reviews", title: "Reviews" },
117:     { key: "others", title: "Others" },
118:   ]);
119:   const scrollY = useRef(new Animated.Value(0)).current;
120:   const scrollViewRef = useRef(null);
121:   const [heights, setHeights] = useState({
122:     restaurantInfoCard: 0,
123:     ReservationButton: 0,
124:     switch: 0,
125:     content: {},
126:   });
127:   const { isReservation, isShowReservationContent, opacity, animateAndSwitch } =
128:     useReservationHandler();
129:   const [scrollEnabled, setScrollEnabled] = useState(true);
130:   const handleScroll = useScrollHandler(routes, heights, setIndex);
131:   const scrollToTab = useCallback(
132:     (tabKey, newIndex) => {
133:       let yPosition =
134:         heights.restaurantInfoCard + heights.ReservationButton + heights.switch;
135:       for (let i = 0; i < routes.length; i++) {
136:         if (routes[i].key === tabKey) break;
137:         yPosition += heights.content[routes[i].key] || 0;
138:       }
139:       scrollViewRef.current?.scrollTo({
140:         y: yPosition,
141:         animated: false,
142:       });
143:       setIndex(newIndex);
144:     },
145:     [heights, routes]
146:   );
147:   const handleInteractionStart = () => {
148:     setScrollEnabled(false);
149:   };
150:   const handleInteractionEnd = () => {
151:     setScrollEnabled(true);
152:   };
153:   const handleEditPress = () => {
154:     navigation.navigate("RestaurantEdit", {
155:       restaurant: restaurant,
156:     });
157:   };
158:   const handleCloseModal = () => {
159:     setShowReservationModal(false);
160:   };
161:   const handleReservationComplete = (reservationDetails) => {
162:     setShowReservationModal(false);
163:     setTimeout(() => {
164:       navigation.navigate("Reservations");
165:     }, 500);
166:   };
167:   return (
168:     <SafeArea>
169:       <Header>
170:         <BackButton />
171:         <CustomText variant="title">
172:           {isMerchantView ? "Restaurant Details" : "Restaurant"}
173:         </CustomText>
174:         {isMerchantView && (
175:           <EditButton position="absolute" onPress={handleEditPress} />
176:         )}
177:       </Header>
178:       <View style={{ flex: 1 }}>
179:         <Animated.ScrollView
180:           scrollEnabled={scrollEnabled}
181:           ref={scrollViewRef}
182:           scrollEventThrottle={16}
183:           onScroll={Animated.event(
184:             [{ nativeEvent: { contentOffset: { y: scrollY } } }],
185:             { listener: handleScroll, useNativeDriver: false }
186:           )}
187:           stickyHeaderIndices={isReservation ? [] : [3]}
188:         >
189:           <Spacing
190:             onLayout={(event) =>
191:               setHeights({
192:                 ...heights,
193:                 restaurantInfoCard: event.nativeEvent.layout.height,
194:               })
195:             }
196:           >
197:             <RestaurantInfoCard
198:               restaurant={{
199:                 ...restaurant,
200:                 address: formatAddressToString(restaurant.address),
201:                 icon:
202:                   restaurant.icon ||
203:                   "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
204:                 isOpenNow:
205:                   restaurant.isOpenNow !== undefined
206:                     ? restaurant.isOpenNow
207:                     : true,
208:                 rating: restaurant.rating || 4,
209:                 isClosedTemporarily: restaurant.isClosedTemporarily || false,
210:                 placeId: restaurant.id || restaurant.placeId || "1",
211:               }}
212:               elevation={0}
213:             />
214:           </Spacing>
215:           <View
216:             onLayout={(event) =>
217:               setHeights({
218:                 ...heights,
219:                 ReservationButton: event.nativeEvent.layout.height,
220:               })
221:             }
222:           >
223:             {!isMerchantView && (
224:               <ReservationButton onPress={() => setShowReservationModal(true)}>
225:                 <ReservationButtonText>
226:                   Make a Reservation
227:                 </ReservationButtonText>
228:               </ReservationButton>
229:             )}
230:           </View>
231:           <View
232:             onLayout={(event) =>
233:               setHeights({
234:                 ...heights,
235:                 switch: event.nativeEvent.layout.height,
236:               })
237:             }
238:           >
239:             <SwitchContainer
240:               isOn={isReservation}
241:               setIsOn={(newValue) => animateAndSwitch(newValue)}
242:               leftLabel="General"
243:               rightLabel="Reservation"
244:               variant="default"
245:             />
246:           </View>
247:           {!isShowReservationContent && !isReservation && (
248:             <TabNavigation
249:               index={index}
250:               setIndex={setIndex}
251:               routes={routes}
252:               layout={layout}
253:               scrollToTab={scrollToTab}
254:               heights={heights}
255:             />
256:           )}
257:           {!isShowReservationContent &&
258:             !isReservation &&
259:             routes.map((route) => (
260:               <Animated.View key={route.key} style={{ opacity }}>
261:                 <View
262:                   onLayout={(event) =>
263:                     setHeights({
264:                       ...heights,
265:                       content: {
266:                         ...heights.content,
267:                         [route.key]: event.nativeEvent.layout.height,
268:                       },
269:                     })
270:                   }
271:                 >
272:                   {React.createElement(
273:                     route.key === "menu"
274:                       ? RestaurantMenu
275:                       : route.key === "reviews"
276:                       ? Reviews
277:                       : Others
278:                   )}
279:                 </View>
280:               </Animated.View>
281:             ))}
282:           {isShowReservationContent && isReservation && (
283:             <Animated.View style={{ opacity, flex: 1 }}>
284:               <ErrorBoundary>
285:                 <WebApp
286:                   onInteractionStart={handleInteractionStart}
287:                   onInteractionEnd={handleInteractionEnd}
288:                 />
289:               </ErrorBoundary>
290:             </Animated.View>
291:           )}
292:         </Animated.ScrollView>
293:       </View>
294:       <Modal
295:         visible={showReservationModal}
296:         animationType="slide"
297:         transparent={false}
298:         onRequestClose={handleCloseModal}
299:       >
300:         <StatusBar barStyle="dark-content" />
301:         <ModalContainer>
302:           <ModalHeader>
303:             <CloseButton onPress={handleCloseModal} activeOpacity={0.7}>
304:               <MaterialIcons name="close" size={24} color="#262626" />
305:             </CloseButton>
306:             <ModalTitle>Reservation</ModalTitle>
307:             <View style={{ width: 24 }} />
308:           </ModalHeader>
309:           <ReservationFlow
310:             restaurant={restaurant}
311:             onComplete={handleReservationComplete}
312:           />
313:         </ModalContainer>
314:       </Modal>
315:     </SafeArea>
316:   );
317: };

================
File: src/features/customer/restaurants/screens/RestaurantsScreen.js
================
 1: import React, { useContext, useState } from "react";
 2: import { View, TouchableOpacity } from "react-native";
 3: import { ActivityIndicator, Colors } from "react-native-paper";
 4: import styled from "styled-components/native";
 5: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
 6: import { FadeInView } from "../../../../components/FadeInView/FadeInView";
 7: import { Spacer } from "../../../../components/Spacer/Spacer";
 8: import { restaurants } from "../../../../data/mockData";
 9: import { Search } from "../components/Search";
10: import { RestaurantList } from "../components/RestaurantList.styles";
11: import { RestaurantInfoCard } from "../components/RestaurantInfoCard";
12: const LoadingContainer = styled(View)`
13:   position: absolute;
14:   top: 50%;
15:   left: 50%;
16: `;
17: const Loading = styled(ActivityIndicator)`
18:   margin-left: -25px;
19: `;
20: export const RestaurantsScreen = ({ navigation }) => {
21:   const [isToggled, setIsToggled] = useState(false);
22:   return (
23:     <SafeArea>
24:       <Search
25:         isFavouritesToggled={isToggled}
26:         onFavouritesToggle={() => setIsToggled(!isToggled)}
27:       />
28:       <RestaurantList
29:         data={restaurants}
30:         renderItem={({ item }) => {
31:           return (
32:             <TouchableOpacity
33:               onPress={() =>
34:                 navigation.navigate("RestaurantDetailScreen", {
35:                   restaurant: item,
36:                 })
37:               }
38:             >
39:               <Spacer position="bottom" size="large">
40:                 <FadeInView>
41:                   <RestaurantInfoCard restaurant={item} />
42:                 </FadeInView>
43:               </Spacer>
44:             </TouchableOpacity>
45:           );
46:         }}
47:         keyExtractor={(item) => item.name}
48:       />
49:     </SafeArea>
50:   );
51: };

================
File: src/features/customer/settings/screens/AccountSettingsScreen.js
================
  1: import React from "react";
  2: import { Avatar } from "react-native-paper";
  3: import { MaterialIcons } from "@expo/vector-icons";
  4: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
  5: import { CustomText } from "../../../../components/CustomText/CustomText";
  6: import { BackButton } from "../../../../components/BackButton/BackButton";
  7: import { users } from "../../../../data/mockData";
  8: import {
  9:   SettingsContainer,
 10:   Header,
 11:   SectionTitle,
 12:   ProfileContainer,
 13:   SettingsItemRow,
 14:   SettingsItemText,
 15:   SectionContainer,
 16: } from "./AccountSettingsScreen.styles";
 17: export const AccountSettingsScreen = () => {
 18:   const user = users[0];
 19:   const basicInfoItems = [
 20:     {
 21:       title: "Name",
 22:       value: user.username,
 23:       icon: "account-circle",
 24:       onPress: () => console.log("Navigate to edit name"),
 25:     },
 26:     {
 27:       title: "Phone Number",
 28:       value: user.phoneNumber,
 29:       icon: "phone",
 30:       onPress: () => console.log("Navigate to edit phone"),
 31:     },
 32:     {
 33:       title: "Email",
 34:       value: user.email,
 35:       icon: "email",
 36:       onPress: () => console.log("Navigate to edit email"),
 37:     },
 38:   ];
 39:   const privacyItems = [
 40:     {
 41:       title: "Password",
 42:       value: "Change your password",
 43:       icon: "lock",
 44:       onPress: () => console.log("Navigate to change password"),
 45:     },
 46:     {
 47:       title: "Privacy Settings",
 48:       value: "Manage your data",
 49:       icon: "security",
 50:       onPress: () => console.log("Navigate to privacy settings"),
 51:     },
 52:   ];
 53:   const preferencesItems = [
 54:     {
 55:       title: "Notifications",
 56:       value: "Customize your alerts",
 57:       icon: "notifications",
 58:       onPress: () => console.log("Navigate to notifications"),
 59:     },
 60:     {
 61:       title: "Language",
 62:       value: "English",
 63:       icon: "language",
 64:       onPress: () => console.log("Navigate to language settings"),
 65:     },
 66:     {
 67:       title: "Appearance",
 68:       value: "Light mode",
 69:       icon: "palette",
 70:       onPress: () => console.log("Navigate to appearance settings"),
 71:     },
 72:   ];
 73:   const renderSettingsItems = (items) => {
 74:     return items.map((item, index) => (
 75:       <SettingsItemRow key={index} onPress={item.onPress}>
 76:         <MaterialIcons name={item.icon} size={24} color="#262626" />
 77:         <SettingsItemText>
 78:           <CustomText variant="body" style={{ fontWeight: "bold" }}>
 79:             {item.title}
 80:           </CustomText>
 81:           <CustomText variant="body" style={{ color: "#757575" }}>
 82:             {item.value}
 83:           </CustomText>
 84:         </SettingsItemText>
 85:         <MaterialIcons name="chevron-right" size={24} color="#757575" />
 86:       </SettingsItemRow>
 87:     ));
 88:   };
 89:   return (
 90:     <SafeArea>
 91:       <SettingsContainer showsVerticalScrollIndicator={false}>
 92:         <Header>
 93:           <BackButton />
 94:           <CustomText variant="title">Account Settings</CustomText>
 95:         </Header>
 96:         {}
 97:         <ProfileContainer>
 98:           <Avatar.Image size={80} source={user.profileImage} />
 99:         </ProfileContainer>
100:         {}
101:         <SectionContainer>
102:           <SectionTitle variant="body">BASIC INFO</SectionTitle>
103:           {renderSettingsItems(basicInfoItems)}
104:         </SectionContainer>
105:         {}
106:         <SectionContainer>
107:           <SectionTitle variant="body">PRIVACY & SECURITY</SectionTitle>
108:           {renderSettingsItems(privacyItems)}
109:         </SectionContainer>
110:         {}
111:         <SectionContainer>
112:           <SectionTitle variant="body">PREFERENCES</SectionTitle>
113:           {renderSettingsItems(preferencesItems)}
114:         </SectionContainer>
115:       </SettingsContainer>
116:     </SafeArea>
117:   );
118: };

================
File: src/features/customer/settings/screens/AccountSettingsScreen.styles.js
================
 1: import styled from "styled-components/native";
 2: import { ScrollView, TouchableOpacity } from "react-native";
 3: import { CustomText } from "../../../../components/CustomText/CustomText";
 4: export const SettingsContainer = styled(ScrollView)`
 5:   background-color: ${(props) => props.theme.colors.bg.primary};
 6:   flex: 1;
 7:   margin: ${(props) => props.theme.space[1]};
 8: `;
 9: export const Header = styled.View`
10:   flex-direction: row;
11:   align-items: center;
12:   justify-content: center;
13:   padding: ${(props) => props.theme.space[2]};
14:   position: relative;
15:   margin-bottom: ${(props) => props.theme.space[2]};
16: `;
17: export const CloseButtonWrapper = styled.View`
18:   position: absolute;
19:   left: ${(props) => props.theme.space[2]};
20: `;
21: export const SectionTitle = styled(CustomText)`
22:   font-weight: ${(props) => props.theme.fontWeights.bold};
23:   color: ${(props) => props.theme.colors.text.secondary};
24:   font-size: ${(props) => props.theme.fontSizes.caption};
25:   margin-bottom: ${(props) => props.theme.space[2]};
26:   margin-left: ${(props) => props.theme.space[3]};
27: `;
28: export const SectionContainer = styled.View`
29:   margin-top: ${(props) => props.theme.space[3]};
30:   margin-bottom: ${(props) => props.theme.space[3]};
31: `;
32: export const ProfileContainer = styled.View`
33:   flex-direction: row;
34:   align-items: center;
35:   justify-content: center;
36:   padding: ${(props) => props.theme.space[3]};
37:   margin-bottom: ${(props) => props.theme.space[2]};
38: `;
39: export const SettingsItemRow = styled(TouchableOpacity)`
40:   flex-direction: row;
41:   align-items: center;
42:   padding-vertical: ${(props) => props.theme.space[3]};
43:   padding-horizontal: ${(props) => props.theme.space[3]};
44:   background-color: ${(props) => props.theme.colors.bg.primary};
45: `;
46: export const SettingsItemText = styled.View`
47:   flex: 1;
48:   margin-left: ${(props) => props.theme.space[3]};
49: `;

================
File: src/features/customer/settings/screens/SettingsScreen.js
================
  1: import React from "react";
  2: import { View, TouchableOpacity } from "react-native";
  3: import { Avatar } from "react-native-paper";
  4: import { MaterialIcons } from "@expo/vector-icons";
  5: import styled from "styled-components/native";
  6: import { useAuthentication } from "../../../../services/AuthenticationContext";
  7: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
  8: import { CustomText } from "../../../../components/CustomText/CustomText";
  9: import { users } from "../../../../data/mockData";
 10: const SettingsContainer = styled.ScrollView`
 11:   background-color: ${(props) => props.theme.colors.bg.primary};
 12:   flex: 1;
 13:   margin: ${(props) => props.theme.space[1]};
 14: `;
 15: const ProfileContainer = styled.View`
 16:   flex-direction: row;
 17:   justify-content: space-between;
 18:   align-items: center;
 19:   padding: ${(props) => props.theme.space[3]};
 20:   background-color: ${(props) => props.theme.colors.bg.primary};
 21:   margin-bottom: ${(props) => props.theme.space[2]};
 22: `;
 23: const UserInfoContainer = styled.View`
 24:   flex: 1;
 25:   margin-right: ${(props) => props.theme.space[2]};
 26:   align-items: flex-start;
 27: `;
 28: const AvatarContainer = styled.View`
 29:   align-items: center;
 30:   justify-content: center;
 31: `;
 32: const EmailText = styled(CustomText)`
 33:   color: ${(props) => props.theme.colors.text.secondary};
 34: `;
 35: const SectionTitle = styled(CustomText)`
 36:   padding: ${(props) => props.theme.space[3]};
 37:   font-weight: ${(props) => props.theme.fontWeights.bold};
 38:   color: ${(props) => props.theme.colors.text.secondary};
 39:   font-size: ${(props) => props.theme.fontSizes.caption};
 40: `;
 41: const SettingsItemRow = styled(TouchableOpacity)`
 42:   flex-direction: row;
 43:   align-items: center;
 44:   padding-vertical: ${(props) => props.theme.space[3]};
 45:   padding-horizontal: ${(props) => props.theme.space[3]};
 46:   background-color: ${(props) => props.theme.colors.bg.primary};
 47: `;
 48: const SettingsItemText = styled.View`
 49:   flex: 1;
 50:   margin-left: ${(props) => props.theme.space[3]};
 51: `;
 52: const SectionContainer = styled.View`
 53:   margin-bottom: ${(props) => props.theme.space[3]};
 54: `;
 55: export const SettingsScreen = ({ navigation }) => {
 56:   const { onLogout } = useAuthentication();
 57:   const user = users[0];
 58:   const accountItems = [
 59:     {
 60:       title: "Account Settings",
 61:       subtitle: "Manage your personal information",
 62:       icon: "manage-accounts",
 63:       onPress: () => navigation.navigate("AccountSettings"),
 64:     },
 65:     {
 66:       title: "Reservations",
 67:       subtitle: "View and manage your restaurant reservations",
 68:       icon: "book-online",
 69:       onPress: () => navigation.navigate("Reservations"),
 70:     },
 71:     {
 72:       title: "Payment Methods",
 73:       subtitle: "Manage your saved payment options",
 74:       icon: "payment",
 75:       onPress: () => navigation.navigate("PaymentMethods"),
 76:     },
 77:   ];
 78:   const preferencesItems = [
 79:     {
 80:       title: "Notifications",
 81:       subtitle: "Manage your notification settings",
 82:       icon: "notifications",
 83:       onPress: () => {},
 84:     },
 85:     {
 86:       title: "Language",
 87:       subtitle: "Change your preferred language",
 88:       icon: "translate",
 89:       onPress: () => {},
 90:     },
 91:     {
 92:       title: "Appearance",
 93:       subtitle: "Customize the app's look and feel",
 94:       icon: "palette",
 95:       onPress: () => {},
 96:     },
 97:   ];
 98:   const supportItems = [
 99:     {
100:       title: "Help",
101:       subtitle: "Get support and read FAQs",
102:       icon: "help",
103:       onPress: () => {},
104:     },
105:     {
106:       title: "About",
107:       subtitle: "Learn more about SeatMaster",
108:       icon: "info",
109:       onPress: () => {},
110:     },
111:     {
112:       title: "Logout",
113:       subtitle: "Sign out from your account",
114:       icon: "logout",
115:       iconColor: (props) => props.theme.colors.text.error,
116:       onPress: onLogout,
117:     },
118:   ];
119:   const renderSettingsItems = (items) => {
120:     return items.map((item, index) => (
121:       <SettingsItemRow key={index} onPress={item.onPress}>
122:         <MaterialIcons
123:           name={item.icon}
124:           size={24}
125:           color={item.iconColor || "#262626"}
126:         />
127:         <SettingsItemText>
128:           <CustomText variant="body" style={{ fontWeight: "bold" }}>
129:             {item.title}
130:           </CustomText>
131:           <CustomText variant="body" style={{ color: "#757575" }}>
132:             {item.subtitle}
133:           </CustomText>
134:         </SettingsItemText>
135:         <MaterialIcons name="chevron-right" size={24} color="#757575" />
136:       </SettingsItemRow>
137:     ));
138:   };
139:   return (
140:     <SafeArea>
141:       <SettingsContainer>
142:         {}
143:         <ProfileContainer>
144:           <UserInfoContainer>
145:             <CustomText variant="h3">{user.username}</CustomText>
146:             <EmailText variant="caption">{user.email}</EmailText>
147:             <EmailText variant="caption">{user.phoneNumber}</EmailText>
148:           </UserInfoContainer>
149:           <AvatarContainer>
150:             <TouchableOpacity onPress={() => {}}>
151:               <Avatar.Image
152:                 size={80}
153:                 source={user.profileImage}
154:                 backgroundColor={(props) => props.theme.colors.brand.primary}
155:               />
156:             </TouchableOpacity>
157:           </AvatarContainer>
158:         </ProfileContainer>
159:         {}
160:         <SectionContainer>
161:           <SectionTitle variant="body">ACCOUNT</SectionTitle>
162:           {renderSettingsItems(accountItems)}
163:         </SectionContainer>
164:         {}
165:         <SectionContainer>
166:           <SectionTitle variant="body">PREFERENCES</SectionTitle>
167:           {renderSettingsItems(preferencesItems)}
168:         </SectionContainer>
169:         {}
170:         <SectionContainer>
171:           <SectionTitle variant="body">SUPPORT</SectionTitle>
172:           {renderSettingsItems(supportItems)}
173:         </SectionContainer>
174:       </SettingsContainer>
175:     </SafeArea>
176:   );
177: };

================
File: src/features/merchant/dashboard/components/CounterSeats.js
================
 1: import React from "react";
 2: import styled from "styled-components/native";
 3: import { CustomText } from "../../../../components/CustomText/CustomText";
 4: import { SharedChairsRow, SharedChairItem } from "./SharedTableStyles.styles";
 5: const CounterContainer = styled.View`
 6:   margin-bottom: ${({ theme }) => theme.space[1]};
 7:   padding: ${({ theme }) => theme.space[2]};
 8: `;
 9: export const CounterSeats = ({ counterSeats }) => {
10:   return (
11:     <CounterContainer>
12:       <CustomText variant="label">Counter</CustomText>
13:       <SharedChairsRow>
14:         {counterSeats.map((seat) => {
15:           const seatData =
16:             typeof seat === "object" ? seat : { id: seat, status: "empty" };
17:           return (
18:             <SharedChairItem
19:               key={seatData.id}
20:               status={seatData.status || "empty"}
21:               style={{ width: 40, height: 40, margin: 4 }}
22:             >
23:               <CustomText variant="body">{seatData.id}</CustomText>
24:             </SharedChairItem>
25:           );
26:         })}
27:       </SharedChairsRow>
28:     </CounterContainer>
29:   );
30: };
31: export default CounterSeats;

================
File: src/features/merchant/dashboard/components/SeatView.js
================
 1: import React from "react";
 2: import { ScrollView } from "react-native";
 3: import styled from "styled-components/native";
 4: import { CustomText } from "../../../../components/CustomText/CustomText";
 5: import { Separator } from "../../../../components/Separator/Separator";
 6: import {
 7:   SharedTableItem,
 8:   SharedChairItem,
 9:   SharedChairsRow,
10:   VerticalSeparator as DefaultVerticalSeparator,
11: } from "./SharedTableStyles.styles";
12: import CounterSeats from "./CounterSeats";
13: const RowContainer = styled.View`
14:   flex-direction: row;
15:   align-items: center;
16:   margin-bottom: ${({ theme }) => theme.space[2]};
17: `;
18: const TableColumn = styled.View`
19:   width: 60px;
20:   align-items: center;
21: `;
22: const ChairsColumn = styled.View`
23:   flex: 1;
24:   padding-left: ${({ theme }) => theme.space[2]};
25: `;
26: const VerticalSeparator = styled(DefaultVerticalSeparator)`
27:   height: 60px;
28: `;
29: export const SeatView = ({ seatingData, tableStatuses }) => {
30:   return (
31:     <ScrollView>
32:       <CounterSeats counterSeats={seatingData.counterSeats} />
33:       <Separator type="full" />
34:       {seatingData.tables.map((table) => {
35:         const tableStatus = Object.values(tableStatuses || {}).find(
36:           (statusObj) => statusObj.id === table.id
37:         );
38:         return (
39:           <RowContainer key={table.id}>
40:             <TableColumn>
41:               <SharedTableItem
42:                 status={tableStatus ? tableStatus.status : "empty"}
43:                 style={{ width: 60, height: 60 }}
44:               >
45:                 <CustomText variant="label">{table.id}</CustomText>
46:               </SharedTableItem>
47:             </TableColumn>
48:             <VerticalSeparator />
49:             <ChairsColumn>
50:               <SharedChairsRow>
51:                 {table.chairs.map((chair) => {
52:                   const chairData =
53:                     typeof chair === "object"
54:                       ? chair
55:                       : { id: chair, status: "empty" };
56:                   return (
57:                     <SharedChairItem
58:                       key={chairData.id}
59:                       status={chairData.status || "empty"}
60:                       style={{ width: 40, height: 40, margin: 4 }}
61:                     >
62:                       <CustomText variant="body">{chairData.id}</CustomText>
63:                     </SharedChairItem>
64:                   );
65:                 })}
66:               </SharedChairsRow>
67:             </ChairsColumn>
68:           </RowContainer>
69:         );
70:       })}
71:     </ScrollView>
72:   );
73: };

================
File: src/features/merchant/dashboard/components/SharedTableStyles.styles.js
================
 1: import styled from "styled-components/native";
 2: import { TouchableOpacity, View } from "react-native";
 3: export const SharedTableItem = styled(TouchableOpacity)`
 4:   background-color: ${({ status, theme }) =>
 5:     status === "occupied"
 6:       ? "#ff4d4d"
 7:       : status === "reserved"
 8:       ? "#ffd11a"
 9:       : "#b3ffb3"};
10:   padding: 8px;
11:   border-radius: 8px;
12:   margin-bottom: ${({ theme }) => theme.space[2]};
13:   justify-content: center;
14:   align-items: center;
15:   min-width: 60px;
16:   min-height: 60px;
17: `;
18: export const SharedChairItem = styled(TouchableOpacity)`
19:   background-color: ${({ status, theme }) =>
20:     status === "occupied"
21:       ? "#ff4d4d"
22:       : status === "reserved"
23:       ? "#ffd11a"
24:       : "#b3ffb3"};
25:   padding: 4px;
26:   border-radius: 4px;
27:   margin: 4px;
28:   justify-content: center;
29:   align-items: center;
30:   min-width: 40px;
31:   min-height: 40px;
32: `;
33: export const SharedChairsRow = styled(View)`
34:   flex-direction: row;
35:   flex-wrap: wrap;
36: `;
37: export const VerticalSeparator = styled(View)`
38:   width: 1px;
39:   background-color: rgba(0, 0, 0, 0.1);
40:   margin-horizontal: ${({ theme }) => theme.space[2]};
41:   align-self: stretch;
42: `;

================
File: src/features/merchant/dashboard/components/TableMatrix.js
================
 1: import React, { useState } from "react";
 2: import { View, Text, useWindowDimensions } from "react-native";
 3: import styled from "styled-components/native";
 4: import { SharedTableItem } from "./SharedTableStyles.styles";
 5: const Row = styled.View`
 6:   flex-direction: row;
 7:   margin-bottom: ${({ theme }) => theme.space[2]};
 8: `;
 9: const FIXED_BUTTON_SIZE = 60;
10: const FIXED_MARGIN_RIGHT = 16;
11: export const TableMatrix = ({
12:   tableStatuses: initialTableStatuses,
13:   onTablePress,
14: }) => {
15:   const [tableStatuses, setTableStatuses] = useState(initialTableStatuses);
16:   const { width: screenWidth } = useWindowDimensions();
17:   // Calculate maximum rows and columns based on tableStatuses keys (assumed format "row-col")
18:   const entries = Object.values(tableStatuses);
19:   const maxRow =
20:     entries.length > 0 ? Math.max(...entries.map((e) => e.row)) : 0;
21:   const maxCol =
22:     entries.length > 0 ? Math.max(...entries.map((e) => e.col)) : 0;
23:   const rows = maxRow + 1;
24:   const columns = maxCol + 1;
25:   const horizontalPadding = 32;
26:   const totalRequiredWidth =
27:     columns * FIXED_BUTTON_SIZE + (columns - 1) * FIXED_MARGIN_RIGHT;
28:   const availableWidth = screenWidth - horizontalPadding;
29:   const scale =
30:     totalRequiredWidth > availableWidth
31:       ? availableWidth / totalRequiredWidth
32:       : 1;
33:   const buttonSize = FIXED_BUTTON_SIZE * scale;
34:   const marginRight = FIXED_MARGIN_RIGHT * scale;
35:   const handlePress = (row, col, currentStatus) => {
36:     const key = `${row}-${col}`;
37:     const newStatus = currentStatus === "empty" ? "occupied" : "empty";
38:     console.log(
39:       `Table pressed: key=${key}, oldStatus=${currentStatus}, newStatus=${newStatus}`
40:     );
41:     setTableStatuses((prev) => ({
42:       ...prev,
43:       [key]: { id: prev[key]?.id || key, row, col, status: newStatus },
44:     }));
45:     if (onTablePress) {
46:       onTablePress(key, newStatus);
47:     }
48:   };
49:   return (
50:     <View style={{ padding: 16 }}>
51:       {Array.from({ length: rows }).map((_, rowIndex) => (
52:         <Row key={rowIndex}>
53:           {Array.from({ length: columns }).map((_, colIndex) => {
54:             const key = `${rowIndex}-${colIndex}`;
55:             const entry = tableStatuses[key];
56:             if (entry) {
57:               return (
58:                 <SharedTableItem
59:                   key={entry.id}
60:                   status={entry.status}
61:                   onPress={() => handlePress(rowIndex, colIndex, entry.status)}
62:                   style={{ width: buttonSize, height: buttonSize, marginRight }}
63:                 >
64:                   <Text>{entry.id}</Text>
65:                 </SharedTableItem>
66:               );
67:             } else {
68:               return (
69:                 <View
70:                   key={key}
71:                   style={{ width: buttonSize, height: buttonSize, marginRight }}
72:                 />
73:               );
74:             }
75:           })}
76:         </Row>
77:       ))}
78:     </View>
79:   );
80: };

================
File: src/features/merchant/dashboard/screens/MerchantHomeScreen.js
================
  1: import React, { useState, useEffect, useRef } from "react";
  2: import { Animated, ScrollView, View } from "react-native";
  3: import styled from "styled-components/native";
  4: import SwitchContainer from "../../../../components/Switch/Switch";
  5: import { Separator } from "../../../../components/Separator/Separator";
  6: import { TimeScroll } from "../../../../components/TimeScroll/TimeScroll";
  7: import { tableStatuses, seatingData } from "../../../../data/mockData";
  8: import { TableMatrix } from "../components/TableMatrix";
  9: import { SeatView } from "../components/SeatView";
 10: import CounterSeats from "../components/CounterSeats";
 11: const Container = styled.View`
 12:   flex: 1;
 13:   background-color: ${(props) => props.theme.colors.bg.primary};
 14:   padding: 16px;
 15:   position: relative;
 16: `;
 17: const MatrixWrapper = styled.View`
 18:   flex: 1;
 19:   margin-top: 16px;
 20: `;
 21: const AnimatedTimeScrollContainer = Animated.createAnimatedComponent(
 22:   styled.View`
 23:     position: absolute;
 24:     right: 16px;
 25:     top: 0;
 26:     bottom: 0;
 27:     justify-content: center;
 28:     align-items: center;
 29:   `
 30: );
 31: export const MerchantHomeScreen = () => {
 32:   const [times, setTimes] = useState(generateTimes(5));
 33:   const [selectedTime, setSelectedTime] = useState(times[0]);
 34:   const [isSeatMode, setIsSeatMode] = useState(false);
 35:   const [tableStatusesState, setTableStatusesState] = useState(tableStatuses);
 36:   const overlayOpacity = useRef(new Animated.Value(1)).current;
 37:   function generateTimes(count) {
 38:     let timesArray = [];
 39:     let current = new Date();
 40:     current.setSeconds(0);
 41:     current.setMilliseconds(0);
 42:     for (let i = 0; i < count; i++) {
 43:       const hours = current.getHours();
 44:       const minutes = current.getMinutes();
 45:       const timeString = `${hours.toString().padStart(2, "0")}:${minutes
 46:         .toString()
 47:         .padStart(2, "0")}`;
 48:       timesArray.push(timeString);
 49:       current.setHours(current.getHours() + 1);
 50:     }
 51:     return timesArray;
 52:   }
 53:   useEffect(() => {
 54:     const updateTimes = () => {
 55:       const newTimes = generateTimes(5);
 56:       setTimes(newTimes);
 57:       setSelectedTime(newTimes[0]);
 58:     };
 59:     updateTimes();
 60:     const interval = setInterval(updateTimes, 6000);
 61:     return () => clearInterval(interval);
 62:   }, []);
 63:   const handleTimeChange = (time) => {
 64:     setSelectedTime(time);
 65:     console.log("Time changed to:", time);
 66:   };
 67:   const handleTablePress = (key, status) => {
 68:     const newStatus = status === "empty" ? "occupied" : "empty";
 69:     console.log(`Table ${key} changed from ${status} to ${newStatus}`);
 70:     setTableStatusesState((prev) => ({
 71:       ...prev,
 72:       [key]: { ...prev[key], status: newStatus },
 73:     }));
 74:   };
 75:   const onScrollBegin = () => {
 76:     Animated.timing(overlayOpacity, {
 77:       toValue: 0,
 78:       duration: 100,
 79:       useNativeDriver: true,
 80:     }).start();
 81:   };
 82:   const onScrollEnd = () => {
 83:     Animated.timing(overlayOpacity, {
 84:       toValue: 1,
 85:       duration: 100,
 86:       useNativeDriver: true,
 87:     }).start();
 88:   };
 89:   return (
 90:     <Container>
 91:       <SwitchContainer
 92:         isOn={isSeatMode}
 93:         setIsOn={setIsSeatMode}
 94:         leftLabel="Tables"
 95:         rightLabel="Seats"
 96:         variant="default"
 97:       />
 98:       <MatrixWrapper>
 99:         {isSeatMode ? (
100:           <Animated.ScrollView
101:             onScrollBeginDrag={onScrollBegin}
102:             onScrollEndDrag={onScrollEnd}
103:             scrollEventThrottle={16}
104:           >
105:             <SeatView
106:               seatingData={seatingData}
107:               tableStatuses={tableStatusesState}
108:             />
109:           </Animated.ScrollView>
110:         ) : (
111:           <>
112:             <TableMatrix
113:               tableStatuses={tableStatusesState}
114:               onTablePress={handleTablePress}
115:             />
116:             <Separator type="full" />
117:             <CounterSeats counterSeats={seatingData.counterSeats} />
118:           </>
119:         )}
120:       </MatrixWrapper>
121:       <AnimatedTimeScrollContainer style={{ opacity: overlayOpacity }}>
122:         <TimeScroll
123:           times={times}
124:           selectedTime={selectedTime}
125:           onTimeChange={handleTimeChange}
126:         />
127:       </AnimatedTimeScrollContainer>
128:     </Container>
129:   );
130: };

================
File: src/features/merchant/reservations/components/ReservationComponents.js
================
  1: import React from "react";
  2: import { TouchableOpacity, View } from "react-native";
  3: import styled from "styled-components/native";
  4: import { CustomText } from "../../../../components/CustomText/CustomText";
  5: import {
  6:   SharedTableItem,
  7:   SharedChairItem,
  8: } from "../../dashboard/components/SharedTableStyles.styles";
  9: import {
 10:   ReservationBlockStyled,
 11:   ReservationName,
 12:   ReservationDetails,
 13:   ReservationPanelStyled,
 14:   ButtonsRow,
 15:   ActionButton,
 16: } from "./ReservationComponents.styles";
 17: const TableColumn = styled.View`
 18:   width: ${(props) => props.width}px;
 19:   align-items: center;
 20:   border-left-width: 1px;
 21:   border-left-color: ${(props) => props.theme.colors.ui.tertiary};
 22:   padding-horizontal: ${(props) => props.theme.space[2]};
 23:   padding-vertical: ${(props) => props.theme.space[2]};
 24: `;
 25: const TableItem = styled.View`
 26:   align-items: center;
 27: `;
 28: const ChairsGrid = styled.View`
 29:   flex-direction: column;
 30:   justify-content: center;
 31:   width: 58px;
 32:   margin-top: ${(props) => props.theme.space[1]};
 33: `;
 34: const ChairRow = styled.View`
 35:   flex-direction: row;
 36:   justify-content: center;
 37:   margin-top: 1px;
 38: `;
 39: const ChairItem = styled(SharedChairItem)`
 40:   width: 22px;
 41:   height: 22px;
 42:   margin: 2px;
 43:   justify-content: center;
 44:   align-items: center;
 45: `;
 46: const ShowMoreButton = styled(TouchableOpacity)`
 47:   background-color: ${(props) => props.theme.colors.ui.tertiary};
 48:   padding-horizontal: ${(props) => props.theme.space[1]};
 49:   padding-vertical: 2px;
 50:   border-radius: 4px;
 51:   margin-top: 4px;
 52:   align-items: center;
 53: `;
 54: const ButtonText = styled(CustomText)`
 55:   font-size: ${(props) => props.theme.fontSizes.caption};
 56: `;
 57: const CounterSeatHeaderContainer = styled.View`
 58:   align-items: center;
 59:   justify-content: center;
 60:   margin-top: 40px;
 61: `;
 62: const CounterSeatTitle = styled(CustomText)`
 63:   font-size: ${(props) => props.theme.fontSizes.caption};
 64:   font-weight: ${(props) => props.theme.fontWeights.bold};
 65:   margin-bottom: ${(props) => props.theme.space[1]};
 66: `;
 67: // Helper function for arranging chairs in rows
 68: const getChairRows = (chairs, perRow = 2) => {
 69:   const rows = [];
 70:   for (let i = 0; i < chairs.length; i += perRow) {
 71:     rows.push(chairs.slice(i, i + perRow));
 72:   }
 73:   return rows;
 74: };
 75: // Calculate the position of a reservation block
 76: const getReservationPosition = (
 77:   reservation,
 78:   tables,
 79:   counterSeats,
 80:   tableWidth,
 81:   counterSeatWidth,
 82:   timeSlotHeight,
 83:   isCounterSeat = false
 84: ) => {
 85:   if (isCounterSeat) {
 86:     const counterSeatIndex = counterSeats.findIndex(
 87:       (seat) => seat.id === reservation.counterSeatId
 88:     );
 89:     if (counterSeatIndex === -1) return null;
 90:     const left = counterSeatIndex * counterSeatWidth;
 91:     const [hours, minutes] = reservation.time.split(":").map(Number);
 92:     const startMinutes = (hours - 9) * 60 + minutes;
 93:     const top = (startMinutes / 30) * timeSlotHeight;
 94:     const height = (reservation.duration / 30) * timeSlotHeight;
 95:     return {
 96:       left,
 97:       top,
 98:       width: counterSeatWidth,
 99:       height,
100:     };
101:   } else {
102:     const tableIndex = tables.findIndex(
103:       (table) => table.id === reservation.tableId
104:     );
105:     if (tableIndex === -1) return null;
106:     const counterSeatsWidth = counterSeats.length * counterSeatWidth;
107:     const left = counterSeatsWidth + tableIndex * tableWidth;
108:     const [hours, minutes] = reservation.time.split(":").map(Number);
109:     const startMinutes = (hours - 9) * 60 + minutes;
110:     const top = (startMinutes / 30) * timeSlotHeight;
111:     const height = (reservation.duration / 30) * timeSlotHeight;
112:     return {
113:       left,
114:       top,
115:       width: tableWidth,
116:       height,
117:     };
118:   }
119: };
120: // Table header component
121: export const TableHeader = ({
122:   table,
123:   isExpanded,
124:   toggleExpand,
125:   width = 100,
126: }) => {
127:   const chairRows = getChairRows(table.chairs, 2);
128:   const rowsToDisplay = isExpanded ? chairRows : chairRows.slice(0, 1);
129:   return (
130:     <TableColumn style={{ width }}>
131:       <TableItem>
132:         <SharedTableItem
133:           status={table.status || "empty"}
134:           style={{ width: width * 0.6, height: 40 }}
135:         >
136:           <CustomText variant="caption">Table {table.id}</CustomText>
137:         </SharedTableItem>
138:         <ChairsGrid>
139:           {rowsToDisplay.map((row, rowIndex) => (
140:             <ChairRow key={`row-${rowIndex}`}>
141:               {row.map((chair) => {
142:                 const chairData =
143:                   typeof chair === "object"
144:                     ? chair
145:                     : { id: chair, status: "empty" };
146:                 return (
147:                   <ChairItem key={chairData.id} status={chairData.status}>
148:                     <CustomText
149:                       variant="caption"
150:                       style={{ fontSize: 10, fontWeight: "bold" }}
151:                     >
152:                       {chairData.id.toString().slice(-1)}
153:                     </CustomText>
154:                   </ChairItem>
155:                 );
156:               })}
157:             </ChairRow>
158:           ))}
159:         </ChairsGrid>
160:         {table.chairs.length > 2 && (
161:           <ShowMoreButton onPress={toggleExpand}>
162:             <ButtonText>
163:               {isExpanded ? "Hide" : `+${table.chairs.length - 2}`}
164:             </ButtonText>
165:           </ShowMoreButton>
166:         )}
167:       </TableItem>
168:     </TableColumn>
169:   );
170: };
171: export const CounterSeatHeader = ({
172:   seat,
173:   isExpanded,
174:   toggleExpand,
175:   width = 60,
176: }) => {
177:   const seatData =
178:     typeof seat === "object" ? seat : { id: seat, status: "empty" };
179:   return (
180:     <TableColumn style={{ width }}>
181:       <CounterSeatHeaderContainer>
182:         <CounterSeatTitle></CounterSeatTitle>
183:         <ChairItem status={seatData.status || "empty"} onPress={toggleExpand}>
184:           <CustomText
185:             variant="caption"
186:             style={{ fontSize: 10, fontWeight: "bold" }}
187:           >
188:             {seatData.id}
189:           </CustomText>
190:         </ChairItem>
191:       </CounterSeatHeaderContainer>
192:     </TableColumn>
193:   );
194: };
195: export const ReservationBlock = ({
196:   reservation,
197:   tables,
198:   counterSeats,
199:   isSelected,
200:   onPress,
201:   tableWidth,
202:   counterSeatWidth,
203:   timeSlotHeight,
204:   isCounterSeat = false,
205: }) => {
206:   const position = getReservationPosition(
207:     reservation,
208:     tables,
209:     counterSeats,
210:     tableWidth,
211:     counterSeatWidth,
212:     timeSlotHeight,
213:     isCounterSeat
214:   );
215:   if (!position) return null;
216:   return (
217:     <ReservationBlockStyled
218:       {...position}
219:       status={reservation.status}
220:       onPress={() => onPress(reservation)}
221:       isSelected={isSelected}
222:     >
223:       <ReservationName>{reservation.customerName}</ReservationName>
224:       <ReservationDetails>
225:         {reservation.time} • {reservation.people}{" "}
226:         {reservation.people > 1 ? "people" : "person"}
227:       </ReservationDetails>
228:     </ReservationBlockStyled>
229:   );
230: };
231: export const ReservationDetailsPanel = ({ reservation, onClose }) => {
232:   if (!reservation) return null;
233:   return (
234:     <ReservationPanelStyled>
235:       <CustomText variant="title">{reservation.customerName}</CustomText>
236:       <View style={{ marginTop: 8 }}>
237:         <CustomText variant="body">
238:           Time: {reservation.time} ({reservation.duration} min)
239:         </CustomText>
240:         <CustomText variant="body">
241:           Party: {reservation.people}{" "}
242:           {reservation.people > 1 ? "people" : "person"}
243:         </CustomText>
244:         {reservation.isCounterSeat ? (
245:           <CustomText variant="body">
246:             Counter Seat: {reservation.counterSeatId}
247:           </CustomText>
248:         ) : (
249:           <CustomText variant="body">
250:             Table: {reservation.tableId} • Chairs:{" "}
251:             {reservation.chairs ? reservation.chairs.join(", ") : ""}
252:           </CustomText>
253:         )}
254:         {reservation.note && (
255:           <CustomText variant="body">Note: {reservation.note}</CustomText>
256:         )}
257:       </View>
258:       <View style={{ marginTop: 16 }}>
259:         <ButtonsRow>
260:           <ActionButton variant="confirm" onPress={onClose}>
261:             <CustomText>Confirm</CustomText>
262:           </ActionButton>
263:           <ActionButton onPress={onClose}>
264:             <CustomText>Cancel</CustomText>
265:           </ActionButton>
266:         </ButtonsRow>
267:       </View>
268:     </ReservationPanelStyled>
269:   );
270: };

================
File: src/features/merchant/reservations/components/ReservationComponents.styles.js
================
  1: import styled from "styled-components/native";
  2: import { TouchableOpacity, View } from "react-native";
  3: import { Animated } from "react-native";
  4: import { CustomText } from "../../../../components/CustomText/CustomText";
  5: export const TabBar = styled.View`
  6:   flex-direction: row;
  7:   padding: 8px;
  8:   background-color: ${(props) => props.theme.colors.bg.primary};
  9: `;
 10: export const Tab = styled.TouchableOpacity`
 11:   flex: 1;
 12:   flex-direction: row;
 13:   align-items: center;
 14:   justify-content: center;
 15:   padding-vertical: 10px;
 16:   background-color: ${(props) => props.theme.colors.bg.primary};
 17:   border-width: ${(props) => (props.active ? "2px" : "1px")};
 18:   border-color: ${(props) =>
 19:     props.active
 20:       ? props.theme.colors.ui.primary
 21:       : props.theme.colors.ui.tertiary};
 22:   border-radius: 6px;
 23:   margin-horizontal: 4px;
 24:   elevation: ${(props) => (props.active ? 2 : 0)};
 25:   shadow-opacity: ${(props) => (props.active ? 0.2 : 0)};
 26:   shadow-radius: 4px;
 27:   shadow-color: #000;
 28:   shadow-offset: 0px 2px;
 29: `;
 30: export const TabText = styled(CustomText)`
 31:   margin-left: 8px;
 32:   font-size: ${(props) => props.theme.fontSizes.body};
 33:   color: ${(props) =>
 34:     props.active
 35:       ? props.theme.colors.ui.primary
 36:       : props.theme.colors.text.secondary};
 37:   font-weight: ${(props) => (props.active ? "bold" : "normal")};
 38: `;
 39: // Reservation visual elements
 40: export const ReservationBlockStyled = styled(TouchableOpacity)`
 41:   position: absolute;
 42:   left: ${(props) => props.left}px;
 43:   top: ${(props) => props.top}px;
 44:   width: ${(props) => props.width}px;
 45:   height: ${(props) => props.height}px;
 46:   background-color: ${(props) =>
 47:     props.status === "confirmed"
 48:       ? "#b3ffb3"
 49:       : props.status === "pending"
 50:       ? "#ffd11a"
 51:       : "#ff4d4d"};
 52:   border-radius: 5px;
 53:   padding: ${(props) => props.theme.space[1]};
 54:   justify-content: space-between;
 55:   z-index: 1;
 56:   box-sizing: border-box;
 57:   ${(props) =>
 58:     props.isSelected &&
 59:     !props.isPending &&
 60:     `
 61:     border-width: 2px;
 62:     border-color: blue;
 63:   `}
 64: `;
 65: export const PendingBorder = styled(Animated.View)`
 66:   position: absolute;
 67:   top: -2px;
 68:   left: -2px;
 69:   right: -2px;
 70:   bottom: -2px;
 71:   border-width: 3px;
 72:   border-color: #ff6b6b;
 73:   border-radius: 7px;
 74:   z-index: 2;
 75:   pointer-events: none;
 76: `;
 77: export const ReservationName = styled(CustomText)`
 78:   font-size: ${(props) => props.theme.fontSizes.caption};
 79:   font-weight: ${(props) => props.theme.fontWeights.bold};
 80: `;
 81: export const ReservationDetails = styled(CustomText)`
 82:   font-size: ${(props) => props.theme.fontSizes.caption};
 83: `;
 84: // Panel styles for details display
 85: export const ReservationPanelStyled = styled.View`
 86:   background-color: ${(props) => props.theme.colors.bg.primary};
 87:   padding: ${(props) => props.theme.space[3]};
 88:   border-top-width: 1px;
 89:   border-top-color: ${(props) => props.theme.colors.ui.tertiary};
 90:   elevation: 5;
 91:   shadow-color: #000;
 92:   shadow-offset: 0px -2px;
 93:   shadow-opacity: 0.1;
 94:   shadow-radius: 4px;
 95: `;
 96: export const ButtonsRow = styled.View`
 97:   flex-direction: row;
 98:   justify-content: space-between;
 99: `;
100: export const ActionButton = styled(TouchableOpacity)`
101:   padding: ${(props) => props.theme.space[2]};
102:   border-radius: 5px;
103:   min-width: 100px;
104:   align-items: center;
105:   background-color: ${(props) =>
106:     props.variant === "confirm" ? "#b3ffb3" : "#ff4d4d"};
107: `;

================
File: src/features/merchant/reservations/components/ReservationsGrid.js
================
  1: import React, { useState, useRef, useEffect } from "react";
  2: import { View, ScrollView, Animated, TouchableOpacity } from "react-native";
  3: import styled from "styled-components/native";
  4: import { CustomText } from "../../../../components/CustomText/CustomText";
  5: import {
  6:   TableHeader,
  7:   CounterSeatHeader,
  8:   ReservationDetailsPanel,
  9: } from "./ReservationComponents";
 10: import {
 11:   PendingBorder,
 12:   ReservationBlockStyled,
 13:   ReservationName,
 14:   ReservationDetails,
 15: } from "./ReservationComponents.styles";
 16: const GRID_CONSTANTS = {
 17:   TABLE_WIDTH: 100,
 18:   COUNTER_SEAT_WIDTH: 60,
 19:   TIME_COLUMN_WIDTH: 60,
 20:   TIME_SLOT_HEIGHT: 30,
 21: };
 22: const Container = styled.View`
 23:   flex: 1;
 24:   background-color: ${(props) => props.theme.colors.bg.primary};
 25: `;
 26: const MainGrid = styled.View`
 27:   flex: 1;
 28:   flex-direction: column;
 29: `;
 30: const HeaderContainer = styled.View`
 31:   background-color: ${(props) => props.theme.colors.bg.primary};
 32:   border-bottom-width: 1px;
 33:   border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
 34:   position: relative;
 35:   z-index: 2;
 36: `;
 37: const LeftColumnContainer = styled.View`
 38:   position: absolute;
 39:   left: 0;
 40:   top: 0;
 41:   bottom: 0;
 42:   width: ${({ width }) => width}px;
 43:   background-color: ${(props) => props.theme.colors.bg.primary};
 44:   z-index: 10;
 45:   border-right-width: 1px;
 46:   border-right-color: ${(props) => props.theme.colors.ui.tertiary};
 47: `;
 48: const TimeColumn = styled.View`
 49:   width: ${({ width }) => width}px;
 50: `;
 51: const TimeSlot = styled.View`
 52:   height: ${({ height }) => height}px;
 53:   border-bottom-width: 1px;
 54:   border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
 55:   justify-content: center;
 56:   align-items: center;
 57: `;
 58: const TimeText = styled(CustomText)`
 59:   font-size: ${(props) => props.theme.fontSizes.caption};
 60: `;
 61: const ExpandAllButton = styled.TouchableOpacity`
 62:   background-color: ${(props) => props.theme.colors.ui.disabled};
 63:   padding: 4px 8px;
 64:   border-radius: 12px;
 65:   margin-vertical: 8px;
 66:   align-items: center;
 67:   justify-content: center;
 68:   shadow-color: #000;
 69:   shadow-offset: 0px 2px;
 70:   shadow-opacity: 0.1;
 71:   shadow-radius: 3px;
 72:   elevation: 2;
 73:   width: 80%;
 74:   align-self: center;
 75: `;
 76: const ExpandAllButtonText = styled(CustomText)`
 77:   font-size: ${(props) => props.theme.fontSizes.caption};
 78:   color: ${(props) => props.theme.colors.text.primary};
 79:   font-weight: ${(props) => props.theme.fontWeights.bold};
 80: `;
 81: const ContentContainer = styled.View`
 82:   flex: 1;
 83:   flex-direction: row;
 84:   position: relative;
 85: `;
 86: const GridContainer = styled.View`
 87:   flex: 1;
 88:   position: relative;
 89: `;
 90: const TimeColumnHeader = styled.View`
 91:   width: ${({ width }) => width}px;
 92:   padding: ${(props) => props.theme.space[2]};
 93:   padding-top: 40px;
 94:   align-items: center;
 95:   justify-content: center;
 96:   background-color: ${(props) => props.theme.colors.bg.primary};
 97: `;
 98: const HeaderScrollView = styled.ScrollView`
 99:   flex-direction: row;
100: `;
101: const HeaderRow = styled.View`
102:   flex-direction: row;
103:   padding-vertical: ${(props) => props.theme.space[2]};
104: `;
105: const CurrentTimeLine = styled(Animated.View)`
106:   position: absolute;
107:   left: 0;
108:   right: 0;
109:   height: 2px;
110:   background-color: #ff3b30;
111:   z-index: 5;
112: `;
113: const CurrentTimeIndicator = styled.View`
114:   position: absolute;
115:   left: -5px;
116:   width: 10px;
117:   height: 10px;
118:   border-radius: 5px;
119:   background-color: #ff3b30;
120:   top: -4px;
121: `;
122: // Utility functions
123: const calculateCurrentTimePosition = (timeSlotHeight) => {
124:   const now = new Date();
125:   const hours = now.getHours();
126:   const minutes = now.getMinutes();
127:   if (hours < 9 || (hours === 22 && minutes > 30) || hours > 22) {
128:     return -100;
129:   }
130:   const minutesSince9AM = (hours - 9) * 60 + minutes;
131:   return (minutesSince9AM / 30) * timeSlotHeight;
132: };
133: // Parse time strings into minutes since midnight
134: const parseTimeToMinutes = (timeStr) => {
135:   const [hours, minutes] = timeStr.split(":").map(Number);
136:   return hours * 60 + minutes;
137: };
138: // Get ID from item consistently
139: const getItemId = (item) => {
140:   return typeof item === "object" ? item.id : item;
141: };
142: // Sort all seating items (tables and counter seats) using smart sorting
143: const smartSortSeatingItems = (tables, counterSeats, reservations) => {
144:   if (!tables || !counterSeats || !reservations) {
145:     return [];
146:   }
147:   // Create a unified array with type information
148:   const allItems = [
149:     ...tables.map((table) => ({
150:       item: table,
151:       type: "table",
152:       id: getItemId(table),
153:     })),
154:     ...counterSeats.map((seat) => ({
155:       item: seat,
156:       type: "counterSeat",
157:       id: getItemId(seat),
158:     })),
159:   ];
160:   const now = new Date();
161:   const currentTimeInMinutes = now.getHours() * 60 + now.getMinutes();
162:   // Create a reservation map for quick lookups
163:   const reservationMap = new Map();
164:   // Process all reservations and organize by table/seat ID
165:   reservations.forEach((res) => {
166:     const itemKey = res.isCounterSeat
167:       ? `counter-${res.counterSeatId}`
168:       : `table-${res.tableId}`;
169:     if (!reservationMap.has(itemKey)) {
170:       reservationMap.set(itemKey, []);
171:     }
172:     const startTime = parseTimeToMinutes(res.time);
173:     const endTime = startTime + res.duration;
174:     reservationMap.get(itemKey).push({
175:       reservation: res,
176:       startTime,
177:       endTime,
178:       timeUntilStart: startTime - currentTimeInMinutes,
179:       timeUntilEnd: endTime - currentTimeInMinutes,
180:     });
181:   });
182:   // Process each seating item
183:   allItems.forEach((seatingItem) => {
184:     const itemKey = `${seatingItem.type === "table" ? "table" : "counter"}-${
185:       seatingItem.id
186:     }`;
187:     const itemReservations = reservationMap.get(itemKey) || [];
188:     if (itemReservations.length === 0) {
189:       // No reservations for this item
190:       seatingItem.status = "empty";
191:       seatingItem.priority = Number.MAX_SAFE_INTEGER;
192:       return;
193:     }
194:     // Find upcoming, current, and past reservations
195:     const upcomingReservations = itemReservations.filter(
196:       (r) => r.timeUntilStart > 0
197:     );
198:     const currentReservations = itemReservations.filter(
199:       (r) => r.timeUntilStart <= 0 && r.timeUntilEnd > 0
200:     );
201:     const pastReservations = itemReservations.filter(
202:       (r) => r.timeUntilEnd <= 0
203:     );
204:     // Determine status and priority
205:     if (upcomingReservations.length > 0) {
206:       // Sort by closest upcoming start time
207:       upcomingReservations.sort((a, b) => a.timeUntilStart - b.timeUntilStart);
208:       seatingItem.status = "upcoming";
209:       seatingItem.priority = upcomingReservations[0].timeUntilStart;
210:       seatingItem.reservation = upcomingReservations[0].reservation;
211:     } else if (currentReservations.length > 0) {
212:       // Sort by start time (earliest first)
213:       currentReservations.sort((a, b) => a.startTime - b.startTime);
214:       seatingItem.status = "current";
215:       seatingItem.priority = 1000000 + currentReservations[0].startTime;
216:       seatingItem.reservation = currentReservations[0].reservation;
217:     } else if (pastReservations.length > 0) {
218:       // Sort by most recent end time
219:       pastReservations.sort((a, b) => b.endTime - a.endTime);
220:       seatingItem.status = "past";
221:       seatingItem.priority = 2000000 + (1440 - pastReservations[0].endTime);
222:       seatingItem.reservation = pastReservations[0].reservation;
223:     }
224:   });
225:   // Sort the items
226:   allItems.sort((a, b) => {
227:     // First sort by reservation status
228:     const statusOrder = { upcoming: 0, current: 1, past: 2, empty: 3 };
229:     const aStatus = a.status || "empty";
230:     const bStatus = b.status || "empty";
231:     if (statusOrder[aStatus] !== statusOrder[bStatus]) {
232:       return statusOrder[aStatus] - statusOrder[bStatus];
233:     }
234:     // Then sort by priority within the same status
235:     if (a.priority !== b.priority) {
236:       return a.priority - b.priority;
237:     }
238:     // As a last resort, sort by ID
239:     return a.id.toString().localeCompare(b.id.toString());
240:   });
241:   return allItems;
242: };
243: // Traditional sorting: Tables first, then counter seats, both sorted by ID
244: const traditionalSortSeatingItems = (tables, counterSeats) => {
245:   if (!tables || !counterSeats) {
246:     return [];
247:   }
248:   // Create a unified array with type information, sort by ID numerically
249:   const tableItems = tables
250:     .map((table) => ({
251:       item: table,
252:       type: "table",
253:       id: getItemId(table),
254:     }))
255:     .sort((a, b) => {
256:       // Extract numeric part for sorting
257:       const aNum = parseInt(a.id.toString().replace(/\D/g, "")) || 0;
258:       const bNum = parseInt(b.id.toString().replace(/\D/g, "")) || 0;
259:       return aNum - bNum;
260:     });
261:   const counterItems = counterSeats
262:     .map((seat) => ({
263:       item: seat,
264:       type: "counterSeat",
265:       id: getItemId(seat),
266:     }))
267:     .sort((a, b) => {
268:       // Extract numeric part for sorting
269:       const aNum = parseInt(a.id.toString().replace(/\D/g, "")) || 0;
270:       const bNum = parseInt(b.id.toString().replace(/\D/g, "")) || 0;
271:       return aNum - bNum;
272:     });
273:   // Tables first, then counter seats
274:   return [...tableItems, ...counterItems];
275: };
276: // Main component
277: const ReservationsGrid = ({
278:   timeSlots,
279:   tables,
280:   counterSeats,
281:   reservations,
282:   isSmartSorting = false,
283: }) => {
284:   const {
285:     TABLE_WIDTH,
286:     COUNTER_SEAT_WIDTH,
287:     TIME_COLUMN_WIDTH,
288:     TIME_SLOT_HEIGHT,
289:   } = GRID_CONSTANTS;
290:   // State variables
291:   const [selectedReservation, setSelectedReservation] = useState(null);
292:   const [currentTimePosition, setCurrentTimePosition] = useState(0);
293:   const [expandedTableIds, setExpandedTableIds] = useState(new Set());
294:   const [expandedCounterSeatIds, setExpandedCounterSeatIds] = useState(
295:     new Set()
296:   );
297:   const [areAllExpanded, setAreAllExpanded] = useState(false);
298:   const [sortedItems, setSortedItems] = useState([]);
299:   // Pre-compute sorted items for both sorting methods to eliminate waiting when switching
300:   const [traditionalSorted, setTraditionalSorted] = useState([]);
301:   const [smartSorted, setSmartSorted] = useState([]);
302:   // Animation for breathing effect on pending reservations
303:   const [breathingAnim] = useState(new Animated.Value(0.4));
304:   // Set up breathing animation
305:   useEffect(() => {
306:     // Create the breathing animation sequence
307:     const breathe = () => {
308:       Animated.sequence([
309:         Animated.timing(breathingAnim, {
310:           toValue: 1,
311:           duration: 1000,
312:           useNativeDriver: false, // Changed to false for border animation
313:         }),
314:         Animated.timing(breathingAnim, {
315:           toValue: 0.4,
316:           duration: 1000,
317:           useNativeDriver: false, // Changed to false for border animation
318:         }),
319:       ]).start(() => breathe()); // Restart animation when complete
320:     };
321:     // Start the animation
322:     breathe();
323:     // Clean up
324:     return () => breathingAnim.stopAnimation();
325:   }, []);
326:   // Pre-compute all sorting options when data changes
327:   useEffect(() => {
328:     const traditional = traditionalSortSeatingItems(tables, counterSeats);
329:     const smart = smartSortSeatingItems(tables, counterSeats, reservations);
330:     setTraditionalSorted(traditional);
331:     setSmartSorted(smart);
332:     // Set the current sorted items based on selected mode
333:     setSortedItems(isSmartSorting ? smart : traditional);
334:   }, [tables, counterSeats, reservations]);
335:   // Update sorted items immediately when sorting method changes
336:   useEffect(() => {
337:     setSortedItems(isSmartSorting ? smartSorted : traditionalSorted);
338:   }, [isSmartSorting, smartSorted, traditionalSorted]);
339:   useEffect(() => {
340:     const updateTimePosition = () => {
341:       setCurrentTimePosition(calculateCurrentTimePosition(TIME_SLOT_HEIGHT));
342:     };
343:     updateTimePosition();
344:     const interval = setInterval(updateTimePosition, 60000);
345:     return () => clearInterval(interval);
346:   }, [TIME_SLOT_HEIGHT]);
347:   // Toggle expansion functions
348:   const toggleExpand = (id, isTable) => {
349:     if (isTable) {
350:       setExpandedTableIds((prevExpanded) => {
351:         const newExpanded = new Set(prevExpanded);
352:         if (newExpanded.has(id)) {
353:           newExpanded.delete(id);
354:         } else {
355:           newExpanded.add(id);
356:         }
357:         return newExpanded;
358:       });
359:     } else {
360:       setExpandedCounterSeatIds((prevExpanded) => {
361:         const newExpanded = new Set(prevExpanded);
362:         if (newExpanded.has(id)) {
363:           newExpanded.delete(id);
364:         } else {
365:           newExpanded.add(id);
366:         }
367:         return newExpanded;
368:       });
369:     }
370:   };
371:   const toggleAllTables = () => {
372:     if (areAllExpanded) {
373:       setExpandedTableIds(new Set());
374:       setExpandedCounterSeatIds(new Set());
375:     } else {
376:       setExpandedTableIds(new Set(tables.map((table) => getItemId(table))));
377:       setExpandedCounterSeatIds(
378:         new Set(counterSeats.map((seat) => getItemId(seat)))
379:       );
380:     }
381:     setAreAllExpanded(!areAllExpanded);
382:   };
383:   // Scroll sync handlers
384:   const handleHeaderScroll = (event) => {
385:     if (gridScrollRef.current) {
386:       gridScrollRef.current.scrollTo({
387:         x: event.nativeEvent.contentOffset.x,
388:         y: 0,
389:         animated: false,
390:       });
391:     }
392:   };
393:   const handleGridScroll = (event) => {
394:     if (headerScrollRef.current) {
395:       headerScrollRef.current.scrollTo({
396:         x: event.nativeEvent.contentOffset.x,
397:         y: 0,
398:         animated: false,
399:       });
400:     }
401:   };
402:   const handleVerticalScroll = (event) => {
403:     if (leftColumnScrollRef.current) {
404:       leftColumnScrollRef.current.scrollTo({
405:         y: event.nativeEvent.contentOffset.y,
406:         animated: false,
407:       });
408:     }
409:   };
410:   const handleLeftColumnScroll = (event) => {
411:     if (verticalScrollRef.current) {
412:       verticalScrollRef.current.scrollTo({
413:         y: event.nativeEvent.contentOffset.y,
414:         animated: false,
415:       });
416:     }
417:   };
418:   // Handle reservation click
419:   const handleReservationPress = (reservation) => {
420:     setSelectedReservation(
421:       selectedReservation?.id === reservation.id ? null : reservation
422:     );
423:   };
424:   // Refs for synchronized scrolling
425:   const verticalScrollRef = useRef(null);
426:   const leftColumnScrollRef = useRef(null);
427:   const headerScrollRef = useRef(null);
428:   const gridScrollRef = useRef(null);
429:   // Calculate content height
430:   const contentHeight = timeSlots.length * TIME_SLOT_HEIGHT;
431:   // Render header for an item (either table or counter seat)
432:   const renderItemHeader = (seatingItem) => {
433:     const { item, type, id } = seatingItem;
434:     if (type === "table") {
435:       const isExpanded = expandedTableIds.has(id);
436:       return (
437:         <TableHeader
438:           key={`table-${id}`}
439:           table={item}
440:           isExpanded={isExpanded}
441:           toggleExpand={() => toggleExpand(id, true)}
442:           width={TABLE_WIDTH}
443:         />
444:       );
445:     } else {
446:       // counter seat
447:       const isExpanded = expandedCounterSeatIds.has(id);
448:       return (
449:         <CounterSeatHeader
450:           key={`counter-${id}`}
451:           seat={item}
452:           isExpanded={isExpanded}
453:           toggleExpand={() => toggleExpand(id, false)}
454:           width={COUNTER_SEAT_WIDTH}
455:         />
456:       );
457:     }
458:   };
459:   // Get width for an item based on its type
460:   const getItemWidth = (type) => {
461:     return type === "table" ? TABLE_WIDTH : COUNTER_SEAT_WIDTH;
462:   };
463:   // Render reservation blocks
464:   const renderReservationBlocks = () => {
465:     // Create a map of the sorted item positions
466:     const itemPositionMap = {};
467:     let currentPosition = 0;
468:     sortedItems.forEach((item) => {
469:       const key = `${item.type === "table" ? "table" : "counter"}-${item.id}`;
470:       itemPositionMap[key] = currentPosition;
471:       currentPosition += getItemWidth(item.type);
472:     });
473:     return (
474:       <>
475:         {reservations.map((reservation) => {
476:           const isCounterSeat = !!reservation.isCounterSeat;
477:           const itemKey = isCounterSeat
478:             ? `counter-${reservation.counterSeatId}`
479:             : `table-${reservation.tableId}`;
480:           // Skip if we don't have this item in our sorted grid
481:           if (!(itemKey in itemPositionMap)) {
482:             return null;
483:           }
484:           // Calculate position based on the sortedItems layout
485:           const position = itemPositionMap[itemKey];
486:           const width = isCounterSeat ? COUNTER_SEAT_WIDTH : TABLE_WIDTH;
487:           const top =
488:             ((parseTimeToMinutes(reservation.time) - 9 * 60) / 30) *
489:             TIME_SLOT_HEIGHT;
490:           const height = (reservation.duration / 30) * TIME_SLOT_HEIGHT;
491:           return (
492:             <ReservationBlockStyled
493:               key={`res-${reservation.id}`}
494:               left={position}
495:               top={top}
496:               width={width}
497:               height={height}
498:               status={reservation.status}
499:               onPress={() => handleReservationPress(reservation)}
500:               isSelected={selectedReservation?.id === reservation.id}
501:               isPending={reservation.status === "pending"}
502:             >
503:               {reservation.status === "pending" && (
504:                 <PendingBorder style={{ opacity: breathingAnim }} />
505:               )}
506:               <ReservationName>{reservation.customerName}</ReservationName>
507:               <ReservationDetails>
508:                 {reservation.time} • {reservation.people}{" "}
509:                 {reservation.people > 1 ? "people" : "person"}
510:               </ReservationDetails>
511:             </ReservationBlockStyled>
512:           );
513:         })}
514:       </>
515:     );
516:   };
517:   return (
518:     <Container>
519:       <MainGrid>
520:         <HeaderContainer>
521:           <LeftColumnContainer width={TIME_COLUMN_WIDTH}>
522:             <TimeColumnHeader width={TIME_COLUMN_WIDTH}>
523:               <ExpandAllButton
524:                 onPress={toggleAllTables}
525:                 areAllExpanded={areAllExpanded}
526:               >
527:                 <ExpandAllButtonText>
528:                   {areAllExpanded ? "Collapse All" : "Expand All"}
529:                 </ExpandAllButtonText>
530:               </ExpandAllButton>
531:             </TimeColumnHeader>
532:           </LeftColumnContainer>
533:           <HeaderScrollView
534:             ref={headerScrollRef}
535:             horizontal
536:             showsHorizontalScrollIndicator={false}
537:             onScroll={handleHeaderScroll}
538:             scrollEventThrottle={16}
539:             contentContainerStyle={{ paddingLeft: TIME_COLUMN_WIDTH }}
540:           >
541:             <HeaderRow>
542:               {/* Render all items headers in sorted order */}
543:               {sortedItems.map(renderItemHeader)}
544:             </HeaderRow>
545:           </HeaderScrollView>
546:         </HeaderContainer>
547:         <ContentContainer>
548:           <LeftColumnContainer width={TIME_COLUMN_WIDTH}>
549:             <ScrollView
550:               ref={leftColumnScrollRef}
551:               onScroll={handleLeftColumnScroll}
552:               scrollEventThrottle={16}
553:               showsVerticalScrollIndicator={true}
554:             >
555:               <TimeColumn width={TIME_COLUMN_WIDTH}>
556:                 {timeSlots.map((time) => (
557:                   <TimeSlot
558:                     key={time}
559:                     height={TIME_SLOT_HEIGHT}
560:                     width={TIME_COLUMN_WIDTH}
561:                   >
562:                     <TimeText>{time}</TimeText>
563:                   </TimeSlot>
564:                 ))}
565:               </TimeColumn>
566:             </ScrollView>
567:           </LeftColumnContainer>
568:           <HeaderScrollView
569:             ref={gridScrollRef}
570:             horizontal
571:             showsHorizontalScrollIndicator={false}
572:             onScroll={handleGridScroll}
573:             scrollEventThrottle={16}
574:             contentContainerStyle={{ paddingLeft: TIME_COLUMN_WIDTH }}
575:           >
576:             <ScrollView
577:               ref={verticalScrollRef}
578:               onScroll={handleVerticalScroll}
579:               scrollEventThrottle={16}
580:               showsVerticalScrollIndicator={false}
581:             >
582:               <GridContainer style={{ height: contentHeight }}>
583:                 {/* Render grid cells */}
584:                 <View style={{ flexDirection: "row" }}>
585:                   {/* All item columns */}
586:                   {sortedItems.map((seatingItem, index) => (
587:                     <View
588:                       key={`item-col-${seatingItem.id}`}
589:                       style={{ width: getItemWidth(seatingItem.type) }}
590:                     >
591:                       {timeSlots.map((time, timeIndex) => (
592:                         <View
593:                           key={`item-cell-${index}-${timeIndex}`}
594:                           style={{
595:                             width: getItemWidth(seatingItem.type),
596:                             height: TIME_SLOT_HEIGHT,
597:                             borderLeftWidth: 1,
598:                             borderBottomWidth: 1,
599:                             borderLeftColor: "#e1e1e1",
600:                             borderBottomColor: "#e1e1e1",
601:                           }}
602:                         />
603:                       ))}
604:                     </View>
605:                   ))}
606:                 </View>
607:                 {}
608:                 <CurrentTimeLine style={{ top: currentTimePosition }}>
609:                   <CurrentTimeIndicator />
610:                 </CurrentTimeLine>
611:                 {}
612:                 {renderReservationBlocks()}
613:               </GridContainer>
614:             </ScrollView>
615:           </HeaderScrollView>
616:         </ContentContainer>
617:       </MainGrid>
618:       {}
619:       {selectedReservation && (
620:         <ReservationDetailsPanel
621:           reservation={selectedReservation}
622:           onClose={() => setSelectedReservation(null)}
623:         />
624:       )}
625:     </Container>
626:   );
627: };
628: export default ReservationsGrid;

================
File: src/features/merchant/reservations/components/ReservationsMailbox.js
================
  1: import React, { useState, useRef, useEffect } from "react";
  2: import {
  3:   FlatList,
  4:   Animated,
  5:   View,
  6:   Alert,
  7:   TouchableOpacity,
  8: } from "react-native";
  9: import styled from "styled-components/native";
 10: import { CustomText } from "../../../../components/CustomText/CustomText";
 11: import { MaterialIcons } from "@expo/vector-icons";
 12: import { GestureHandlerRootView } from "react-native-gesture-handler";
 13: import Swipeable from "react-native-gesture-handler/Swipeable";
 14: const COLORS = {
 15:   PENDING: {
 16:     bg: "#ffd11a",
 17:     text: "#a67f00",
 18:   },
 19:   CONFIRMED: {
 20:     bg: "#4CAF50",
 21:     text: "#FFFFFF",
 22:   },
 23:   CANCELED: {
 24:     bg: "#ff4d4d",
 25:     text: "#FFFFFF",
 26:   },
 27: };
 28: const Container = styled.View`
 29:   flex: 1;
 30:   background-color: ${(props) => props.theme.colors.bg.primary};
 31: `;
 32: const ReservationCard = styled(TouchableOpacity)`
 33:   background-color: ${(props) => props.theme.colors.bg.primary};
 34:   border-radius: 4px;
 35:   margin: 2px 12px;
 36:   padding: 10px 12px;
 37:   shadow-opacity: 0.05;
 38:   shadow-radius: 2px;
 39:   shadow-color: #000;
 40:   shadow-offset: 0px 1px;
 41:   elevation: 1;
 42:   border-left-width: 3px;
 43:   border-left-color: ${(props) => {
 44:     switch (props.status) {
 45:       case "pending":
 46:         return COLORS.PENDING.bg;
 47:       case "confirmed":
 48:         return COLORS.CONFIRMED.bg;
 49:       default:
 50:         return COLORS.CANCELED.bg;
 51:     }
 52:   }};
 53: `;
 54: const StatusIndicator = styled.View`
 55:   position: absolute;
 56:   right: 10px;
 57:   top: 10px;
 58:   border-radius: 3px;
 59:   padding: 2px 4px;
 60:   background-color: ${(props) => {
 61:     switch (props.status) {
 62:       case "pending":
 63:         return COLORS.PENDING.bg;
 64:       case "confirmed":
 65:         return COLORS.CONFIRMED.bg;
 66:       default:
 67:         return COLORS.CANCELED.bg;
 68:     }
 69:   }};
 70: `;
 71: const StatusText = styled(CustomText)`
 72:   font-size: 10px;
 73:   font-weight: bold;
 74:   color: ${(props) => {
 75:     switch (props.status) {
 76:       case "pending":
 77:         return COLORS.PENDING.text;
 78:       case "confirmed":
 79:         return COLORS.CONFIRMED.text;
 80:       default:
 81:         return COLORS.CANCELED.text;
 82:     }
 83:   }};
 84: `;
 85: const CardTitle = styled(CustomText)`
 86:   font-size: 16px;
 87:   font-weight: bold;
 88:   margin-bottom: 4px;
 89:   margin-right: 65px;
 90: `;
 91: const DetailRow = styled.View`
 92:   flex-direction: row;
 93:   align-items: center;
 94:   margin-vertical: 2px;
 95: `;
 96: const DetailIcon = styled(MaterialIcons)`
 97:   margin-right: 4px;
 98:   font-size: 14px;
 99: `;
100: const DetailText = styled(CustomText)`
101:   font-size: 12px;
102: `;
103: const SectionHeader = styled.View`
104:   background-color: ${(props) => props.theme.colors.ui.tertiary};
105:   padding: 6px 12px;
106: `;
107: const SectionHeaderText = styled(CustomText)`
108:   font-size: 16px;
109:   font-weight: bold;
110: `;
111: const SwipeHintContainer = styled(Animated.View)`
112:   padding: 16px;
113:   align-items: center;
114:   margin-bottom: 8px;
115: `;
116: const SwipeHintText = styled(CustomText)`
117:   font-size: 14px;
118:   color: ${(props) => props.theme.colors.text.secondary};
119:   text-align: center;
120: `;
121: const ActionContainer = styled.View`
122:   flex: 1;
123:   flex-direction: row;
124:   align-items: center;
125:   justify-content: center;
126:   background-color: ${(props) => props.color};
127: `;
128: const ActionText = styled(CustomText)`
129:   color: white;
130:   font-weight: bold;
131:   font-size: 16px;
132:   margin-left: 8px;
133: `;
134: const NoReservationsContainer = styled.View`
135:   flex: 1;
136:   justify-content: center;
137:   align-items: center;
138:   padding: 20px;
139: `;
140: const NoReservationsText = styled(CustomText)`
141:   font-size: 16px;
142:   color: ${(props) => props.theme.colors.text.secondary};
143:   text-align: center;
144: `;
145: const ReservationsMailbox = ({ reservations }) => {
146:   const [expandedId, setExpandedId] = useState(null);
147:   const [hintVisible, setHintVisible] = useState(true);
148:   const swipeableRef = useRef(null);
149:   const fadeAnim = useRef(new Animated.Value(1)).current;
150:   const flatListRef = useRef(null);
151:   const hideTimerRef = useRef(null);
152:   // Track scroll for pull detection
153:   const lastScrollY = useRef(0);
154:   const scrollVelocity = useRef(0);
155:   const lastScrollTime = useRef(Date.now());
156:   // Auto-hide hint after initial display
157:   useEffect(() => {
158:     // Initial timeout - hide after 5 seconds
159:     const timer = setTimeout(() => {
160:       Animated.timing(fadeAnim, {
161:         toValue: 0,
162:         duration: 1000,
163:         useNativeDriver: true,
164:       }).start(() => setHintVisible(false));
165:     }, 5000);
166:     return () => {
167:       clearTimeout(timer);
168:       if (hideTimerRef.current) {
169:         clearTimeout(hideTimerRef.current);
170:       }
171:     };
172:   }, []);
173:   // Show hint only with strong pull-to-refresh type gesture
174:   const handleScroll = (event) => {
175:     const currentTime = Date.now();
176:     const timeDelta = currentTime - lastScrollTime.current;
177:     const currentY = event.nativeEvent.contentOffset.y;
178:     // Calculate scroll velocity (pixels per millisecond)
179:     if (timeDelta > 0) {
180:       scrollVelocity.current = (lastScrollY.current - currentY) / timeDelta;
181:     }
182:     // Strong pull detected at the top (negative because pulling down)
183:     const isStrongPullUp = scrollVelocity.current > 0.5 && currentY < 10;
184:     const isScrollingDown = currentY > 30 && currentY > lastScrollY.current;
185:     // Show hint on strong pull at top
186:     if (isStrongPullUp && !hintVisible) {
187:       setHintVisible(true);
188:       Animated.timing(fadeAnim, {
189:         toValue: 1,
190:         duration: 300,
191:         useNativeDriver: true,
192:       }).start();
193:       // Keep hint visible for a short time
194:       clearTimeout(hideTimerRef.current);
195:       hideTimerRef.current = setTimeout(() => {
196:         Animated.timing(fadeAnim, {
197:           toValue: 0,
198:           duration: 500,
199:           useNativeDriver: true,
200:         }).start(() => setHintVisible(false));
201:       }, 3000);
202:     }
203:     // Hide hint when scrolling down
204:     else if (isScrollingDown && hintVisible) {
205:       clearTimeout(hideTimerRef.current);
206:       Animated.timing(fadeAnim, {
207:         toValue: 0,
208:         duration: 300,
209:         useNativeDriver: true,
210:       }).start(() => setHintVisible(false));
211:     }
212:     // Save current position and time for next calculation
213:     lastScrollY.current = currentY;
214:     lastScrollTime.current = currentTime;
215:   };
216:   const sortReservations = (reservations) => {
217:     return [...reservations].sort((a, b) => {
218:       // Priority by status (pending first)
219:       if (a.status === "pending" && b.status !== "pending") return -1;
220:       if (a.status !== "pending" && b.status === "pending") return 1;
221:       // Then sort by time
222:       const timeA = a.time.split(":").map(Number);
223:       const timeB = b.time.split(":").map(Number);
224:       if (timeA[0] !== timeB[0]) return timeA[0] - timeB[0]; // Sort by hour
225:       return timeA[1] - timeB[1]; // Sort by minute
226:     });
227:   };
228:   // Group reservations by status
229:   const groupedReservations = {
230:     today: sortReservations(reservations.filter((r) => r.status === "pending")),
231:     upcoming: sortReservations(
232:       reservations.filter((r) => r.status === "confirmed")
233:     ),
234:     past: sortReservations(
235:       reservations.filter(
236:         (r) => r.status !== "pending" && r.status !== "confirmed"
237:       )
238:     ),
239:   };
240:   // Handler functions with alerts for testing
241:   const handleConfirm = (id) => {
242:     Alert.alert(
243:       "Confirm Reservation",
244:       `Reservation #${id} has been CONFIRMED.`,
245:       [{ text: "OK" }]
246:     );
247:     // Here you would update the reservation status in your state or database
248:   };
249:   const handleCancel = (id) => {
250:     Alert.alert("Cancel Reservation", `Reservation #${id} has been CANCELED.`, [
251:       { text: "OK" },
252:     ]);
253:     // Here you would update the reservation status in your state or database
254:   };
255:   // Action renderers - Pure functions that return appropriate action UI
256:   const renderRightActions = (progress, dragX) => {
257:     return (
258:       <ActionContainer color={COLORS.CONFIRMED.bg}>
259:         <MaterialIcons name="check-circle" size={24} color="white" />
260:         <ActionText>CONFIRM</ActionText>
261:       </ActionContainer>
262:     );
263:   };
264:   const renderLeftActions = (progress, dragX) => {
265:     return (
266:       <ActionContainer color={COLORS.CANCELED.bg}>
267:         <MaterialIcons name="cancel" size={24} color="white" />
268:         <ActionText>CANCEL</ActionText>
269:       </ActionContainer>
270:     );
271:   };
272:   // Card renderer
273:   const renderReservationCard = ({ item }) => {
274:     const isExpanded = expandedId === item.id;
275:     return (
276:       <Swipeable
277:         ref={(ref) => {
278:           if (ref && expandedId === item.id) {
279:             swipeableRef.current = ref;
280:           }
281:         }}
282:         friction={2}
283:         leftThreshold={40}
284:         rightThreshold={40}
285:         renderLeftActions={renderLeftActions}
286:         renderRightActions={renderRightActions}
287:         onSwipeableLeftOpen={() => handleCancel(item.id)}
288:         onSwipeableRightOpen={() => handleConfirm(item.id)}
289:         onSwipeableWillOpen={(direction) => {
290:           // Close previous swipeable
291:           if (swipeableRef.current && expandedId !== item.id) {
292:             swipeableRef.current.close();
293:           }
294:           // Log for debugging
295:           console.log(`Swiping ${direction} for reservation #${item.id}`);
296:           setExpandedId(item.id);
297:         }}
298:         containerStyle={{ backgroundColor: "transparent" }}
299:         childrenContainerStyle={{ backgroundColor: "white" }}
300:       >
301:         <ReservationCard
302:           status={item.status}
303:           onPress={() => setExpandedId(expandedId === item.id ? null : item.id)}
304:         >
305:           <StatusIndicator status={item.status}>
306:             <StatusText status={item.status}>
307:               {item.status.toUpperCase()}
308:             </StatusText>
309:           </StatusIndicator>
310:           <CardTitle numberOfLines={1} ellipsizeMode="tail">
311:             {item.customerName}
312:           </CardTitle>
313:           <DetailRow>
314:             <DetailIcon name="access-time" color="#757575" />
315:             <DetailText>
316:               {item.time} ({item.duration} min)
317:             </DetailText>
318:           </DetailRow>
319:           <DetailRow>
320:             <DetailIcon name="people" color="#757575" />
321:             <DetailText>
322:               {item.people} {item.people > 1 ? "people" : "person"}
323:             </DetailText>
324:           </DetailRow>
325:           {!isExpanded ? (
326:             <DetailRow>
327:               <DetailIcon name="event-seat" color="#757575" />
328:               <DetailText numberOfLines={1} ellipsizeMode="tail">
329:                 {item.isCounterSeat
330:                   ? `Counter: ${item.counterSeatId}`
331:                   : `Table: ${item.tableId}`}
332:               </DetailText>
333:             </DetailRow>
334:           ) : (
335:             <>
336:               <DetailRow>
337:                 <DetailIcon name="event-seat" color="#757575" />
338:                 <DetailText>
339:                   {item.isCounterSeat
340:                     ? `Counter Seat: ${item.counterSeatId}`
341:                     : `Table: ${item.tableId}`}
342:                 </DetailText>
343:               </DetailRow>
344:               {item.note && (
345:                 <DetailRow>
346:                   <DetailIcon name="notes" color="#757575" />
347:                   <DetailText>{item.note}</DetailText>
348:                 </DetailRow>
349:               )}
350:             </>
351:           )}
352:         </ReservationCard>
353:       </Swipeable>
354:     );
355:   };
356:   // Section header renderer
357:   const renderSectionHeader = (title, count) => (
358:     <SectionHeader>
359:       <SectionHeaderText>
360:         {title} ({count})
361:       </SectionHeaderText>
362:     </SectionHeader>
363:   );
364:   // Combine all sections into a flat array for FlatList
365:   const sections = [
366:     { key: "hint", type: "hint" },
367:     {
368:       key: "pendingHeader",
369:       type: "header",
370:       title: "Pending Reservations",
371:       count: groupedReservations.today.length,
372:     },
373:     ...groupedReservations.today.map((item) => ({
374:       key: `pending-${item.id}`,
375:       type: "item",
376:       item,
377:     })),
378:     {
379:       key: "upcomingHeader",
380:       type: "header",
381:       title: "Confirmed Reservations",
382:       count: groupedReservations.upcoming.length,
383:     },
384:     ...groupedReservations.upcoming.map((item) => ({
385:       key: `upcoming-${item.id}`,
386:       type: "item",
387:       item,
388:     })),
389:     {
390:       key: "pastHeader",
391:       type: "header",
392:       title: "Past Reservations",
393:       count: groupedReservations.past.length,
394:     },
395:     ...groupedReservations.past.map((item) => ({
396:       key: `past-${item.id}`,
397:       type: "item",
398:       item,
399:     })),
400:   ];
401:   const renderItem = ({ item }) => {
402:     switch (item.type) {
403:       case "hint":
404:         return hintVisible ? (
405:           <SwipeHintContainer style={{ opacity: fadeAnim }}>
406:             <SwipeHintText>
407:               ← Swipe LEFT to CANCEL{"\n"}
408:               Swipe RIGHT to CONFIRM →
409:             </SwipeHintText>
410:           </SwipeHintContainer>
411:         ) : null;
412:       case "header":
413:         return renderSectionHeader(item.title, item.count);
414:       case "item":
415:         return renderReservationCard({ item: item.item });
416:       default:
417:         return null;
418:     }
419:   };
420:   if (!reservations || reservations.length === 0) {
421:     return (
422:       <NoReservationsContainer>
423:         <MaterialIcons name="event-busy" size={60} color="#757575" />
424:         <NoReservationsText>No reservations found</NoReservationsText>
425:       </NoReservationsContainer>
426:     );
427:   }
428:   return (
429:     <GestureHandlerRootView style={{ flex: 1 }}>
430:       <Container>
431:         <FlatList
432:           ref={flatListRef}
433:           data={sections}
434:           renderItem={renderItem}
435:           keyExtractor={(item) => item.key}
436:           onScroll={handleScroll}
437:           scrollEventThrottle={16}
438:         />
439:       </Container>
440:     </GestureHandlerRootView>
441:   );
442: };
443: export default ReservationsMailbox;

================
File: src/features/merchant/reservations/screens/MerchantReservationsScreen.js
================
 1: import React, { useState } from "react";
 2: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
 3: import { seatingData, merchantReservations } from "../../../../data/mockData";
 4: import { generateTimeSlots } from "../utils/timeUtils";
 5: import ReservationsGrid from "../components/ReservationsGrid";
 6: import ReservationsMailbox from "../components/ReservationsMailbox";
 7: import {
 8:   TabBar,
 9:   Tab,
10:   TabText,
11: } from "../components/ReservationComponents.styles";
12: import { MaterialIcons } from "@expo/vector-icons";
13: import styled from "styled-components/native";
14: const Container = styled.View`
15:   flex: 1;
16:   background-color: ${(props) => props.theme.colors.bg.primary};
17: `;
18: const TABS = {
19:   GRID: "grid",
20:   SMART: "smart",
21:   MAILBOX: "mailbox",
22: };
23: export const MerchantReservationsScreen = () => {
24:   const timeSlots = generateTimeSlots();
25:   const [activeTab, setActiveTab] = useState(TABS.GRID);
26:   return (
27:     <SafeArea>
28:       <Container>
29:         <TabBar>
30:           <Tab
31:             active={activeTab === TABS.GRID}
32:             onPress={() => setActiveTab(TABS.GRID)}
33:             activeOpacity={0.6}
34:           >
35:             <MaterialIcons
36:               name="grid-on"
37:               size={20}
38:               color={activeTab === TABS.GRID ? "#262626" : "#757575"}
39:             />
40:             <TabText active={activeTab === TABS.GRID}>Grid View</TabText>
41:           </Tab>
42:           <Tab
43:             active={activeTab === TABS.SMART}
44:             onPress={() => setActiveTab(TABS.SMART)}
45:             activeOpacity={0.6}
46:           >
47:             <MaterialIcons
48:               name="auto-awesome"
49:               size={20}
50:               color={activeTab === TABS.SMART ? "#262626" : "#757575"}
51:             />
52:             <TabText active={activeTab === TABS.SMART}>Smart View</TabText>
53:           </Tab>
54:           <Tab
55:             active={activeTab === TABS.MAILBOX}
56:             onPress={() => setActiveTab(TABS.MAILBOX)}
57:             activeOpacity={0.6}
58:           >
59:             <MaterialIcons
60:               name="mail"
61:               size={20}
62:               color={activeTab === TABS.MAILBOX ? "#262626" : "#757575"}
63:             />
64:             <TabText active={activeTab === TABS.MAILBOX}>Inbox</TabText>
65:           </Tab>
66:         </TabBar>
67:         {activeTab === TABS.MAILBOX ? (
68:           <ReservationsMailbox reservations={merchantReservations} />
69:         ) : (
70:           <ReservationsGrid
71:             timeSlots={timeSlots}
72:             tables={seatingData.tables}
73:             counterSeats={seatingData.counterSeats}
74:             reservations={merchantReservations}
75:             isSmartSorting={activeTab === TABS.SMART}
76:           />
77:         )}
78:       </Container>
79:     </SafeArea>
80:   );
81: };

================
File: src/features/merchant/reservations/utils/timeUtils.js
================
 1: export const generateTimeSlots = () => {
 2:   const slots = [];
 3:   for (let hour = 9; hour <= 22; hour++) {
 4:     const hourStr = hour.toString().padStart(2, "0");
 5:     slots.push(`${hourStr}:00`);
 6:     slots.push(`${hourStr}:30`);
 7:   }
 8:   return slots;
 9: };
10: export const calculateCurrentTimePosition = (timeSlotHeight) => {
11:   const now = new Date();
12:   const hours = now.getHours();
13:   const minutes = now.getMinutes();
14:   if (hours < 9 || (hours === 22 && minutes > 30) || hours > 22) {
15:     return -100;
16:   }
17:   const minutesSince9AM = (hours - 9) * 60 + minutes;
18:   return (minutesSince9AM / 30) * timeSlotHeight;
19: };
20: export const parseTimeString = (timeString) => {
21:   return timeString.split(":").map(Number);
22: };
23: export const convertToMinutesSince9AM = (timeString) => {
24:   const [hours, minutes] = parseTimeString(timeString);
25:   return (hours - 9) * 60 + minutes;
26: };
27: export const getTimeSlotIndex = (timeString) => {
28:   const minutesSince9AM = convertToMinutesSince9AM(timeString);
29:   return Math.floor(minutesSince9AM / 30);
30: };
31: export const formatTimeFromDate = (date) => {
32:   const hours = date.getHours().toString().padStart(2, "0");
33:   const minutes = date.getMinutes().toString().padStart(2, "0");
34:   return `${hours}:${minutes}`;
35: };
36: export const generateCurrentDayTimes = (count = 5) => {
37:   let timesArray = [];
38:   let current = new Date();
39:   current.setSeconds(0);
40:   current.setMilliseconds(0);
41:   const minutes = current.getMinutes();
42:   current.setMinutes(minutes >= 30 ? 30 : 0);
43:   for (let i = 0; i < count; i++) {
44:     timesArray.push(formatTimeFromDate(current));
45:     current.setMinutes(current.getMinutes() + 30);
46:   }
47:   return timesArray;
48: };

================
File: src/features/merchant/settings/components/EditButton.js
================
 1: import React from "react";
 2: import { TouchableOpacity } from "react-native";
 3: import styled from "styled-components/native";
 4: import { CustomText } from "../../../../components/CustomText/CustomText";
 5: const Button = styled(TouchableOpacity)`
 6:   background-color: ${(props) => props.theme.colors.ui.primary};
 7:   padding-vertical: ${(props) => props.theme.space[2]};
 8:   padding-horizontal: ${(props) => props.theme.space[3]};
 9:   margin: ${(props) => props.theme.space[3]};
10:   border-radius: 5px;
11:   ${(props) =>
12:     props.position === "absolute" &&
13:     `
14:     position: absolute;
15:     right: ${props.theme.space[3]};
16:   `}
17: `;
18: const ButtonText = styled(CustomText)`
19:   color: ${(props) => props.theme.colors.bg.primary};
20:   font-size: ${(props) => props.theme.fontSizes.caption};
21: `;
22: export const EditButton = ({ onPress, position, style, children = "Edit" }) => {
23:   return (
24:     <Button onPress={onPress} position={position} style={style}>
25:       <ButtonText>{children}</ButtonText>
26:     </Button>
27:   );
28: };
29: export default EditButton;

================
File: src/features/merchant/settings/screens/MerchantProfileScreen.js
================
  1: import React, { useState } from "react";
  2: import { Avatar } from "react-native-paper";
  3: import { MaterialIcons } from "@expo/vector-icons";
  4: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
  5: import { CustomText } from "../../../../components/CustomText/CustomText";
  6: import { BackButton } from "../../../../components/BackButton/BackButton";
  7: import { merchantProfile } from "../../../../data/mockData";
  8: import {
  9:   ProfileContainer,
 10:   Header,
 11:   SectionTitle,
 12:   ProfileImageContainer,
 13:   SettingsItemRow,
 14:   SettingsItemText,
 15:   SectionContainer,
 16: } from "./MerchantProfileScreen.styles";
 17: export const MerchantProfileScreen = ({ navigation }) => {
 18:   const [profile, setProfile] = useState(merchantProfile);
 19:   const basicInfoItems = [
 20:     {
 21:       title: "Name",
 22:       value: profile.name,
 23:       icon: "account-circle",
 24:       onPress: () => console.log("Navigate to edit name"),
 25:     },
 26:     {
 27:       title: "Email",
 28:       value: profile.email,
 29:       icon: "email",
 30:       onPress: () => console.log("Navigate to edit email"),
 31:     },
 32:     {
 33:       title: "Phone Number",
 34:       value: profile.phoneNumber,
 35:       icon: "phone",
 36:       onPress: () => console.log("Navigate to edit phone"),
 37:     },
 38:   ];
 39:   const restaurantInfoItems = [
 40:     {
 41:       title: "Restaurant Name",
 42:       value: profile.restaurantName,
 43:       icon: "store",
 44:       onPress: () =>
 45:         navigation.navigate("RestaurantEdit", {
 46:           restaurant: { name: profile.restaurantName },
 47:         }),
 48:     },
 49:     {
 50:       title: "Restaurant Address",
 51:       value: "123 Restaurant St, City",
 52:       icon: "place",
 53:       onPress: () => console.log("Navigate to edit address"),
 54:     },
 55:     {
 56:       title: "Business Hours",
 57:       value: "Mon-Fri: 9AM-10PM, Sat-Sun: 10AM-11PM",
 58:       icon: "schedule",
 59:       onPress: () => console.log("Navigate to edit hours"),
 60:     },
 61:   ];
 62:   const accountSettingsItems = [
 63:     {
 64:       title: "Password",
 65:       value: "Change your password",
 66:       icon: "lock",
 67:       onPress: () => console.log("Navigate to change password"),
 68:     },
 69:     {
 70:       title: "Notifications",
 71:       value: "Manage notification settings",
 72:       icon: "notifications",
 73:       onPress: () => console.log("Navigate to notifications"),
 74:     },
 75:     {
 76:       title: "Language",
 77:       value: "English",
 78:       icon: "language",
 79:       onPress: () => console.log("Navigate to language settings"),
 80:     },
 81:   ];
 82:   const renderSettingsItems = (items) => {
 83:     return items.map((item, index) => (
 84:       <SettingsItemRow key={index} onPress={item.onPress}>
 85:         <MaterialIcons name={item.icon} size={24} color="#262626" />
 86:         <SettingsItemText>
 87:           <CustomText variant="body" style={{ fontWeight: "bold" }}>
 88:             {item.title}
 89:           </CustomText>
 90:           <CustomText variant="body" style={{ color: "#757575" }}>
 91:             {item.value}
 92:           </CustomText>
 93:         </SettingsItemText>
 94:         <MaterialIcons name="chevron-right" size={24} color="#757575" />
 95:       </SettingsItemRow>
 96:     ));
 97:   };
 98:   return (
 99:     <SafeArea>
100:       <ProfileContainer showsVerticalScrollIndicator={false}>
101:         <Header>
102:           <BackButton />
103:           <CustomText variant="title">Merchant Profile</CustomText>
104:         </Header>
105:         {}
106:         <ProfileImageContainer>
107:           <Avatar.Image size={80} source={profile.profileImage} />
108:           <CustomText
109:             variant="title"
110:             style={{ marginTop: 10, marginBottom: 5 }}
111:           >
112:             {profile.name}
113:           </CustomText>
114:           <CustomText variant="caption" style={{ color: "#757575" }}>
115:             {profile.restaurantName}
116:           </CustomText>
117:         </ProfileImageContainer>
118:         {}
119:         <SectionContainer>
120:           <SectionTitle variant="body">PERSONAL INFO</SectionTitle>
121:           {renderSettingsItems(basicInfoItems)}
122:         </SectionContainer>
123:         {}
124:         <SectionContainer>
125:           <SectionTitle variant="body">RESTAURANT DETAILS</SectionTitle>
126:           {renderSettingsItems(restaurantInfoItems)}
127:         </SectionContainer>
128:         {}
129:         <SectionContainer>
130:           <SectionTitle variant="body">ACCOUNT SETTINGS</SectionTitle>
131:           {renderSettingsItems(accountSettingsItems)}
132:         </SectionContainer>
133:       </ProfileContainer>
134:     </SafeArea>
135:   );
136: };
137: export default MerchantProfileScreen;

================
File: src/features/merchant/settings/screens/MerchantProfileScreen.styles.js
================
 1: import styled from "styled-components/native";
 2: import { ScrollView, TouchableOpacity } from "react-native";
 3: import { CustomText } from "../../../../components/CustomText/CustomText";
 4: export const ProfileContainer = styled(ScrollView)`
 5:   background-color: ${(props) => props.theme.colors.bg.primary};
 6:   flex: 1;
 7:   margin: ${(props) => props.theme.space[1]};
 8: `;
 9: export const Header = styled.View`
10:   flex-direction: row;
11:   align-items: center;
12:   justify-content: center;
13:   padding: ${(props) => props.theme.space[2]};
14:   position: relative;
15:   margin-bottom: ${(props) => props.theme.space[2]};
16: `;
17: export const ProfileImageContainer = styled.View`
18:   align-items: center;
19:   padding: ${(props) => props.theme.space[3]};
20:   margin-bottom: ${(props) => props.theme.space[3]};
21: `;
22: export const SectionTitle = styled(CustomText)`
23:   font-weight: ${(props) => props.theme.fontWeights.bold};
24:   color: ${(props) => props.theme.colors.text.secondary};
25:   font-size: ${(props) => props.theme.fontSizes.caption};
26:   margin-bottom: ${(props) => props.theme.space[2]};
27:   margin-left: ${(props) => props.theme.space[3]};
28: `;
29: export const SectionContainer = styled.View`
30:   margin-top: ${(props) => props.theme.space[2]};
31:   margin-bottom: ${(props) => props.theme.space[3]};
32: `;
33: export const SettingsItemRow = styled(TouchableOpacity)`
34:   flex-direction: row;
35:   align-items: center;
36:   padding-vertical: ${(props) => props.theme.space[3]};
37:   padding-horizontal: ${(props) => props.theme.space[3]};
38:   background-color: ${(props) => props.theme.colors.bg.primary};
39: `;
40: export const SettingsItemText = styled.View`
41:   flex: 1;
42:   margin-left: ${(props) => props.theme.space[3]};
43: `;

================
File: src/features/merchant/settings/screens/MerchantSettingsScreen.js
================
  1: import React from "react";
  2: import { TouchableOpacity, View } from "react-native";
  3: import { Avatar } from "react-native-paper";
  4: import { MaterialIcons } from "@expo/vector-icons";
  5: import styled from "styled-components/native";
  6: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
  7: import { CustomText } from "../../../../components/CustomText/CustomText";
  8: import { EditButton } from "../components/EditButton";
  9: import { useAuthentication } from "../../../../services/AuthenticationContext";
 10: import { sampleRestaurantData } from "../../../../data/mockEditRestaurantData";
 11: import { merchantProfile } from "../../../../data/mockData";
 12: const SettingsContainer = styled.ScrollView`
 13:   background-color: ${(props) => props.theme.colors.bg.primary};
 14:   flex: 1;
 15:   margin: ${(props) => props.theme.space[1]};
 16: `;
 17: const ProfileContainer = styled.View`
 18:   flex-direction: row;
 19:   justify-content: space-between;
 20:   align-items: center;
 21:   padding: ${(props) => props.theme.space[3]};
 22:   background-color: ${(props) => props.theme.colors.bg.primary};
 23:   margin-bottom: ${(props) => props.theme.space[2]};
 24: `;
 25: const UserInfoContainer = styled.View`
 26:   flex: 1;
 27:   margin-right: ${(props) => props.theme.space[2]};
 28:   align-items: flex-start;
 29: `;
 30: const AvatarContainer = styled.View`
 31:   align-items: center;
 32:   justify-content: center;
 33: `;
 34: const EmailText = styled(CustomText)`
 35:   color: ${(props) => props.theme.colors.text.secondary};
 36: `;
 37: const RestaurantNameText = styled(CustomText)`
 38:   color: ${(props) => props.theme.colors.text.primary};
 39:   font-weight: ${(props) => props.theme.fontWeights.bold};
 40: `;
 41: const StatusBadge = styled.View`
 42:   background-color: #4caf50;
 43:   padding: ${(props) => props.theme.space[1]} ${(props) => props.theme.space[2]};
 44:   border-radius: 12px;
 45:   margin-top: ${(props) => props.theme.space[2]};
 46:   align-self: flex-start;
 47: `;
 48: const StatusText = styled(CustomText)`
 49:   color: ${(props) => props.theme.colors.text.inverse};
 50:   font-size: ${(props) => props.theme.fontSizes.caption};
 51:   font-weight: ${(props) => props.theme.fontWeights.bold};
 52: `;
 53: const SectionTitle = styled(CustomText)`
 54:   padding: ${(props) => props.theme.space[3]};
 55:   font-weight: ${(props) => props.theme.fontWeights.bold};
 56:   color: ${(props) => props.theme.colors.text.secondary};
 57:   font-size: ${(props) => props.theme.fontSizes.caption};
 58: `;
 59: const SettingsItemRow = styled(TouchableOpacity)`
 60:   flex-direction: row;
 61:   align-items: center;
 62:   padding-vertical: ${(props) => props.theme.space[3]};
 63:   padding-horizontal: ${(props) => props.theme.space[3]};
 64:   background-color: ${(props) => props.theme.colors.bg.primary};
 65: `;
 66: const SettingsItemText = styled.View`
 67:   flex: 1;
 68:   margin-left: ${(props) => props.theme.space[3]};
 69: `;
 70: const SectionContainer = styled.View`
 71:   margin-bottom: ${(props) => props.theme.space[3]};
 72: `;
 73: export const MerchantSettingsScreen = ({ navigation }) => {
 74:   const { onLogout } = useAuthentication();
 75:   const accountItems = [
 76:     {
 77:       title: "Profile Settings",
 78:       subtitle: "Edit your personal information",
 79:       icon: "person",
 80:       onPress: () => navigation.navigate("MerchantProfile"),
 81:     },
 82:     {
 83:       title: "Restaurant Information",
 84:       subtitle: "View and update restaurant details",
 85:       icon: "store",
 86:       onPress: () =>
 87:         navigation.navigate("RestaurantDetail", {
 88:           restaurant: sampleRestaurantData,
 89:           isMerchantView: true,
 90:         }),
 91:     },
 92:     {
 93:       title: "Menu Management",
 94:       subtitle: "Add, edit, or remove menu items",
 95:       icon: "restaurant-menu",
 96:       onPress: () => {},
 97:     },
 98:   ];
 99:   const businessItems = [
100:     {
101:       title: "Seating Layout",
102:       subtitle: "Manage tables and seating arrangement",
103:       icon: "chair",
104:       onPress: () => navigation.navigate("Home"),
105:     },
106:     {
107:       title: "Reservation Settings",
108:       subtitle: "Configure reservation rules and availability",
109:       icon: "event",
110:       onPress: () => navigation.navigate("Reservations"),
111:     },
112:     {
113:       title: "Business Hours",
114:       subtitle: "Set your restaurant opening hours",
115:       icon: "schedule",
116:       onPress: () => {},
117:     },
118:   ];
119:   const systemItems = [
120:     {
121:       title: "Notifications",
122:       subtitle: "Manage notification preferences",
123:       icon: "notifications",
124:       onPress: () => {},
125:     },
126:     {
127:       title: "Payment Methods",
128:       subtitle: "Configure payment options",
129:       icon: "payment",
130:       onPress: () => {},
131:     },
132:     {
133:       title: "Help & Support",
134:       subtitle: "Contact customer support",
135:       icon: "help",
136:       onPress: () => {},
137:     },
138:     {
139:       title: "Logout",
140:       subtitle: "Sign out from your account",
141:       icon: "logout",
142:       iconColor: (props) => props.theme.colors.text.error,
143:       onPress: onLogout,
144:     },
145:   ];
146:   const renderSettingsItems = (items) => {
147:     return items.map((item, index) => (
148:       <SettingsItemRow key={index} onPress={item.onPress}>
149:         <MaterialIcons
150:           name={item.icon}
151:           size={24}
152:           color={item.iconColor || "#262626"}
153:         />
154:         <SettingsItemText>
155:           <CustomText variant="body" style={{ fontWeight: "bold" }}>
156:             {item.title}
157:           </CustomText>
158:           <CustomText variant="body" style={{ color: "#757575" }}>
159:             {item.subtitle}
160:           </CustomText>
161:         </SettingsItemText>
162:         <MaterialIcons name="chevron-right" size={24} color="#757575" />
163:       </SettingsItemRow>
164:     ));
165:   };
166:   return (
167:     <SafeArea>
168:       <SettingsContainer>
169:         <TouchableOpacity
170:           onPress={() => navigation.navigate("MerchantProfile")}
171:         >
172:           <ProfileContainer>
173:             <UserInfoContainer>
174:               <CustomText variant="h3">{merchantProfile.name}</CustomText>
175:               <EmailText variant="caption">{merchantProfile.email}</EmailText>
176:               <RestaurantNameText variant="body">
177:                 {merchantProfile.restaurantName}
178:               </RestaurantNameText>
179:               <StatusBadge>
180:                 <StatusText>ACTIVE</StatusText>
181:               </StatusBadge>
182:             </UserInfoContainer>
183:             <AvatarContainer>
184:               <Avatar.Image
185:                 size={80}
186:                 source={merchantProfile.profileImage}
187:                 backgroundColor={(props) => props.theme.colors.brand.primary}
188:               />
189:             </AvatarContainer>
190:           </ProfileContainer>
191:         </TouchableOpacity>
192:         <SectionContainer>
193:           <SectionTitle variant="body">ACCOUNT</SectionTitle>
194:           {renderSettingsItems(accountItems)}
195:         </SectionContainer>
196:         <SectionContainer>
197:           <SectionTitle variant="body">BUSINESS SETTINGS</SectionTitle>
198:           {renderSettingsItems(businessItems)}
199:         </SectionContainer>
200:         <SectionContainer>
201:           <SectionTitle variant="body">SYSTEM</SectionTitle>
202:           {renderSettingsItems(systemItems)}
203:         </SectionContainer>
204:       </SettingsContainer>
205:     </SafeArea>
206:   );
207: };

================
File: src/features/merchant/settings/screens/RestaurantEditScreen.js
================
  1: import React, { useState, useEffect } from "react";
  2: import {
  3:   ScrollView,
  4:   View,
  5:   TouchableOpacity,
  6:   TextInput,
  7:   Image,
  8:   Alert,
  9: } from "react-native";
 10: import { MaterialIcons } from "@expo/vector-icons";
 11: import * as ImagePicker from "expo-image-picker";
 12: import { BackButton } from "../../../../components/BackButton/BackButton";
 13: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
 14: import { CustomText } from "../../../../components/CustomText/CustomText";
 15: import { sampleRestaurantData } from "../../../../data/mockEditRestaurantData";
 16: import {
 17:   Container,
 18:   Header,
 19:   HeaderTitle,
 20:   SaveButton,
 21:   SaveButtonText,
 22:   Section,
 23:   SectionTitle,
 24:   FormGroup,
 25:   Label,
 26:   Input,
 27:   TextArea,
 28:   PhotoContainer,
 29:   PhotoItem,
 30:   PhotoImage,
 31:   AddPhotoButton,
 32:   RemovePhotoButton,
 33:   FeatureRow,
 34:   FeatureSwitch,
 35:   BusinessHoursRow,
 36:   DayLabel,
 37:   TimeInput,
 38:   ClosedCheckbox,
 39:   CuisineTag,
 40:   CuisineTagsContainer,
 41:   AddCuisineButton,
 42: } from "./RestaurantEditScreen.styles";
 43: export const RestaurantEditScreen = ({ route, navigation }) => {
 44:   const [restaurant, setRestaurant] = useState(
 45:     route.params?.restaurant || sampleRestaurantData
 46:   );
 47:   const [loading, setLoading] = useState(true);
 48:   const [newCuisine, setNewCuisine] = useState("");
 49:   // Load restaurant data
 50:   useEffect(() => {
 51:     // In a real app, this would be a fetch call to your API
 52:     const initialData = route.params?.restaurant || sampleRestaurantData;
 53:     // Ensure all required properties exist to prevent rendering errors
 54:     const completeData = {
 55:       ...sampleRestaurantData,
 56:       ...initialData,
 57:       // Ensure nested objects exist
 58:       address: {
 59:         ...sampleRestaurantData.address,
 60:         ...(initialData.address || {}),
 61:       },
 62:       businessHours: {
 63:         ...sampleRestaurantData.businessHours,
 64:         ...(initialData.businessHours || {}),
 65:       },
 66:       features: {
 67:         ...sampleRestaurantData.features,
 68:         ...(initialData.features || {}),
 69:       },
 70:       settings: {
 71:         ...sampleRestaurantData.settings,
 72:         ...(initialData.settings || {}),
 73:       },
 74:       socialMedia: {
 75:         ...sampleRestaurantData.socialMedia,
 76:         ...(initialData.socialMedia || {}),
 77:       },
 78:     };
 79:     setRestaurant(completeData);
 80:     setLoading(false);
 81:   }, [route.params?.restaurant]);
 82:   const handleSave = () => {
 83:     // In a real app, this would send the updated data to your API
 84:     Alert.alert("Success", "Restaurant information saved successfully", [
 85:       {
 86:         text: "OK",
 87:         onPress: () => {
 88:           navigation.navigate("RestaurantDetail", {
 89:             updatedRestaurant: restaurant,
 90:             isMerchantView: true,
 91:           });
 92:         },
 93:       },
 94:     ]);
 95:   };
 96:   const handleAddPhoto = async () => {
 97:     try {
 98:       const permissionResult =
 99:         await ImagePicker.requestMediaLibraryPermissionsAsync();
100:       if (!permissionResult.granted) {
101:         Alert.alert(
102:           "Permission Required",
103:           "Please allow access to your photo library"
104:         );
105:         return;
106:       }
107:       const pickerResult = await ImagePicker.launchImageLibraryAsync({
108:         allowsEditing: true,
109:         aspect: [4, 3],
110:         quality: 1,
111:       });
112:       if (
113:         !pickerResult.canceled &&
114:         pickerResult.assets &&
115:         pickerResult.assets.length > 0
116:       ) {
117:         setRestaurant((prev) => ({
118:           ...prev,
119:           photos: [...prev.photos, pickerResult.assets[0].uri],
120:         }));
121:       }
122:     } catch (error) {
123:       console.error("Error picking image:", error);
124:       Alert.alert("Error", "There was a problem selecting your image");
125:     }
126:   };
127:   const handleRemovePhoto = (index) => {
128:     setRestaurant((prev) => ({
129:       ...prev,
130:       photos: prev.photos.filter((_, i) => i !== index),
131:     }));
132:   };
133:   const updateTextValue = (field, value) => {
134:     setRestaurant((prev) => ({
135:       ...prev,
136:       [field]: value,
137:     }));
138:   };
139:   const updateNestedValue = (parent, field, value) => {
140:     setRestaurant((prev) => ({
141:       ...prev,
142:       [parent]: {
143:         ...prev[parent],
144:         [field]: value,
145:       },
146:     }));
147:   };
148:   const toggleFeature = (feature) => {
149:     setRestaurant((prev) => ({
150:       ...prev,
151:       features: {
152:         ...prev.features,
153:         [feature]: !prev.features[feature],
154:       },
155:     }));
156:   };
157:   const updateBusinessHours = (day, field, value) => {
158:     setRestaurant((prev) => ({
159:       ...prev,
160:       businessHours: {
161:         ...prev.businessHours,
162:         [day]: {
163:           ...prev.businessHours[day],
164:           [field]: value,
165:         },
166:       },
167:     }));
168:   };
169:   const toggleDayClosed = (day) => {
170:     const isClosed = restaurant.businessHours[day].isClosed;
171:     setRestaurant((prev) => ({
172:       ...prev,
173:       businessHours: {
174:         ...prev.businessHours,
175:         [day]: {
176:           ...prev.businessHours[day],
177:           isClosed: !isClosed,
178:         },
179:       },
180:     }));
181:   };
182:   const handleAddCuisine = () => {
183:     if (newCuisine.trim() === "") return;
184:     setRestaurant((prev) => ({
185:       ...prev,
186:       cuisine: [...prev.cuisine, newCuisine.trim()],
187:     }));
188:     setNewCuisine("");
189:   };
190:   const handleRemoveCuisine = (index) => {
191:     setRestaurant((prev) => ({
192:       ...prev,
193:       cuisine: prev.cuisine.filter((_, i) => i !== index),
194:     }));
195:   };
196:   if (loading || !restaurant) {
197:     return (
198:       <SafeArea>
199:         <Container>
200:           <CustomText>Loading restaurant information...</CustomText>
201:         </Container>
202:       </SafeArea>
203:     );
204:   }
205:   const daysOfWeek = [
206:     "monday",
207:     "tuesday",
208:     "wednesday",
209:     "thursday",
210:     "friday",
211:     "saturday",
212:     "sunday",
213:   ];
214:   return (
215:     <SafeArea>
216:       <Container>
217:         <Header>
218:           <BackButton position="relative" />
219:           <HeaderTitle>Edit Restaurant</HeaderTitle>
220:           <SaveButton onPress={handleSave}>
221:             <SaveButtonText>Save</SaveButtonText>
222:           </SaveButton>
223:         </Header>
224:         {}
225:         <Section>
226:           <SectionTitle>BASIC INFORMATION</SectionTitle>
227:           <FormGroup>
228:             <Label>Restaurant Name</Label>
229:             <Input
230:               value={restaurant.name}
231:               onChangeText={(text) => updateTextValue("name", text)}
232:               placeholder="Enter restaurant name"
233:             />
234:           </FormGroup>
235:           <FormGroup>
236:             <Label>Description</Label>
237:             <TextArea
238:               value={restaurant.description}
239:               onChangeText={(text) => updateTextValue("description", text)}
240:               placeholder="Enter restaurant description"
241:               multiline={true}
242:               numberOfLines={4}
243:             />
244:           </FormGroup>
245:           <FormGroup>
246:             <Label>Cuisine Types</Label>
247:             <CuisineTagsContainer>
248:               {restaurant.cuisine.map((cuisine, index) => (
249:                 <CuisineTag key={index}>
250:                   <CustomText>{cuisine}</CustomText>
251:                   <TouchableOpacity
252:                     onPress={() => handleRemoveCuisine(index)}
253:                     style={{ marginLeft: 5 }}
254:                   >
255:                     <MaterialIcons name="close" size={16} color="#757575" />
256:                   </TouchableOpacity>
257:                 </CuisineTag>
258:               ))}
259:             </CuisineTagsContainer>
260:             <View style={{ flexDirection: "row", alignItems: "center" }}>
261:               <Input
262:                 value={newCuisine}
263:                 onChangeText={setNewCuisine}
264:                 placeholder="Add new cuisine type"
265:                 style={{ flex: 1, marginRight: 10 }}
266:               />
267:               <AddCuisineButton onPress={handleAddCuisine}>
268:                 <MaterialIcons name="add" size={16} color="#262626" />
269:                 <CustomText>Add</CustomText>
270:               </AddCuisineButton>
271:             </View>
272:           </FormGroup>
273:         </Section>
274:         {}
275:         <Section>
276:           <SectionTitle>CONTACT & LOCATION</SectionTitle>
277:           <FormGroup>
278:             <Label>Street Address</Label>
279:             <Input
280:               value={restaurant.address.street}
281:               onChangeText={(text) =>
282:                 updateNestedValue("address", "street", text)
283:               }
284:               placeholder="Enter street address"
285:             />
286:           </FormGroup>
287:           <FormGroup>
288:             <Label>City</Label>
289:             <Input
290:               value={restaurant.address.city}
291:               onChangeText={(text) =>
292:                 updateNestedValue("address", "city", text)
293:               }
294:               placeholder="Enter city"
295:             />
296:           </FormGroup>
297:           <FormGroup>
298:             <Label>State/Province</Label>
299:             <Input
300:               value={restaurant.address.state}
301:               onChangeText={(text) =>
302:                 updateNestedValue("address", "state", text)
303:               }
304:               placeholder="Enter state/province"
305:             />
306:           </FormGroup>
307:           <FormGroup>
308:             <Label>Postal Code</Label>
309:             <Input
310:               value={restaurant.address.postalCode}
311:               onChangeText={(text) =>
312:                 updateNestedValue("address", "postalCode", text)
313:               }
314:               placeholder="Enter postal code"
315:             />
316:           </FormGroup>
317:           <FormGroup>
318:             <Label>Phone Number</Label>
319:             <Input
320:               value={restaurant.phoneNumber}
321:               onChangeText={(text) => updateTextValue("phoneNumber", text)}
322:               placeholder="Enter phone number"
323:               keyboardType="phone-pad"
324:             />
325:           </FormGroup>
326:           <FormGroup>
327:             <Label>Email</Label>
328:             <Input
329:               value={restaurant.email}
330:               onChangeText={(text) => updateTextValue("email", text)}
331:               placeholder="Enter email address"
332:               keyboardType="email-address"
333:               autoCapitalize="none"
334:             />
335:           </FormGroup>
336:           <FormGroup>
337:             <Label>Website</Label>
338:             <Input
339:               value={restaurant.website}
340:               onChangeText={(text) => updateTextValue("website", text)}
341:               placeholder="Enter website URL"
342:               keyboardType="url"
343:               autoCapitalize="none"
344:             />
345:           </FormGroup>
346:         </Section>
347:         {}
348:         <Section>
349:           <SectionTitle>PHOTOS</SectionTitle>
350:           <FormGroup>
351:             <Label>Restaurant Photos</Label>
352:             <PhotoContainer>
353:               {Array.isArray(restaurant.photos) &&
354:                 restaurant.photos.map((photo, index) => (
355:                   <PhotoItem key={index}>
356:                     <PhotoImage source={{ uri: photo }} />
357:                     <RemovePhotoButton onPress={() => handleRemovePhoto(index)}>
358:                       <MaterialIcons name="close" size={16} color="white" />
359:                     </RemovePhotoButton>
360:                   </PhotoItem>
361:                 ))}
362:               <AddPhotoButton onPress={handleAddPhoto}>
363:                 <MaterialIcons
364:                   name="add-photo-alternate"
365:                   size={24}
366:                   color="#757575"
367:                 />
368:               </AddPhotoButton>
369:             </PhotoContainer>
370:           </FormGroup>
371:         </Section>
372:         {}
373:         <Section>
374:           <SectionTitle>BUSINESS HOURS</SectionTitle>
375:           {daysOfWeek.map((day) => (
376:             <BusinessHoursRow key={day}>
377:               <DayLabel style={{ textTransform: "capitalize" }}>{day}</DayLabel>
378:               <TimeInput
379:                 value={restaurant.businessHours[day].open}
380:                 onChangeText={(text) => updateBusinessHours(day, "open", text)}
381:                 placeholder="09:00"
382:                 editable={!restaurant.businessHours[day].isClosed}
383:               />
384:               <CustomText>to</CustomText>
385:               <TimeInput
386:                 value={restaurant.businessHours[day].close}
387:                 onChangeText={(text) => updateBusinessHours(day, "close", text)}
388:                 placeholder="22:00"
389:                 editable={!restaurant.businessHours[day].isClosed}
390:               />
391:               <ClosedCheckbox onPress={() => toggleDayClosed(day)}>
392:                 <MaterialIcons
393:                   name={
394:                     restaurant.businessHours[day].isClosed
395:                       ? "check-box"
396:                       : "check-box-outline-blank"
397:                   }
398:                   size={24}
399:                   color="#262626"
400:                 />
401:                 <CustomText>Closed</CustomText>
402:               </ClosedCheckbox>
403:             </BusinessHoursRow>
404:           ))}
405:           <FormGroup style={{ marginTop: 10 }}>
406:             <FeatureRow>
407:               <FeatureSwitch
408:                 value={restaurant.isClosedTemporarily}
409:                 onValueChange={() =>
410:                   updateTextValue(
411:                     "isClosedTemporarily",
412:                     !restaurant.isClosedTemporarily
413:                   )
414:                 }
415:               />
416:               <Label>Temporarily Closed</Label>
417:             </FeatureRow>
418:           </FormGroup>
419:         </Section>
420:         {}
421:         <Section>
422:           <SectionTitle>FEATURES & AMENITIES</SectionTitle>
423:           <FormGroup>
424:             <FeatureRow>
425:               <FeatureSwitch
426:                 value={restaurant.features.hasWifi}
427:                 onValueChange={() => toggleFeature("hasWifi")}
428:               />
429:               <Label>Wi-Fi Available</Label>
430:             </FeatureRow>
431:             <FeatureRow>
432:               <FeatureSwitch
433:                 value={restaurant.features.hasParking}
434:                 onValueChange={() => toggleFeature("hasParking")}
435:               />
436:               <Label>Parking Available</Label>
437:             </FeatureRow>
438:             <FeatureRow>
439:               <FeatureSwitch
440:                 value={restaurant.features.isWheelchairAccessible}
441:                 onValueChange={() => toggleFeature("isWheelchairAccessible")}
442:               />
443:               <Label>Wheelchair Accessible</Label>
444:             </FeatureRow>
445:             <FeatureRow>
446:               <FeatureSwitch
447:                 value={restaurant.features.allowsPets}
448:                 onValueChange={() => toggleFeature("allowsPets")}
449:               />
450:               <Label>Pet Friendly</Label>
451:             </FeatureRow>
452:             <FeatureRow>
453:               <FeatureSwitch
454:                 value={restaurant.features.hasOutdoorSeating}
455:                 onValueChange={() => toggleFeature("hasOutdoorSeating")}
456:               />
457:               <Label>Outdoor Seating</Label>
458:             </FeatureRow>
459:             <FeatureRow>
460:               <FeatureSwitch
461:                 value={restaurant.features.hasTakeout}
462:                 onValueChange={() => toggleFeature("hasTakeout")}
463:               />
464:               <Label>Takeout Available</Label>
465:             </FeatureRow>
466:             <FeatureRow>
467:               <FeatureSwitch
468:                 value={restaurant.features.hasDelivery}
469:                 onValueChange={() => toggleFeature("hasDelivery")}
470:               />
471:               <Label>Delivery Available</Label>
472:             </FeatureRow>
473:             <FeatureRow>
474:               <FeatureSwitch
475:                 value={restaurant.features.acceptsReservations}
476:                 onValueChange={() => toggleFeature("acceptsReservations")}
477:               />
478:               <Label>Accepts Reservations</Label>
479:             </FeatureRow>
480:           </FormGroup>
481:         </Section>
482:         {}
483:         <Section>
484:           <SectionTitle>SOCIAL MEDIA</SectionTitle>
485:           <FormGroup>
486:             <Label>Instagram</Label>
487:             <Input
488:               value={restaurant.socialMedia.instagram}
489:               onChangeText={(text) =>
490:                 updateNestedValue("socialMedia", "instagram", text)
491:               }
492:               placeholder="Instagram URL"
493:               autoCapitalize="none"
494:             />
495:           </FormGroup>
496:           <FormGroup>
497:             <Label>Facebook</Label>
498:             <Input
499:               value={restaurant.socialMedia.facebook}
500:               onChangeText={(text) =>
501:                 updateNestedValue("socialMedia", "facebook", text)
502:               }
503:               placeholder="Facebook URL"
504:               autoCapitalize="none"
505:             />
506:           </FormGroup>
507:           <FormGroup>
508:             <Label>Twitter</Label>
509:             <Input
510:               value={restaurant.socialMedia.twitter}
511:               onChangeText={(text) =>
512:                 updateNestedValue("socialMedia", "twitter", text)
513:               }
514:               placeholder="Twitter URL"
515:               autoCapitalize="none"
516:             />
517:           </FormGroup>
518:           <FormGroup>
519:             <Label>Yelp</Label>
520:             <Input
521:               value={restaurant.socialMedia.yelp}
522:               onChangeText={(text) =>
523:                 updateNestedValue("socialMedia", "yelp", text)
524:               }
525:               placeholder="Yelp URL"
526:               autoCapitalize="none"
527:             />
528:           </FormGroup>
529:         </Section>
530:         {}
531:         <Section>
532:           <SectionTitle>RESERVATION SETTINGS</SectionTitle>
533:           <FormGroup>
534:             <Label>Time Slot Duration (minutes)</Label>
535:             <Input
536:               value={restaurant.settings.reservationTimeSlotDuration.toString()}
537:               onChangeText={(text) => {
538:                 const value = parseInt(text) || 0;
539:                 updateNestedValue(
540:                   "settings",
541:                   "reservationTimeSlotDuration",
542:                   value
543:                 );
544:               }}
545:               placeholder="30"
546:               keyboardType="number-pad"
547:             />
548:           </FormGroup>
549:           <FormGroup>
550:             <Label>Maximum Party Size</Label>
551:             <Input
552:               value={restaurant.settings.maxReservationSize.toString()}
553:               onChangeText={(text) => {
554:                 const value = parseInt(text) || 0;
555:                 updateNestedValue("settings", "maxReservationSize", value);
556:               }}
557:               placeholder="20"
558:               keyboardType="number-pad"
559:             />
560:           </FormGroup>
561:           <FormGroup>
562:             <Label>Minimum Advance Notice (hours)</Label>
563:             <Input
564:               value={restaurant.settings.reservationLeadTime.toString()}
565:               onChangeText={(text) => {
566:                 const value = parseInt(text) || 0;
567:                 updateNestedValue("settings", "reservationLeadTime", value);
568:               }}
569:               placeholder="1"
570:               keyboardType="number-pad"
571:             />
572:           </FormGroup>
573:           <FormGroup>
574:             <FeatureRow>
575:               <FeatureSwitch
576:                 value={restaurant.settings.automaticConfirmation}
577:                 onValueChange={() =>
578:                   updateNestedValue(
579:                     "settings",
580:                     "automaticConfirmation",
581:                     !restaurant.settings.automaticConfirmation
582:                   )
583:                 }
584:               />
585:               <Label>Automatic Reservation Confirmation</Label>
586:             </FeatureRow>
587:           </FormGroup>
588:         </Section>
589:       </Container>
590:     </SafeArea>
591:   );
592: };

================
File: src/features/merchant/settings/screens/RestaurantEditScreen.styles.js
================
  1: import styled from "styled-components/native";
  2: import { CustomText } from "../../../../components/CustomText/CustomText";
  3: export const Container = styled.ScrollView`
  4:   background-color: ${(props) => props.theme.colors.bg.primary};
  5:   flex: 1;
  6:   margin: ${(props) => props.theme.space[1]};
  7: `;
  8: export const Header = styled.View`
  9:   flex-direction: row;
 10:   align-items: center;
 11:   justify-content: space-between;
 12:   padding: ${(props) => props.theme.space[3]};
 13: `;
 14: export const HeaderTitle = styled(CustomText)`
 15:   font-size: ${(props) => props.theme.fontSizes.title};
 16:   font-weight: ${(props) => props.theme.fontWeights.bold};
 17: `;
 18: export const SaveButton = styled.TouchableOpacity`
 19:   background-color: ${(props) => props.theme.colors.ui.primary};
 20:   padding-vertical: ${(props) => props.theme.space[2]};
 21:   padding-horizontal: ${(props) => props.theme.space[3]};
 22:   border-radius: 5px;
 23: `;
 24: export const SaveButtonText = styled(CustomText)`
 25:   color: ${(props) => props.theme.colors.bg.primary};
 26: `;
 27: export const Section = styled.View`
 28:   margin-bottom: ${(props) => props.theme.space[4]};
 29: `;
 30: export const SectionTitle = styled(CustomText)`
 31:   font-size: ${(props) => props.theme.fontSizes.body};
 32:   font-weight: ${(props) => props.theme.fontWeights.bold};
 33:   margin-bottom: ${(props) => props.theme.space[3]};
 34:   padding-horizontal: ${(props) => props.theme.space[3]};
 35: `;
 36: export const FormGroup = styled.View`
 37:   margin-bottom: ${(props) => props.theme.space[3]};
 38:   padding-horizontal: ${(props) => props.theme.space[3]};
 39: `;
 40: export const Label = styled(CustomText)`
 41:   font-size: ${(props) => props.theme.fontSizes.body};
 42:   margin-bottom: ${(props) => props.theme.space[1]};
 43: `;
 44: export const Input = styled.TextInput`
 45:   background-color: ${(props) => props.theme.colors.bg.secondary};
 46:   padding: ${(props) => props.theme.space[2]};
 47:   border-radius: 5px;
 48:   font-size: ${(props) => props.theme.fontSizes.body};
 49: `;
 50: export const TextArea = styled(Input)`
 51:   min-height: 100px;
 52:   text-align-vertical: top;
 53: `;
 54: export const PhotoContainer = styled.View`
 55:   flex-direction: row;
 56:   flex-wrap: wrap;
 57:   padding: ${(props) => props.theme.space[2]};
 58: `;
 59: export const PhotoItem = styled.View`
 60:   width: 100px;
 61:   height: 100px;
 62:   margin: ${(props) => props.theme.space[1]};
 63:   border-radius: 5px;
 64:   overflow: hidden;
 65:   position: relative;
 66: `;
 67: export const PhotoImage = styled.Image`
 68:   width: 100%;
 69:   height: 100%;
 70: `;
 71: export const AddPhotoButton = styled.TouchableOpacity`
 72:   width: 100px;
 73:   height: 100px;
 74:   background-color: ${(props) => props.theme.colors.bg.secondary};
 75:   justify-content: center;
 76:   align-items: center;
 77:   margin: ${(props) => props.theme.space[1]};
 78:   border-radius: 5px;
 79:   border: 1px dashed ${(props) => props.theme.colors.ui.secondary};
 80: `;
 81: export const RemovePhotoButton = styled.TouchableOpacity`
 82:   position: absolute;
 83:   top: 5px;
 84:   right: 5px;
 85:   background-color: rgba(0, 0, 0, 0.5);
 86:   width: 24px;
 87:   height: 24px;
 88:   border-radius: 12px;
 89:   justify-content: center;
 90:   align-items: center;
 91: `;
 92: export const FeatureRow = styled.View`
 93:   flex-direction: row;
 94:   align-items: center;
 95:   margin-bottom: ${(props) => props.theme.space[2]};
 96: `;
 97: export const FeatureSwitch = styled.Switch`
 98:   margin-right: ${(props) => props.theme.space[2]};
 99: `;
100: export const BusinessHoursRow = styled.View`
101:   flex-direction: row;
102:   justify-content: space-between;
103:   align-items: center;
104:   margin-left: ${(props) => props.theme.space[3]};
105:   margin-right: ${(props) => props.theme.space[3]};
106: `;
107: export const DayLabel = styled(CustomText)`
108:   width: 100px;
109: `;
110: export const TimeInput = styled.TextInput`
111:   background-color: ${(props) => props.theme.colors.bg.secondary};
112:   padding: ${(props) => props.theme.space[1]};
113:   border-radius: 5px;
114:   width: 80px;
115:   font-size: ${(props) => props.theme.fontSizes.body};
116:   text-align: center;
117: `;
118: export const ClosedCheckbox = styled.TouchableOpacity`
119:   flex-direction: row;
120:   align-items: center;
121: `;
122: export const CuisineTag = styled.TouchableOpacity`
123:   background-color: ${(props) => props.theme.colors.ui.tertiary};
124:   padding-vertical: ${(props) => props.theme.space[1]};
125:   padding-horizontal: ${(props) => props.theme.space[2]};
126:   border-radius: 20px;
127:   margin-right: ${(props) => props.theme.space[1]};
128:   margin-bottom: ${(props) => props.theme.space[1]};
129:   flex-direction: row;
130:   align-items: center;
131: `;
132: export const CuisineTagsContainer = styled.View`
133:   flex-direction: row;
134:   flex-wrap: wrap;
135:   margin-bottom: ${(props) => props.theme.space[2]};
136: `;
137: export const AddCuisineButton = styled.TouchableOpacity`
138:   flex-direction: row;
139:   align-items: center;
140:   background-color: ${(props) => props.theme.colors.ui.tertiary};
141:   padding-vertical: ${(props) => props.theme.space[1]};
142:   padding-horizontal: ${(props) => props.theme.space[2]};
143:   border-radius: 20px;
144:   margin-bottom: ${(props) => props.theme.space[1]};
145: `;

================
File: src/infrastructure/navigation/AppNavigator.js
================
 1: import React from "react";
 2: import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
 3: import { createStackNavigator } from "@react-navigation/stack";
 4: import { Ionicons } from "@expo/vector-icons";
 5: import { useAuthentication } from "../../services/AuthenticationContext";
 6: import { globalScreenOptions } from "../options/GlobalScreenOptions";
 7: import { RestaurantsNavigator } from "./RestaurantsNavigator";
 8: import { CheckoutNavigator } from "./CheckoutNavigator";
 9: import { ReservationsNavigator } from "./ReservationsNavigator";
10: import { MerchantNavigator } from "./MerchantNavigator";
11: import { SettingsNavigator } from "./SettingsNavigator";
12: import { RestaurantDetailScreen } from "../../features/customer/restaurants/screens/RestaurantDetailScreen";
13: import { AccountSettingsScreen } from "../../features/customer/settings/screens/AccountSettingsScreen";
14: const TAB_ICON = {
15:   Restaurants: "restaurant",
16:   Checkout: "cart",
17:   Reservations: "book",
18:   Settings: "settings",
19: };
20: const Tab = createBottomTabNavigator();
21: const Stack = createStackNavigator();
22: const createTabScreenOptions = ({ route }) => {
23:   const iconName = TAB_ICON[route.name];
24:   return {
25:     tabBarIcon: ({ size, color }) => (
26:       <Ionicons name={iconName} size={size} color={color} />
27:     ),
28:   };
29: };
30: const HomeTabs = () => (
31:   <Tab.Navigator screenOptions={createTabScreenOptions}>
32:     <Tab.Screen
33:       name="Restaurants"
34:       component={RestaurantsNavigator}
35:       options={{ headerShown: false }}
36:     />
37:     <Tab.Screen
38:       name="Checkout"
39:       component={CheckoutNavigator}
40:       options={{ headerShown: false }}
41:     />
42:     <Tab.Screen
43:       name="Reservations"
44:       component={ReservationsNavigator}
45:       options={{ header: () => null }}
46:     />
47:     <Tab.Screen
48:       name="Settings"
49:       component={SettingsNavigator}
50:       options={{ headerShown: false }}
51:     />
52:   </Tab.Navigator>
53: );
54: export const AppNavigator = () => {
55:   const { user } = useAuthentication();
56:   const role = user?.role;
57:   return (
58:     <Stack.Navigator
59:       screenOptions={{
60:         headerShown: false,
61:       }}
62:     >
63:       {role === "customer" ? (
64:         <>
65:           <Stack.Screen name="Home" component={HomeTabs} />
66:           <Stack.Screen
67:             name="RestaurantDetailScreen"
68:             component={RestaurantDetailScreen}
69:             options={({ route }) => ({
70:               ...globalScreenOptions.restaurantDetail,
71:               presentation:
72:                 route.params?.presentationStyle === "modal" ? "modal" : "card",
73:             })}
74:           />
75:           <Stack.Screen
76:             name="AccountSettings"
77:             component={AccountSettingsScreen}
78:             options={globalScreenOptions.common}
79:           />
80:         </>
81:       ) : (
82:         <>
83:           <Stack.Screen name="Merchant" component={MerchantNavigator} />
84:         </>
85:       )}
86:     </Stack.Navigator>
87:   );
88: };

================
File: src/infrastructure/navigation/AuthNavigator.js
================
 1: import React from "react";
 2: import { createStackNavigator } from "@react-navigation/stack";
 3: import { LoginScreen } from "../../features/auth/screens/LoginScreen";
 4: import { globalScreenOptions } from "../options/GlobalScreenOptions";
 5: const Stack = createStackNavigator();
 6: export const AuthNavigator = () => {
 7:   return (
 8:     <Stack.Navigator screenOptions={globalScreenOptions.nonHeader}>
 9:       <Stack.Screen name="Login" component={LoginScreen} />
10:       {}
11:     </Stack.Navigator>
12:   );
13: };

================
File: src/infrastructure/navigation/CheckoutNavigator.js
================
 1: import React from "react";
 2: import {
 3:   ScrollView,
 4:   TextInput,
 5:   Text,
 6:   TouchableOpacity,
 7:   View,
 8:   StyleSheet,
 9: } from "react-native";
10: import * as FileSystem from "expo-file-system";
11: import { createStackNavigator } from "@react-navigation/stack";
12: const CheckoutStack = createStackNavigator();
13: export const CheckoutNavigator = () => {
14:   return (
15:     <View style={{ flex: 1 }}>
16:       <Text>Checkout Navigator</Text>
17:     </View>
18:   );
19: };

================
File: src/infrastructure/navigation/index.js
================
 1: import React from "react";
 2: import { NavigationContainer } from "@react-navigation/native";
 3: import { AppNavigator } from "./AppNavigator";
 4: import { AuthNavigator } from "./AuthNavigator";
 5: import { GlobalWrapper } from "../../components/GlobalWrapper/GlobalWrapper";
 6: import { useAuthentication } from "../../services/AuthenticationContext";
 7: export const Navigation = () => {
 8:   const { isAuthenticated } = useAuthentication();
 9:   return (
10:     <GlobalWrapper>
11:       <NavigationContainer>
12:         {isAuthenticated ? <AppNavigator /> : <AuthNavigator />}
13:       </NavigationContainer>
14:     </GlobalWrapper>
15:   );
16: };

================
File: src/infrastructure/navigation/MerchantNavigator.js
================
 1: import React from "react";
 2: import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
 3: import { createStackNavigator } from "@react-navigation/stack";
 4: import { Ionicons } from "@expo/vector-icons";
 5: import { useTheme } from "styled-components/native";
 6: import { MerchantHomeScreen } from "../../features/merchant/dashboard/screens/MerchantHomeScreen";
 7: import { MerchantSettingsScreen } from "../../features/merchant/settings/screens/MerchantSettingsScreen";
 8: import { MerchantReservationsScreen } from "../../features/merchant/reservations/screens/MerchantReservationsScreen";
 9: import { RestaurantEditScreen } from "../../features/merchant/settings/screens/RestaurantEditScreen";
10: import { RestaurantDetailScreen } from "../../features/customer/restaurants/screens/RestaurantDetailScreen";
11: import { MerchantProfileScreen } from "../../features/merchant/settings/screens/MerchantProfileScreen";
12: const Tab = createBottomTabNavigator();
13: const Stack = createStackNavigator();
14: const SettingsStack = () => {
15:   return (
16:     <Stack.Navigator screenOptions={{ headerShown: false }}>
17:       <Stack.Screen name="SettingsMain" component={MerchantSettingsScreen} />
18:       <Stack.Screen name="MerchantProfile" component={MerchantProfileScreen} />
19:       <Stack.Screen
20:         name="RestaurantDetail"
21:         component={RestaurantDetailScreen}
22:         initialParams={{ isMerchantView: true }}
23:       />
24:       <Stack.Screen name="RestaurantEdit" component={RestaurantEditScreen} />
25:     </Stack.Navigator>
26:   );
27: };
28: export const MerchantNavigator = () => {
29:   const theme = useTheme();
30:   return (
31:     <Tab.Navigator
32:       screenOptions={({ route }) => ({
33:         headerShown: false,
34:         tabBarIcon: ({ color, size }) => {
35:           let iconName;
36:           if (route.name === "Home") {
37:             iconName = "home";
38:           } else if (route.name === "Settings") {
39:             iconName = "settings";
40:           } else if (route.name === "Reservations") {
41:             iconName = "calendar";
42:           }
43:           return <Ionicons name={iconName} size={size} color={color} />;
44:         },
45:         tabBarActiveTintColor: theme.colors.text.primary,
46:         tabBarInactiveTintColor: theme.colors.text.secondary,
47:         tabBarStyle: {
48:           backgroundColor: theme.colors.bg.primary,
49:         },
50:       })}
51:     >
52:       <Tab.Screen name="Home" component={MerchantHomeScreen} />
53:       <Tab.Screen name="Reservations" component={MerchantReservationsScreen} />
54:       <Tab.Screen name="Settings" component={SettingsStack} />
55:     </Tab.Navigator>
56:   );
57: };

================
File: src/infrastructure/navigation/ReservationsNavigator.js
================
 1: import React from "react";
 2: import { createStackNavigator } from "@react-navigation/stack";
 3: import { useTheme } from "styled-components/native";
 4: import { ReservationsScreen } from "../../features/customer/reservations/screens/ReservationsScreen";
 5: const ReservationStack = createStackNavigator();
 6: export const ReservationsNavigator = () => {
 7:   const theme = useTheme();
 8:   const getNumericValue = (value) => parseInt(value.replace("px", ""), 10);
 9:   return (
10:     <ReservationStack.Navigator
11:       screenOptions={{
12:         headerShown: true,
13:         headerTitleAlign: "left",
14:         headerTintColor: theme.colors.text.primary,
15:         headerStyle: {
16:           backgroundColor: theme.colors.bg.primary,
17:           shadowColor: "transparent",
18:           elevation: 0,
19:         },
20:         headerTitleStyle: {
21:           fontSize: getNumericValue(theme.fontSizes.h4),
22:           fontFamily: theme.fonts.heading,
23:           fontWeight: theme.fontWeights.regular,
24:           lineHeight: getNumericValue(theme.fontSizes.h2),
25:           paddingLeft: getNumericValue(theme.space[2]),
26:         },
27:       }}
28:     >
29:       <ReservationStack.Screen
30:         name="ReservationsScreen"
31:         component={ReservationsScreen}
32:         options={{
33:           headerTitle: "Reservations",
34:         }}
35:       />
36:     </ReservationStack.Navigator>
37:   );
38: };

================
File: src/infrastructure/navigation/RestaurantsNavigator.js
================
 1: import React from "react";
 2: import { ScrollView, TextInput, Text, TouchableOpacity } from "react-native";
 3: import {
 4:   createStackNavigator,
 5:   TransitionPresets,
 6: } from "@react-navigation/stack";
 7: import { RestaurantsScreen } from "../../features/customer/restaurants/screens/RestaurantsScreen";
 8: import { RestaurantDetailScreen } from "../../features/customer/restaurants/screens/RestaurantDetailScreen";
 9: const RestaurantStack = createStackNavigator();
10: export const RestaurantsNavigator = () => {
11:   return (
12:     <RestaurantStack.Navigator
13:       screenOptions={{
14:         headerShown: false,
15:         ...TransitionPresets.ModalPresentationIOS,
16:       }}
17:     >
18:       <RestaurantStack.Screen
19:         name="RestaurantsScreen"
20:         component={RestaurantsScreen}
21:         options={{ headerShown: false }}
22:       />
23:     </RestaurantStack.Navigator>
24:   );
25: };

================
File: src/infrastructure/navigation/SettingsNavigator.js
================
 1: import React from "react";
 2: import {
 3:   createStackNavigator,
 4:   CardStyleInterpolators,
 5: } from "@react-navigation/stack";
 6: import { SettingsScreen } from "../../features/customer/settings/screens/SettingsScreen";
 7: const SettingsStack = createStackNavigator();
 8: export const SettingsNavigator = () => {
 9:   return (
10:     <SettingsStack.Navigator
11:       screenOptions={{
12:         headerShown: false,
13:         cardStyleInterpolator: CardStyleInterpolators.forHorizontalIOS,
14:       }}
15:     >
16:       <SettingsStack.Screen name="SettingsScreen" component={SettingsScreen} />
17:     </SettingsStack.Navigator>
18:   );
19: };

================
File: src/infrastructure/options/GlobalScreenOptions.js
================
 1: import { Platform } from "react-native";
 2: import { colors } from "../../infrastructure/theme/colors";
 3: import { TransitionPresets } from "@react-navigation/stack";
 4: const commonHeaderOptions = {
 5:   headerStyle: {
 6:     height: Platform.select({ ios: 56, android: 66 }),
 7:     backgroundColor: colors.bg.primary,
 8:   },
 9:   headerTitleStyle: {
10:     fontWeight: "bold",
11:     fontSize: 20,
12:     color: colors.text.primary,
13:     textAlign: "center",
14:   },
15:   headerBackTitleVisible: false,
16:   headerTitleAlign: "center",
17:   headerLeftContainerStyle: {
18:     marginTop: Platform.select({ ios: -45, android: -41 }),
19:   },
20:   headerTitleContainerStyle: {
21:     marginTop: Platform.select({ ios: -50, android: -45 }),
22:   },
23: };
24: export const globalScreenOptions = {
25:   common: commonHeaderOptions,
26:   nonHeader: {
27:     ...commonHeaderOptions,
28:     headerShown: false,
29:   },
30:   restaurantDetail: {
31:     headerShown: false,
32:   },
33: };

================
File: src/infrastructure/theme/colors.js
================
 1: export const colors = {
 2:   brand: {
 3:     primary: "#FFFFFF",
 4:     secondary: "#757575",
 5:     muted: "#C6DAF7",
 6:   },
 7:   ui: {
 8:     primary: "#262626",
 9:     secondary: "#757575",
10:     tertiary: "#F1F1F1",
11:     quaternary: "#FFFFFF",
12:     disabled: "#DEDEDE",
13:     error: "#D0421B",
14:     success: "#138000",
15:   },
16:   bg: {
17:     primary: "#FFFFFF",
18:     secondary: "#F1F1F1",
19:   },
20:   text: {
21:     primary: "#262626",
22:     secondary: "#757575",
23:     disabled: "#9C9C9C",
24:     inverse: "#FFFFFF",
25:     error: "#D0421B",
26:     success: "#138000",
27:   },
28: };

================
File: src/infrastructure/theme/fonts.js
================
 1: export const fonts = {
 2:   body: "Oswald_400Regular",
 3:   heading: "Lato_400Regular",
 4:   monospace: "Oswald_400Regular",
 5: };
 6: export const fontWeights = {
 7:   regular: 400,
 8:   medium: 500,
 9:   bold: 700,
10: };
11: export const fontSizes = {
12:   caption: "12px",
13:   button: "14px",
14:   body: "16px",
15:   title: "20px",
16:   h5: "24px",
17:   h4: "34px",
18:   h3: "45px",
19:   h2: "56px",
20:   h1: "112px",
21: };

================
File: src/infrastructure/theme/index.js
================
 1: import { colors } from './colors';
 2: import { sizes } from './sizes';
 3: import { space, lineHeights } from './spacing';
 4: import { fonts, fontWeights, fontSizes } from './fonts';
 5: export const theme = {
 6:   colors,
 7:   sizes,
 8:   space,
 9:   lineHeights,
10:   fonts,
11:   fontSizes,
12:   fontWeights,
13: };

================
File: src/infrastructure/theme/sizes.js
================
1: export const sizes = ['8px', '16px', '32px', '64px', '128px'];

================
File: src/infrastructure/theme/spacing.js
================
1: export const lineHeights = {
2:     title: '28px',
3:     copy: '20px',
4:   };
5:   export const space = ['0px', '4px', '8px', '16px', '32px', '64px'];

================
File: src/services/i18n/locales/en/en.js
================
  1: export default {
  2:   common: {
  3:     languages: {
  4:       en: "English",
  5:       ja: "Japanese",
  6:       zh: "Chinese",
  7:     },
  8:     actions: {
  9:       save: "Save",
 10:       cancel: "Cancel",
 11:       confirm: "Confirm",
 12:       delete: "Delete",
 13:       edit: "Edit",
 14:       view: "View",
 15:       back: "Back",
 16:       next: "Next",
 17:       submit: "Submit",
 18:     },
 19:     status: {
 20:       loading: "Loading...",
 21:       success: "Success",
 22:       error: "Error",
 23:       pending: "Pending",
 24:       completed: "Completed",
 25:       confirmed: "Confirmed",
 26:       cancelled: "Cancelled",
 27:     },
 28:     validation: {
 29:       required: "This field is required",
 30:       invalidEmail: "Please enter a valid email address",
 31:       invalidPhone: "Please enter a valid phone number",
 32:       minLength: "Must be at least {{count}} characters",
 33:       maxLength: "Must be at most {{count}} characters",
 34:       passwordMatch: "Passwords do not match",
 35:       invalidInput: "Invalid input",
 36:     },
 37:   },
 38:   auth: {
 39:     login: {
 40:       title: "Login",
 41:       phoneNumber: "Phone number",
 42:       password: "Password",
 43:       loginButton: "Login",
 44:       loggingIn: "Logging in...",
 45:       noAccount: "Don't have an account? Sign Up",
 46:       customer: "Customer",
 47:       merchant: "Merchant",
 48:       forgotPassword: "Forgot Password?",
 49:     },
 50:     signup: {
 51:       title: "Sign Up",
 52:       name: "Full Name",
 53:       email: "Email Address",
 54:       phoneNumber: "Phone Number",
 55:       password: "Password",
 56:       confirmPassword: "Confirm Password",
 57:       signupButton: "Sign Up",
 58:       haveAccount: "Already have an account? Login",
 59:     },
 60:     validation: {
 61:       phoneRequired: "Phone number is required",
 62:       phoneDigitsOnly: "Phone number must contain only digits",
 63:       passwordRequired: "Password is required",
 64:       passwordMinLength: "Password must be at least 6 characters",
 65:       nameRequired: "Name is required",
 66:       emailRequired: "Email is required",
 67:     },
 68:     errors: {
 69:       invalidCredentials: "Invalid credentials",
 70:       networkError: "Network error, please try again",
 71:       unknownError: "An unknown error occurred",
 72:     },
 73:   },
 74:   restaurant: {
 75:     list: {
 76:       title: "Restaurants",
 77:       search: "Search restaurants...",
 78:       filter: "Filter",
 79:       sort: "Sort",
 80:       noResults: "No restaurants found",
 81:       open: "Open Now",
 82:       closed: "Closed",
 83:     },
 84:     detail: {
 85:       menu: "Menu",
 86:       reviews: "Reviews",
 87:       info: "Information",
 88:       photos: "Photos",
 89:       address: "Address",
 90:       hours: "Opening Hours",
 91:       phone: "Phone",
 92:       website: "Website",
 93:       reserve: "Make Reservation",
 94:       directions: "Get Directions",
 95:     },
 96:     filters: {
 97:       price: "Price",
 98:       cuisine: "Cuisine",
 99:       distance: "Distance",
100:       rating: "Rating",
101:       openNow: "Open Now",
102:     },
103:     menu: {
104:       starters: "Starters",
105:       mainCourse: "Main Course",
106:       desserts: "Desserts",
107:       drinks: "Drinks",
108:       specials: "Specials",
109:       popular: "Popular Items",
110:     },
111:     reviews: {
112:       write: "Write a Review",
113:       rating: "Rating",
114:       comment: "Comment",
115:       submit: "Submit Review",
116:       helpful: "Helpful",
117:       report: "Report",
118:     },
119:   },
120:   reservations: {
121:     new: {
122:       title: "New Reservation",
123:       date: "Date",
124:       time: "Time",
125:       party: "Party Size",
126:       notes: "Special Requests",
127:       confirm: "Confirm Reservation",
128:       termsAgree: "I agree to the booking terms and conditions",
129:     },
130:     list: {
131:       title: "My Reservations",
132:       upcoming: "Upcoming",
133:       past: "Past",
134:       cancelled: "Cancelled",
135:       noUpcoming: "No upcoming reservations",
136:       noPast: "No past reservations",
137:     },
138:     details: {
139:       title: "Reservation Details",
140:       restaurant: "Restaurant",
141:       date: "Date",
142:       time: "Time",
143:       party: "Party Size",
144:       status: "Status",
145:       notes: "Special Requests",
146:       cancel: "Cancel Reservation",
147:       modify: "Modify Reservation",
148:       directions: "Get Directions",
149:       contact: "Contact Restaurant",
150:     },
151:     status: {
152:       confirmed: "Confirmed",
153:       pending: "Pending",
154:       cancelled: "Cancelled",
155:       completed: "Completed",
156:       noShow: "No Show",
157:     },
158:     cancel: {
159:       title: "Cancel Reservation",
160:       confirm: "Are you sure you want to cancel this reservation?",
161:       reason: "Reason for cancellation",
162:       policy: "Cancellation Policy",
163:       submit: "Submit Cancellation",
164:     },
165:   },
166:   merchant: {
167:     dashboard: {
168:       title: "Dashboard",
169:       overview: "Overview",
170:       today: "Today",
171:       reservations: "Reservations",
172:       tables: "Tables",
173:       seating: "Seating View",
174:       revenue: "Revenue",
175:       customers: "Customers",
176:     },
177:     tables: {
178:       title: "Table Management",
179:       tableNumber: "Table Number",
180:       capacity: "Capacity",
181:       status: "Status",
182:       empty: "Empty",
183:       occupied: "Occupied",
184:       reserved: "Reserved",
185:       addTable: "Add Table",
186:       editTable: "Edit Table",
187:       deleteTable: "Delete Table",
188:     },
189:     reservations: {
190:       title: "Reservations",
191:       calendar: "Calendar View",
192:       list: "List View",
193:       grid: "Grid View",
194:       smart: "Smart View",
195:       mailbox: "Inbox",
196:       new: "New Reservation",
197:       noReservations: "No reservations found",
198:     },
199:     settings: {
200:       title: "Settings",
201:       profile: "Restaurant Profile",
202:       hours: "Business Hours",
203:       menu: "Menu Management",
204:       staff: "Staff Management",
205:       notifications: "Notifications",
206:       payment: "Payment Methods",
207:       seating: "Seating Layout",
208:       account: "Account Settings",
209:     },
210:   },
211:   settings: {
212:     title: "Settings",
213:     account: {
214:       title: "Account Settings",
215:       name: "Name",
216:       email: "Email",
217:       phone: "Phone Number",
218:       password: "Change Password",
219:       language: "Language",
220:       notifications: "Notifications",
221:       logout: "Logout",
222:     },
223:     appearance: {
224:       title: "Appearance",
225:       theme: "Theme",
226:       light: "Light",
227:       dark: "Dark",
228:       system: "System Default",
229:       fontSize: "Font Size",
230:     },
231:     notifications: {
232:       title: "Notifications",
233:       push: "Push Notifications",
234:       email: "Email Notifications",
235:       sms: "SMS Notifications",
236:       reservations: "Reservation Updates",
237:       promotions: "Promotions and Offers",
238:       system: "System Updates",
239:     },
240:     privacy: {
241:       title: "Privacy",
242:       dataUsage: "Data Usage",
243:       location: "Location Services",
244:       cookies: "Cookies",
245:       advertising: "Personalized Advertising",
246:     },
247:     help: {
248:       title: "Help & Support",
249:       faq: "FAQ",
250:       contact: "Contact Support",
251:       terms: "Terms of Service",
252:       privacy: "Privacy Policy",
253:       about: "About SeatMaster",
254:     },
255:   },
256: };

================
File: src/services/i18n/locales/ja/ja.js
================
  1: export default {
  2:   common: {
  3:     languages: {
  4:       en: "英語",
  5:       ja: "日本語",
  6:       zh: "中国語",
  7:     },
  8:     actions: {
  9:       save: "保存",
 10:       cancel: "キャンセル",
 11:       confirm: "確認",
 12:       delete: "削除",
 13:       edit: "編集",
 14:       view: "表示",
 15:       back: "戻る",
 16:       next: "次へ",
 17:       submit: "送信",
 18:     },
 19:     status: {
 20:       loading: "読み込み中...",
 21:       success: "成功",
 22:       error: "エラー",
 23:       pending: "保留中",
 24:       completed: "完了",
 25:       confirmed: "確認済み",
 26:       cancelled: "キャンセル済み",
 27:     },
 28:     validation: {
 29:       required: "このフィールドは必須です",
 30:       invalidEmail: "有効なメールアドレスを入力してください",
 31:       invalidPhone: "有効な電話番号を入力してください",
 32:       minLength: "{{count}}文字以上である必要があります",
 33:       maxLength: "{{count}}文字以下である必要があります",
 34:       passwordMatch: "パスワードが一致しません",
 35:       invalidInput: "無効な入力",
 36:     },
 37:   },
 38:   auth: {
 39:     login: {
 40:       title: "ログイン",
 41:       phoneNumber: "電話番号",
 42:       password: "パスワード",
 43:       loginButton: "ログイン",
 44:       loggingIn: "ログイン中...",
 45:       noAccount: "アカウントがありませんか？登録する",
 46:       customer: "お客様",
 47:       merchant: "店舗",
 48:       forgotPassword: "パスワードをお忘れですか？",
 49:     },
 50:     signup: {
 51:       title: "新規登録",
 52:       name: "氏名",
 53:       email: "メールアドレス",
 54:       phoneNumber: "電話番号",
 55:       password: "パスワード",
 56:       confirmPassword: "パスワード（確認）",
 57:       signupButton: "登録",
 58:       haveAccount: "すでにアカウントをお持ちですか？ログイン",
 59:     },
 60:     validation: {
 61:       phoneRequired: "電話番号が必要です",
 62:       phoneDigitsOnly: "電話番号は数字のみを含む必要があります",
 63:       passwordRequired: "パスワードが必要です",
 64:       passwordMinLength: "パスワードは6文字以上である必要があります",
 65:       nameRequired: "名前が必要です",
 66:       emailRequired: "メールアドレスが必要です",
 67:     },
 68:     errors: {
 69:       invalidCredentials: "無効な認証情報",
 70:       networkError: "ネットワークエラー、もう一度お試しください",
 71:       unknownError: "不明なエラーが発生しました",
 72:     },
 73:   },
 74:   restaurant: {
 75:     list: {
 76:       title: "レストラン",
 77:       search: "レストランを検索...",
 78:       filter: "フィルター",
 79:       sort: "並び替え",
 80:       noResults: "レストランが見つかりません",
 81:       open: "営業中",
 82:       closed: "閉店",
 83:     },
 84:     detail: {
 85:       menu: "メニュー",
 86:       reviews: "レビュー",
 87:       info: "情報",
 88:       photos: "写真",
 89:       address: "住所",
 90:       hours: "営業時間",
 91:       phone: "電話番号",
 92:       website: "ウェブサイト",
 93:       reserve: "予約する",
 94:       directions: "道順を見る",
 95:     },
 96:     filters: {
 97:       price: "価格",
 98:       cuisine: "料理ジャンル",
 99:       distance: "距離",
100:       rating: "評価",
101:       openNow: "営業中",
102:     },
103:     menu: {
104:       starters: "前菜",
105:       mainCourse: "メインコース",
106:       desserts: "デザート",
107:       drinks: "ドリンク",
108:       specials: "おすすめ",
109:       popular: "人気商品",
110:     },
111:     reviews: {
112:       write: "レビューを書く",
113:       rating: "評価",
114:       comment: "コメント",
115:       submit: "レビューを送信",
116:       helpful: "役に立った",
117:       report: "報告する",
118:     },
119:   },
120:   reservations: {
121:     new: {
122:       title: "新規予約",
123:       date: "日付",
124:       time: "時間",
125:       party: "人数",
126:       notes: "特別リクエスト",
127:       confirm: "予約を確定",
128:       termsAgree: "予約規約に同意します",
129:     },
130:     list: {
131:       title: "予約一覧",
132:       upcoming: "今後の予約",
133:       past: "過去の予約",
134:       cancelled: "キャンセル済み",
135:       noUpcoming: "今後の予約はありません",
136:       noPast: "過去の予約はありません",
137:     },
138:     details: {
139:       title: "予約詳細",
140:       restaurant: "レストラン",
141:       date: "日付",
142:       time: "時間",
143:       party: "人数",
144:       status: "ステータス",
145:       notes: "特別リクエスト",
146:       cancel: "予約をキャンセル",
147:       modify: "予約を変更",
148:       directions: "道順を見る",
149:       contact: "レストランに連絡",
150:     },
151:     status: {
152:       confirmed: "確認済み",
153:       pending: "保留中",
154:       cancelled: "キャンセル済み",
155:       completed: "完了",
156:       noShow: "無断キャンセル",
157:     },
158:     cancel: {
159:       title: "予約のキャンセル",
160:       confirm: "この予約をキャンセルしてもよろしいですか？",
161:       reason: "キャンセルの理由",
162:       policy: "キャンセルポリシー",
163:       submit: "キャンセルを送信",
164:     },
165:   },
166:   merchant: {
167:     dashboard: {
168:       title: "ダッシュボード",
169:       overview: "概要",
170:       today: "今日",
171:       reservations: "予約",
172:       tables: "テーブル",
173:       seating: "座席表示",
174:       revenue: "売上",
175:       customers: "顧客",
176:     },
177:     tables: {
178:       title: "テーブル管理",
179:       tableNumber: "テーブル番号",
180:       capacity: "収容人数",
181:       status: "状態",
182:       empty: "空席",
183:       occupied: "使用中",
184:       reserved: "予約済み",
185:       addTable: "テーブルを追加",
186:       editTable: "テーブルを編集",
187:       deleteTable: "テーブルを削除",
188:     },
189:     reservations: {
190:       title: "予約",
191:       calendar: "カレンダー表示",
192:       list: "リスト表示",
193:       grid: "グリッド表示",
194:       smart: "スマート表示",
195:       mailbox: "受信箱",
196:       new: "新規予約",
197:       noReservations: "予約が見つかりません",
198:     },
199:     settings: {
200:       title: "設定",
201:       profile: "レストランプロフィール",
202:       hours: "営業時間",
203:       menu: "メニュー管理",
204:       staff: "スタッフ管理",
205:       notifications: "通知",
206:       payment: "支払い方法",
207:       seating: "座席レイアウト",
208:       account: "アカウント設定",
209:     },
210:   },
211:   settings: {
212:     title: "設定",
213:     account: {
214:       title: "アカウント設定",
215:       name: "名前",
216:       email: "メール",
217:       phone: "電話番号",
218:       password: "パスワード変更",
219:       language: "言語",
220:       notifications: "通知",
221:       logout: "ログアウト",
222:     },
223:     appearance: {
224:       title: "外観",
225:       theme: "テーマ",
226:       light: "ライト",
227:       dark: "ダーク",
228:       system: "システムデフォルト",
229:       fontSize: "フォントサイズ",
230:     },
231:     notifications: {
232:       title: "通知",
233:       push: "プッシュ通知",
234:       email: "メール通知",
235:       sms: "SMS通知",
236:       reservations: "予約アップデート",
237:       promotions: "プロモーションとオファー",
238:       system: "システムアップデート",
239:     },
240:     privacy: {
241:       title: "プライバシー",
242:       dataUsage: "データ使用",
243:       location: "位置情報サービス",
244:       cookies: "クッキー",
245:       advertising: "パーソナライズド広告",
246:     },
247:     help: {
248:       title: "ヘルプ＆サポート",
249:       faq: "よくある質問",
250:       contact: "サポートに連絡",
251:       terms: "利用規約",
252:       privacy: "プライバシーポリシー",
253:       about: "SeatMasterについて",
254:     },
255:   },
256: };

================
File: src/services/i18n/locales/zh/zh.js
================
  1: export default {
  2:   common: {
  3:     languages: {
  4:       en: "英文",
  5:       ja: "日文",
  6:       zh: "中文",
  7:     },
  8:     actions: {
  9:       save: "保存",
 10:       cancel: "取消",
 11:       confirm: "确认",
 12:       delete: "删除",
 13:       edit: "编辑",
 14:       view: "查看",
 15:       back: "返回",
 16:       next: "下一步",
 17:       submit: "提交",
 18:     },
 19:     status: {
 20:       loading: "加载中...",
 21:       success: "成功",
 22:       error: "错误",
 23:       pending: "待处理",
 24:       completed: "已完成",
 25:       confirmed: "已确认",
 26:       cancelled: "已取消",
 27:     },
 28:     validation: {
 29:       required: "此字段为必填项",
 30:       invalidEmail: "请输入有效的电子邮件地址",
 31:       invalidPhone: "请输入有效的电话号码",
 32:       minLength: "必须至少有{{count}}个字符",
 33:       maxLength: "必须最多有{{count}}个字符",
 34:       passwordMatch: "密码不匹配",
 35:       invalidInput: "无效输入",
 36:     },
 37:   },
 38:   auth: {
 39:     login: {
 40:       title: "登录",
 41:       phoneNumber: "电话号码",
 42:       password: "密码",
 43:       loginButton: "登录",
 44:       loggingIn: "正在登录...",
 45:       noAccount: "没有账户？注册",
 46:       customer: "顾客",
 47:       merchant: "商家",
 48:       forgotPassword: "忘记密码？",
 49:     },
 50:     signup: {
 51:       title: "注册",
 52:       name: "姓名",
 53:       email: "电子邮件",
 54:       phoneNumber: "电话号码",
 55:       password: "密码",
 56:       confirmPassword: "确认密码",
 57:       signupButton: "注册",
 58:       haveAccount: "已有账户？登录",
 59:     },
 60:     validation: {
 61:       phoneRequired: "电话号码为必填项",
 62:       phoneDigitsOnly: "电话号码只能包含数字",
 63:       passwordRequired: "密码为必填项",
 64:       passwordMinLength: "密码必须至少6个字符",
 65:       nameRequired: "姓名为必填项",
 66:       emailRequired: "电子邮件为必填项",
 67:     },
 68:     errors: {
 69:       invalidCredentials: "无效的凭据",
 70:       networkError: "网络错误，请重试",
 71:       unknownError: "发生未知错误",
 72:     },
 73:   },
 74:   restaurant: {
 75:     list: {
 76:       title: "餐厅",
 77:       search: "搜索餐厅...",
 78:       filter: "筛选",
 79:       sort: "排序",
 80:       noResults: "未找到餐厅",
 81:       open: "营业中",
 82:       closed: "已关闭",
 83:     },
 84:     detail: {
 85:       menu: "菜单",
 86:       reviews: "评价",
 87:       info: "信息",
 88:       photos: "照片",
 89:       address: "地址",
 90:       hours: "营业时间",
 91:       phone: "电话",
 92:       website: "网站",
 93:       reserve: "预订",
 94:       directions: "获取路线",
 95:     },
 96:     filters: {
 97:       price: "价格",
 98:       cuisine: "菜系",
 99:       distance: "距离",
100:       rating: "评分",
101:       openNow: "营业中",
102:     },
103:     menu: {
104:       starters: "前菜",
105:       mainCourse: "主菜",
106:       desserts: "甜点",
107:       drinks: "饮品",
108:       specials: "特色菜",
109:       popular: "热门菜品",
110:     },
111:     reviews: {
112:       write: "写评价",
113:       rating: "评分",
114:       comment: "评论",
115:       submit: "提交评价",
116:       helpful: "有帮助",
117:       report: "举报",
118:     },
119:   },
120:   reservations: {
121:     new: {
122:       title: "新预订",
123:       date: "日期",
124:       time: "时间",
125:       party: "人数",
126:       notes: "特殊要求",
127:       confirm: "确认预订",
128:       termsAgree: "我同意预订条款和条件",
129:     },
130:     list: {
131:       title: "我的预订",
132:       upcoming: "即将到来",
133:       past: "过去的",
134:       cancelled: "已取消",
135:       noUpcoming: "没有即将到来的预订",
136:       noPast: "没有过去的预订",
137:     },
138:     details: {
139:       title: "预订详情",
140:       restaurant: "餐厅",
141:       date: "日期",
142:       time: "时间",
143:       party: "人数",
144:       status: "状态",
145:       notes: "特殊要求",
146:       cancel: "取消预订",
147:       modify: "修改预订",
148:       directions: "获取路线",
149:       contact: "联系餐厅",
150:     },
151:     status: {
152:       confirmed: "已确认",
153:       pending: "待确认",
154:       cancelled: "已取消",
155:       completed: "已完成",
156:       noShow: "未到场",
157:     },
158:     cancel: {
159:       title: "取消预订",
160:       confirm: "您确定要取消此预订吗？",
161:       reason: "取消原因",
162:       policy: "取消政策",
163:       submit: "提交取消",
164:     },
165:   },
166:   merchant: {
167:     dashboard: {
168:       title: "仪表板",
169:       overview: "概览",
170:       today: "今天",
171:       reservations: "预订",
172:       tables: "餐桌",
173:       seating: "座位视图",
174:       revenue: "收入",
175:       customers: "顾客",
176:     },
177:     tables: {
178:       title: "餐桌管理",
179:       tableNumber: "餐桌号",
180:       capacity: "容量",
181:       status: "状态",
182:       empty: "空闲",
183:       occupied: "已占用",
184:       reserved: "已预订",
185:       addTable: "添加餐桌",
186:       editTable: "编辑餐桌",
187:       deleteTable: "删除餐桌",
188:     },
189:     reservations: {
190:       title: "预订",
191:       calendar: "日历视图",
192:       list: "列表视图",
193:       grid: "网格视图",
194:       smart: "智能视图",
195:       mailbox: "收件箱",
196:       new: "新预订",
197:       noReservations: "未找到预订",
198:     },
199:     settings: {
200:       title: "设置",
201:       profile: "餐厅档案",
202:       hours: "营业时间",
203:       menu: "菜单管理",
204:       staff: "员工管理",
205:       notifications: "通知",
206:       payment: "支付方式",
207:       seating: "座位布局",
208:       account: "账户设置",
209:     },
210:   },
211:   settings: {
212:     title: "设置",
213:     account: {
214:       title: "账户设置",
215:       name: "姓名",
216:       email: "电子邮件",
217:       phone: "电话号码",
218:       password: "更改密码",
219:       language: "语言",
220:       notifications: "通知",
221:       logout: "退出登录",
222:     },
223:     appearance: {
224:       title: "外观",
225:       theme: "主题",
226:       light: "浅色",
227:       dark: "深色",
228:       system: "系统默认",
229:       fontSize: "字体大小",
230:     },
231:     notifications: {
232:       title: "通知",
233:       push: "推送通知",
234:       email: "电子邮件通知",
235:       sms: "短信通知",
236:       reservations: "预订更新",
237:       promotions: "促销和优惠",
238:       system: "系统更新",
239:     },
240:     privacy: {
241:       title: "隐私",
242:       dataUsage: "数据使用",
243:       location: "位置服务",
244:       cookies: "cookies",
245:       advertising: "个性化广告",
246:     },
247:     help: {
248:       title: "帮助与支持",
249:       faq: "常见问题",
250:       contact: "联系支持",
251:       terms: "服务条款",
252:       privacy: "隐私政策",
253:       about: "关于SeatMaster",
254:     },
255:   },
256: };

================
File: src/services/i18n/index.js
================
 1: import i18n from "i18next";
 2: import { initReactI18next } from "react-i18next";
 3: import intervalPlural from "i18next-intervalplural-postprocessor";
 4: import * as RNLocalize from "react-native-localize";
 5: import en from "./locales/en/en";
 6: import ja from "./locales/ja/ja";
 7: import zh from "./locales/zh/zh";
 8: const resources = {
 9:   en: {
10:     common: en.common,
11:     auth: en.auth,
12:     restaurant: en.restaurant,
13:   },
14:   ja: {
15:     common: ja.common,
16:     auth: ja.auth,
17:     restaurant: ja.restaurant,
18:   },
19:   zh: {
20:     common: zh.common,
21:     auth: zh.auth,
22:     restaurant: zh.restaurant,
23:   },
24: };
25: const deviceLanguage = RNLocalize.getLocales()[0].languageCode;
26: const supportedLanguages = ["en", "ja", "zh"];
27: i18n
28:   .use(initReactI18next)
29:   .use(intervalPlural)
30:   .init({
31:     resources,
32:     lng: supportedLanguages.includes(deviceLanguage) ? deviceLanguage : "en",
33:     fallbackLng: "en",
34:     ns: ["common", "auth", "restaurant", "reservations", "settings"],
35:     defaultNS: "common",
36:     interpolation: {
37:       escapeValue: false,
38:     },
39:   });
40: export default i18n;

================
File: src/services/AuthenticationContext.js
================
 1: import React, { useState, createContext, useContext } from "react";
 2: export const AuthenticationContext = createContext();
 3: export const AuthenticationContextProvider = ({ children }) => {
 4:   const [user, setUser] = useState(null);
 5:   const [isLoading, setIsLoading] = useState(false);
 6:   const [error, setError] = useState(null);
 7:   const onLogin = async (username, password, role) => {
 8:     setIsLoading(true);
 9:     setError(null);
10:     setTimeout(() => {
11:       if (username === "+1123" && password === "123123") {
12:         setUser({ username, role });
13:       } else {
14:         setError("Invalid credentials");
15:       }
16:       setIsLoading(false);
17:     }, 1000);
18:   };
19:   const onRegister = async (username, password, repeatedPassword, role) => {
20:     setIsLoading(true);
21:     setError(null);
22:     if (password !== repeatedPassword) {
23:       setError("Passwords do not match");
24:       setIsLoading(false);
25:       return;
26:     }
27:     setTimeout(() => {
28:       setUser({ username, role });
29:       setIsLoading(false);
30:     }, 1000);
31:   };
32:   const onLogout = () => {
33:     setUser(null);
34:   };
35:   return (
36:     <AuthenticationContext.Provider
37:       value={{
38:         user,
39:         isAuthenticated: !!user,
40:         isLoading,
41:         error,
42:         onLogin,
43:         onRegister,
44:         onLogout,
45:       }}
46:     >
47:       {children}
48:     </AuthenticationContext.Provider>
49:   );
50: };
51: export const useAuthentication = () => useContext(AuthenticationContext);

================
File: src/services/LanguageContext.js
================
 1: import React, { createContext, useState, useContext, useEffect } from "react";
 2: import AsyncStorage from "@react-native-async-storage/async-storage";
 3: import { useTranslation } from "react-i18next";
 4: export const LanguageContext = createContext();
 5: export const LanguageContextProvider = ({ children }) => {
 6:   const { i18n } = useTranslation();
 7:   const [currentLanguage, setCurrentLanguage] = useState(i18n.language);
 8:   const [isLoading, setIsLoading] = useState(true);
 9:   useEffect(() => {
10:     loadSavedLanguage();
11:   }, []);
12:   const loadSavedLanguage = async () => {
13:     try {
14:       const savedLanguage = await AsyncStorage.getItem("userLanguage");
15:       if (savedLanguage) {
16:         setCurrentLanguage(savedLanguage);
17:       }
18:     } catch (error) {
19:       console.error("Failed to load language preference:", error);
20:     } finally {
21:       setIsLoading(false);
22:     }
23:   };
24:   const changeLanguage = async (languageCode) => {
25:     try {
26:       setCurrentLanguage(languageCode);
27:       await i18n.changeLanguage(languageCode);
28:       await AsyncStorage.setItem("userLanguage", languageCode);
29:     } catch (error) {
30:       console.error("Failed to save language preference:", error);
31:     }
32:   };
33:   return (
34:     <LanguageContext.Provider
35:       value={{
36:         currentLanguage,
37:         changeLanguage,
38:         isLoading,
39:       }}
40:     >
41:       {children}
42:     </LanguageContext.Provider>
43:   );
44: };
45: export const useLanguage = () => useContext(LanguageContext);

================
File: src/services/ReservationContext.js
================
  1: import React, { createContext, useState, useContext, useEffect } from "react";
  2: import AsyncStorage from "@react-native-async-storage/async-storage";
  3: import { format } from "date-fns";
  4: import { Alert } from "react-native";
  5: export const ReservationContext = createContext();
  6: export const ReservationProvider = ({ children }) => {
  7:   const [reservations, setReservations] = useState([]);
  8:   const [loading, setLoading] = useState(true);
  9:   useEffect(() => {
 10:     loadReservations();
 11:   }, []);
 12:   useEffect(() => {
 13:     if (!loading) {
 14:       saveReservations();
 15:     }
 16:   }, [reservations]);
 17:   const loadReservations = async () => {
 18:     try {
 19:       const jsonValue = await AsyncStorage.getItem("@reservations");
 20:       const savedReservations = jsonValue ? JSON.parse(jsonValue) : [];
 21:       const formattedReservations = savedReservations.map((reservation) => ({
 22:         ...reservation,
 23:         date: new Date(reservation.date),
 24:       }));
 25:       setReservations(formattedReservations);
 26:     } catch (error) {
 27:       console.error("Failed to load reservations:", error);
 28:       Alert.alert("Error", "Failed to load your reservations");
 29:     } finally {
 30:       setLoading(false);
 31:     }
 32:   };
 33:   const saveReservations = async () => {
 34:     try {
 35:       const formattedReservations = reservations.map((reservation) => ({
 36:         ...reservation,
 37:         date:
 38:           reservation.date instanceof Date
 39:             ? reservation.date.toISOString()
 40:             : reservation.date,
 41:       }));
 42:       await AsyncStorage.setItem(
 43:         "@reservations",
 44:         JSON.stringify(formattedReservations)
 45:       );
 46:     } catch (error) {
 47:       console.error("Failed to save reservations:", error);
 48:     }
 49:   };
 50:   const addReservation = (reservationData) => {
 51:     const id = Math.floor(Math.random() * 1000000).toString();
 52:     const newReservation = {
 53:       ...reservationData,
 54:       id,
 55:       status: "confirmed",
 56:       createdAt: new Date().toISOString(),
 57:     };
 58:     setReservations((prev) => [...prev, newReservation]);
 59:     return newReservation;
 60:   };
 61:   const cancelReservation = (reservationId) => {
 62:     return new Promise((resolve, reject) => {
 63:       try {
 64:         setReservations((prevReservations) =>
 65:           prevReservations.map((res) =>
 66:             res.id === reservationId ? { ...res, status: "cancelled" } : res
 67:           )
 68:         );
 69:         resolve(true);
 70:       } catch (error) {
 71:         console.error("Error cancelling reservation:", error);
 72:         reject(error);
 73:       }
 74:     });
 75:   };
 76:   const updateReservation = (reservationId, updatedData) => {
 77:     return new Promise((resolve, reject) => {
 78:       try {
 79:         setReservations((prevReservations) =>
 80:           prevReservations.map((res) =>
 81:             res.id === reservationId ? { ...res, ...updatedData } : res
 82:           )
 83:         );
 84:         resolve(true);
 85:       } catch (error) {
 86:         console.error("Error updating reservation:", error);
 87:         reject(error);
 88:       }
 89:     });
 90:   };
 91:   const getUpcomingReservations = () => {
 92:     const now = new Date();
 93:     return reservations
 94:       .filter((res) => {
 95:         const resDate = new Date(res.date);
 96:         return (
 97:           res.status !== "cancelled" &&
 98:           (resDate > now ||
 99:             (resDate.getDate() === now.getDate() &&
100:               resDate.getMonth() === now.getMonth() &&
101:               resDate.getFullYear() === now.getFullYear() &&
102:               parseInt(res.time.split(":")[0]) >= now.getHours()))
103:         );
104:       })
105:       .sort((a, b) => new Date(a.date) - new Date(b.date));
106:   };
107:   const getPastReservations = () => {
108:     const now = new Date();
109:     return reservations
110:       .filter((res) => {
111:         const resDate = new Date(res.date);
112:         return (
113:           res.status !== "cancelled" &&
114:           (resDate < now ||
115:             (resDate.getDate() === now.getDate() &&
116:               resDate.getMonth() === now.getMonth() &&
117:               resDate.getFullYear() === now.getFullYear() &&
118:               parseInt(res.time.split(":")[0]) < now.getHours()))
119:         );
120:       })
121:       .sort((a, b) => new Date(b.date) - new Date(a.date));
122:   };
123:   const getCancelledReservations = () => {
124:     return reservations
125:       .filter((res) => res.status === "cancelled")
126:       .sort((a, b) => new Date(b.date) - new Date(a.date));
127:   };
128:   return (
129:     <ReservationContext.Provider
130:       value={{
131:         isLoading: loading,
132:         reservations,
133:         addReservation,
134:         cancelReservation,
135:         updateReservation,
136:         getUpcomingReservations,
137:         getPastReservations,
138:         getCancelledReservations,
139:       }}
140:     >
141:       {children}
142:     </ReservationContext.Provider>
143:   );
144: };
145: export const useReservation = () => useContext(ReservationContext);

================
File: .cursorignore
================
1: # Add directories or file patterns to ignore during indexing (e.g. foo/ or *.csv)
2: assets/
3: android/
4: node_modules/

================
File: .gitignore
================
 1: # Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files
 2: 
 3: .vscode
 4: 
 5: # dependencies
 6: node_modules/
 7: 
 8: # Expo
 9: .expo/
10: dist/
11: web-build/
12: ios/
13: android/
14: 
15: # Native
16: *.orig.*
17: *.jks
18: *.p8
19: *.p12
20: *.key
21: *.mobileprovision
22: 
23: # Metro
24: .metro-health-check*
25: 
26: # debug
27: npm-debug.*
28: yarn-debug.*
29: yarn-error.*
30: 
31: # macOS
32: .DS_Store
33: *.pem
34: 
35: # local env files
36: .env*.local
37: 
38: # typescript
39: *.tsbuildinfo
40: 
41: # @generated expo-cli sync-2b81b286409207a5da26e14c78851eb30d8ccbdb
42: # The following patterns were generated by expo-cli
43: 
44: expo-env.d.ts
45: # @end expo-cli

================
File: App.js
================
 1: import React from "react";
 2: import { theme } from "./src/infrastructure/theme";
 3: import { ThemeProvider } from "styled-components/native";
 4: import { AuthenticationContextProvider } from "./src/services/AuthenticationContext";
 5: import { LanguageContextProvider } from "./src/services/LanguageContext";
 6: import { ReservationProvider } from "./src/services/ReservationContext";
 7: import { Navigation } from "./src/infrastructure/navigation";
 8: import { StatusBar as ExpoStatusBar } from "expo-status-bar";
 9: import "./src/services/i18n";
10: export default function App() {
11:   return (
12:     <>
13:       <LanguageContextProvider>
14:         <AuthenticationContextProvider>
15:           <ReservationProvider>
16:             {}
17:             <ThemeProvider theme={theme}>
18:               <Navigation />
19:             </ThemeProvider>
20:           </ReservationProvider>
21:         </AuthenticationContextProvider>
22:       </LanguageContextProvider>
23:       <ExpoStatusBar style="auto" />
24:     </>
25:   );
26: }

================
File: app.json
================
 1: {
 2:   "expo": {
 3:     "name": "seat-master-js",
 4:     "slug": "seat-master-js",
 5:     "version": "1.0.0",
 6:     "assetBundlePatterns": [
 7:       "**/*"
 8:     ],
 9:     "orientation": "portrait",
10:     "icon": "./assets/images/icon.png",
11:     "scheme": "myapp",
12:     "userInterfaceStyle": "automatic",
13:     "splash": {
14:       "image": "./assets/images/splash.png",
15:       "resizeMode": "contain",
16:       "backgroundColor": "#ffffff"
17:     },
18:     "ios": {
19:       "supportsTablet": true,
20:       "bundleIdentifier": "com.vickerszhu.seatmasterjs"
21:     },
22:     "android": {
23:       "adaptiveIcon": {
24:         "foregroundImage": "./assets/images/adaptive-icon.png",
25:         "backgroundColor": "#ffffff"
26:       },
27:       "package": "com.vickerszhu.seatmasterjs"
28:     },
29:     "web": {
30:       "bundler": "metro",
31:       "output": "static",
32:       "favicon": "./assets/images/favicon.png"
33:     },
34:     "plugins": [
35:       "expo-router",
36:       [
37:         "expo-image-picker",
38:         {
39:           "photosPermission": "The app needs access to your photos to upload restaurant images.",
40:           "cameraPermission": "The app needs access to your camera to take restaurant photos."
41:         }
42:       ],
43:       "expo-asset",
44:       "expo-font"
45:     ],
46:     "experiments": {
47:       "typedRoutes": true
48:     },
49:     "extra": {
50:       "router": {
51:         "origin": false
52:       },
53:       "eas": {
54:         "projectId": "c6d8ffc4-9bc2-4f22-a564-ff0301c850a4"
55:       }
56:     }
57:   }
58: }

================
File: babel.config.js
================
1: module.exports = function (api) {
2:   api.cache(true);
3:   return {
4:     presets: ['babel-preset-expo']
5:   };
6: };

================
File: eas.json
================
 1: {
 2:   "build": {
 3:     "development": {
 4:       "developmentClient": true,
 5:       "distribution": "internal"
 6:     },
 7:     "preview": {
 8:       "distribution": "internal"
 9:     },
10:     "production": {}
11:   }
12: }

================
File: metro.config.js
================
1: const { getDefaultConfig } = require('expo/metro-config');
2: const defaultConfig = getDefaultConfig(__dirname);
3: defaultConfig.resolver.assetExts.push('glb', 'gltf');
4: module.exports = defaultConfig;

================
File: package.json
================
 1: {
 2:   "name": "seat-master-js",
 3:   "main": "node_modules/expo/AppEntry.js",
 4:   "version": "1.0.0",
 5:   "scripts": {
 6:     "start": "expo start",
 7:     "android": "expo run:android",
 8:     "ios": "expo run:ios",
 9:     "web": "expo start --web",
10:     "test": "jest --watchAll"
11:   },
12:   "jest": {
13:     "preset": "jest-expo"
14:   },
15:   "dependencies": {
16:     "@expo/vector-icons": "^14.0.2",
17:     "@react-native-async-storage/async-storage": "^2.1.2",
18:     "@react-navigation/bottom-tabs": "^6.4.1",
19:     "@react-navigation/native": "^6.1.18",
20:     "@react-navigation/stack": "^6.4.1",
21:     "date-fns": "^4.1.0",
22:     "expo": "^52.0.42",
23:     "expo-asset": "~11.0.5",
24:     "expo-dev-client": "~5.0.17",
25:     "expo-file-system": "~18.0.12",
26:     "expo-font": "~13.0.4",
27:     "expo-gl": "~15.0.5",
28:     "expo-image-picker": "~16.0.6",
29:     "expo-linear-gradient": "~14.0.2",
30:     "expo-linking": "~7.0.5",
31:     "expo-router": "~4.0.19",
32:     "expo-splash-screen": "~0.29.22",
33:     "expo-status-bar": "~2.0.1",
34:     "expo-system-ui": "~4.0.9",
35:     "expo-web-browser": "~14.0.2",
36:     "firebase": "^11.1.0",
37:     "formik": "^2.4.6",
38:     "i18next": "^24.2.3",
39:     "i18next-intervalplural-postprocessor": "^3.0.0",
40:     "react": "18.3.1",
41:     "react-dom": "18.3.1",
42:     "react-i18next": "^15.4.1",
43:     "react-native": "~0.77.1",
44:     "react-native-asset": "^2.1.1",
45:     "react-native-collapsible-tab-view": "^8.0.0",
46:     "react-native-dropdown-picker": "^5.4.6",
47:     "react-native-fs": "^2.20.0",
48:     "react-native-gesture-handler": "~2.22.0",
49:     "react-native-localize": "^3.4.1",
50:     "react-native-pager-view": "6.5.1",
51:     "react-native-paper": "^5.12.3",
52:     "react-native-reanimated": "~3.16.7",
53:     "react-native-safe-area-context": "~5.1.0",
54:     "react-native-screens": "~4.8.0",
55:     "react-native-static-server": "^0.5.0",
56:     "react-native-svg": "15.8.0",
57:     "react-native-tab-view": "^4.0.1",
58:     "react-native-web": "~0.19.10",
59:     "react-native-webview": "~13.13.1",
60:     "react-native-webview-autoheight": "^1.0.6",
61:     "react-promise-suspense": "^0.3.4",
62:     "styled-components": "^6.1.12",
63:     "yup": "^1.5.0"
64:   },
65:   "devDependencies": {
66:     "@babel/core": "^7.20.0",
67:     "@types/react": "~18.3.12",
68:     "@types/react-native": "^0.73.0",
69:     "depcheck": "^1.4.7",
70:     "jest": "^29.2.1",
71:     "jest-expo": "~52.0.6",
72:     "react-test-renderer": "18.2.0",
73:     "typescript": "~5.3.3"
74:   },
75:   "private": true
76: }

================
File: repomix.config.json
================
 1: {
 2:   "include": ["src/**/*", "*.*"],
 3:   "ignore": {
 4:     "useGitignore": true,
 5:     "useDefaultPatterns": true,
 6:     "customPatterns": ["**/*.log", "node_modules/**/*"]
 7:   },
 8:   "output": {
 9:     "style": "plain",
10:     "filePath": "repomix-output.txt",
11:     "removeComments": true,
12:     "showLineNumbers": true,
13:     "topFilesLength": 10,
14:     "removeEmptyLines": true,
15:     "copyToClipboard": true
16:   }
17: }

================
File: tsconfig.json
================
 1: {
 2:   "extends": "expo/tsconfig.base",
 3:   "compilerOptions": {
 4:     "jsx": "react-jsx",
 5:     "strict": true,
 6:     "paths": {
 7:       "@/*": [
 8:         "./*"
 9:       ]
10:     }
11:   },
12:   "include": [
13:     "**/*.ts",
14:     "**/*.tsx",
15:     ".expo/types/**/*.ts",
16:     "expo-env.d.ts"
17:   ]
18: }



================================================================
End of Codebase
================================================================
