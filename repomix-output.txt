This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix. The content has been processed where comments have been removed, line numbers have been added.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/**/*, *.*
- Files matching these patterns are excluded: **/*.log, node_modules/**/*
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Line numbers have been added to the beginning of each line

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  components/
    CustomText/
      CustomText.js
    ErrorBoundary/
      ErrorBoundary.js
    FadeInView/
      FadeInView.js
    Favourite/
      Favourite.js
    GlobalWrapper/
      GlobalWrapper.js
    SafeArea/
      SafeArea.js
    Separator/
      Separator.js
      Separator.styles.js
    Spacer/
      Spacer.js
    Switch/
      Switch.js
      Switch.styles.js
      SwitchAlternate.styles.js
    TimeScroll/
      TimeScroll.js
    WebApp/
      styles.js
      useStaticServer.js
      WebApp.js
  data/
    mockData.js
  features/
    auth/
      components/
        CountryListItem.js
        CountryListItem.styles.js
        LoginDropDownPicker.js
        LoginDropDownPicker.styles.js
      screens/
        LoginScreen.js
        LoginScreen.styles.js
    customer/
      reservations/
        components/
          PastReservationCard.js
          PastReservationCard.styles.js
          ReservationCard.js
          ReservationCard.styles.js
        screens/
          ReservationsScreen.js
      restaurants/
        components/
          Others.js
          RestaurantInfoCard.js
          RestaurantInfoCard.styles.js
          RestaurantList.styles.js
          RestaurantMenu.js
          RestaurantTabBar.js
          Reviews.js
          Search.js
          TabNavigation.js
        hooks/
          useReservationHandler.js
          useScrollHandler.js
        screens/
          RestaurantDetailScreen.js
          RestaurantsScreen.js
      settings/
        screens/
          AccountSettingsScreen.js
          AccountSettingsScreen.styles.js
          SettingsScreen.js
          SettingsScreen.styles.js
    merchant/
      dashboard/
        components/
          CounterSeats.js
          SeatView.js
          SharedTableStyles.styles.js
          TableMatrix.js
        screens/
          MerchantHomeScreen.js
      reservations/
        components/
          ReservationComponents.js
          ReservationsGrid.js
        screens/
          MerchantReservationsScreen.js
        utils/
          timeUtils.js
      settings/
        screens/
          MerchantSettingsScreen.js
  infrastructure/
    navigation/
      AppNavigator.js
      AuthNavigator.js
      CheckoutNavigator.js
      index.js
      MerchantNavigator.js
      ReservationsNavigator.js
      RestaurantsNavigator.js
      SettingsNavigator.js
    options/
      GlobalScreenOptions.js
    theme/
      colors.js
      fonts.js
      index.js
      sizes.js
      spacing.js
  services/
    AuthenticationContext.js
.cursorignore
.gitignore
App.js
app.json
babel.config.js
eas.json
metro.config.js
package.json
repomix.config.json
tsconfig.json

================================================================
Files
================================================================

================
File: src/components/CustomText/CustomText.js
================
 1: import { Text } from "react-native";
 2: import styled from "styled-components";
 3: 
 4: const defaultTextStyles = (theme) => `
 5:   font-family: ${theme.fonts.body};
 6:   font-weight: ${theme.fontWeights.regular};
 7:   color: ${theme.colors.text.primary};
 8:   flex-wrap: wrap;
 9:   margin-top: 0px;
10:   margin-bottom: 0px;
11: `;
12: const title = (theme) => `
13:   font-size: ${theme.fontSizes.title};
14:   font-weight: ${theme.fontWeights.medium};
15: `;
16: const h5 = (theme) => `
17:   font-size: ${theme.fontSizes.h5};
18: `;
19: const h4 = (theme) => `
20:   font-size: ${theme.fontSizes.h4};
21: `;
22: const h3 = (theme) => `
23:   font-size: ${theme.fontSizes.h3};
24: `;
25: const h2 = (theme) => `
26:   font-size: ${theme.fontSizes.h2};
27: `;
28: const h1 = (theme) => `
29:   font-size: ${theme.fontSizes.h1};
30: `;
31: 
32: const body = (theme) => `
33:   font-size: ${theme.fontSizes.body};
34: `;
35: 
36: const hint = (theme) => `
37:   font-size: ${theme.fontSizes.body};
38: `;
39: 
40: const error = (theme) => `
41:   color: ${theme.colors.text.error};
42: `;
43: 
44: const caption = (theme) => `
45:   font-size: ${theme.fontSizes.caption};
46:   font-weight: ${theme.fontWeights.bold};
47: `;
48: 
49: const label = (theme) => `
50:   font-family: ${theme.fonts.heading};
51:   font-size: ${theme.fontSizes.body};
52:   font-weight: ${theme.fontWeights.medium};
53: `;
54: 
55: const variants = {
56:   body,
57:   hint,
58:   error,
59:   label,
60:   caption,
61:   title,
62:   h5,
63:   h4,
64:   h3,
65:   h2,
66:   h1,
67: };
68: 
69: export const CustomText = styled(Text)`
70:   ${({ theme }) => defaultTextStyles(theme)};
71:   ${({ variant, theme }) => variants[variant](theme)};
72: `;
73: 
74: CustomText.defaultProps = {
75:   variant: "body",
76: };

================
File: src/components/ErrorBoundary/ErrorBoundary.js
================
  1: import React from "react";
  2: import { TouchableOpacity } from "react-native";
  3: import styled from "styled-components/native";
  4: 
  5: 
  6: 
  7: 
  8: 
  9: 
 10: class ErrorBoundary extends React.Component {
 11:   constructor(props) {
 12:     super(props);
 13:     this.state = { hasError: false, error: null, errorInfo: null };
 14:   }
 15: 
 16: 
 17: 
 18: 
 19: 
 20:   static getDerivedStateFromError(error) {
 21:     return { hasError: true, error };
 22:   }
 23: 
 24: 
 25: 
 26: 
 27: 
 28: 
 29:   componentDidCatch(error, errorInfo) {
 30:     this.setState({ errorInfo });
 31: 
 32:     console.error("ErrorBoundary caught an error:", error, errorInfo);
 33: 
 34:   }
 35: 
 36: 
 37: 
 38: 
 39:   resetError = () => {
 40:     this.setState({ hasError: false, error: null, errorInfo: null });
 41:   };
 42: 
 43:   render() {
 44:     if (this.state.hasError) {
 45: 
 46:       return (
 47:         <ErrorContainer>
 48:           <ErrorTitle>Something went wrong.</ErrorTitle>
 49:           <ErrorMessage>
 50:             We're sorry for the inconvenience. Please try again later.
 51:           </ErrorMessage>
 52:           {}
 53:           <RetryButton onPress={this.resetError}>
 54:             <RetryButtonText>Try Again</RetryButtonText>
 55:           </RetryButton>
 56:           {}
 57:           {__DEV__ && this.state.errorInfo && (
 58:             <ErrorDetails>
 59:               <ErrorDetailsTitle>Error Details:</ErrorDetailsTitle>
 60:               <ErrorDetailsText>{this.state.error.toString()}</ErrorDetailsText>
 61:               <ErrorDetailsText>
 62:                 {this.state.errorInfo.componentStack}
 63:               </ErrorDetailsText>
 64:             </ErrorDetails>
 65:           )}
 66:         </ErrorContainer>
 67:       );
 68:     }
 69: 
 70: 
 71:     return this.props.children;
 72:   }
 73: }
 74: 
 75: 
 76: const ErrorContainer = styled.View`
 77:   flex: 1;
 78:   justify-content: center;
 79:   align-items: center;
 80:   padding: ${({ theme }) => theme.space[3]};
 81:   background-color: ${({ theme }) => theme.colors.bg.secondary};
 82: `;
 83: 
 84: const ErrorTitle = styled.Text`
 85:   font-size: ${({ theme }) => theme.fontSizes.title};
 86:   font-weight: ${({ theme }) => theme.fontWeights.bold};
 87:   color: ${({ theme }) => theme.colors.text.error};
 88:   margin-bottom: ${({ theme }) => theme.space[2]};
 89: `;
 90: 
 91: const ErrorMessage = styled.Text`
 92:   font-size: ${({ theme }) => theme.fontSizes.body};
 93:   color: ${({ theme }) => theme.colors.text.primary};
 94:   text-align: center;
 95:   margin-bottom: ${({ theme }) => theme.space[3]};
 96: `;
 97: 
 98: const RetryButton = styled(TouchableOpacity)`
 99:   padding-vertical: ${({ theme }) => theme.space[2]};
100:   padding-horizontal: ${({ theme }) => theme.space[3]};
101:   background-color: ${({ theme }) => theme.colors.ui.primary};
102:   border-radius: 5px;
103: `;
104: 
105: const RetryButtonText = styled.Text`
106:   font-size: ${({ theme }) => theme.fontSizes.button};
107:   color: ${({ theme }) => theme.colors.text.inverse};
108:   font-weight: ${({ theme }) => theme.fontWeights.bold};
109: `;
110: 
111: const ErrorDetails = styled.View`
112:   margin-top: ${({ theme }) => theme.space[3]};
113:   padding: ${({ theme }) => theme.space[2]};
114:   background-color: #f8d7da;
115:   border-radius: 5px;
116: `;
117: 
118: const ErrorDetailsTitle = styled.Text`
119:   font-size: ${({ theme }) => theme.fontSizes.body};
120:   font-weight: ${({ theme }) => theme.fontWeights.bold};
121:   color: ${({ theme }) => theme.colors.text.error};
122:   margin-bottom: ${({ theme }) => theme.space[1]};
123: `;
124: 
125: const ErrorDetailsText = styled.Text`
126:   font-size: ${({ theme }) => theme.fontSizes.caption};
127:   color: ${({ theme }) => theme.colors.text.error};
128: `;
129: 
130: export default ErrorBoundary;

================
File: src/components/FadeInView/FadeInView.js
================
 1: import React, { useRef, useEffect } from 'react';
 2: import { Animated } from 'react-native';
 3: 
 4: export const FadeInView = ({ duration = 1500, ...props }) => {
 5:   const fadeAnim = useRef(new Animated.Value(0)).current;
 6: 
 7:   useEffect(() => {
 8:     Animated.timing(fadeAnim, {
 9:       toValue: 1,
10:       duration: duration,
11:       useNativeDriver: true,
12:     }).start();
13:   }, [fadeAnim, duration]);
14: 
15:   return (
16:     <Animated.View
17:       style={{
18:         ...props.style,
19:         opacity: fadeAnim,
20:       }}
21:     >
22:       {props.children}
23:     </Animated.View>
24:   );
25: };

================
File: src/components/Favourite/Favourite.js
================
 1: import React, { useContext } from 'react';
 2: import { TouchableOpacity } from 'react-native';
 3: import styled from 'styled-components/native';
 4: 
 5: import { AntDesign } from '@expo/vector-icons';
 6: 
 7: 
 8: const FavouriteButton = styled(TouchableOpacity)`
 9:   position: absolute;
10:   top: 25px;
11:   right: 25px;
12:   z-index: 9;
13: `;
14: 
15: export const Favourite = ({ restaurant }) => {
16: 
17:   return (
18:     <FavouriteButton
19:     >
20:       <AntDesign
21:         name={false ? 'heart' : 'hearto'}
22:         size={24}
23:         color={false ? 'red' : 'white'}
24:       />
25:     </FavouriteButton>
26:   );
27: };

================
File: src/components/GlobalWrapper/GlobalWrapper.js
================
 1: import React from 'react';
 2: import { StatusBar as RNStatusBar, View } from 'react-native';
 3: import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
 4: import styled from 'styled-components/native';
 5: 
 6: const StatusBarBackground = styled(View)`
 7:   background-color: ${(props) => props.backgroundColor || 'transparent'};
 8: `;
 9: 
10: const CustomStatusBar = ({ backgroundColor }) => {
11:   const insets = useSafeAreaInsets();
12:   return (
13:     <StatusBarBackground style={{ height: insets.top }} backgroundColor={backgroundColor} />
14:   );
15: };
16: 
17: export const GlobalWrapper = ({ children }) => (
18:   <SafeAreaProvider>
19:     <RNStatusBar barStyle="dark-content" />
20:     <CustomStatusBar backgroundColor="white" />
21:     {children}
22:   </SafeAreaProvider>
23: );

================
File: src/components/SafeArea/SafeArea.js
================
1: import { StatusBar, SafeAreaView } from 'react-native';
2: import styled from 'styled-components';
3: 
4: export const SafeArea = styled(SafeAreaView)`
5:   flex: 1;
6:   ${StatusBar.currentHeight && `margin-top: ${StatusBar.currentHeight}px`};
7:   background-color: ${(props) => props.theme.colors.bg.primary};
8: `;

================
File: src/components/Separator/Separator.js
================
 1: import React from "react";
 2: import PropTypes from "prop-types";
 3: import { SeparatorFull, SeparatorPartial } from "./Separator.styles";
 4: 
 5: export const Separator = ({ type }) => {
 6:   return type === "full" ? <SeparatorFull /> : <SeparatorPartial />;
 7: };
 8: 
 9: Separator.propTypes = {
10:   type: PropTypes.oneOf(["full", "partial"]),
11: };

================
File: src/components/Separator/Separator.styles.js
================
 1: import styled from "styled-components/native";
 2: 
 3: export const SeparatorFull = styled.View`
 4:   height: 1px;
 5:   background-color: rgba(0, 0, 0, 0.1);
 6:   width: 100%;
 7:   margin-vertical: ${(props) => props.theme.space[3]};
 8: `;
 9: 
10: export const SeparatorPartial = styled.View`
11:   height: 1px;
12:   background-color: rgba(0, 0, 0, 0.1);
13:   width: 80%;
14:   margin-vertical: ${(props) => props.theme.space[2]};
15:   margin-left: 66px;
16: `;

================
File: src/components/Spacer/Spacer.js
================
 1: import React from 'react';
 2: import { View } from 'react-native';
 3: import styled, { useTheme } from 'styled-components/native';
 4: 
 5: const sizeVariant = {
 6:   small: 1,
 7:   medium: 2,
 8:   large: 3,
 9:   xl: 4,
10:   xxl: 5,
11: };
12: 
13: const positionVariant = {
14:   top: 'marginTop',
15:   left: 'marginLeft',
16:   right: 'marginRight',
17:   bottom: 'marginBottom',
18: };
19: 
20: const getVariant = (position, size, theme) => {
21:   const sizeIndex = sizeVariant[size];
22:   const property = positionVariant[position];
23:   const value = theme.space[sizeIndex];
24: 
25:   return `${property}:${value}`;
26: };
27: 
28: const SpacerView = styled(View)`
29:   ${({ variant }) => variant};
30: `;
31: 
32: export const Spacer = ({ position = 'top', size = 'small', children }) => {
33:   const theme = useTheme();
34:   const variant = getVariant(position, size, theme);
35: 
36:   return <SpacerView variant={variant}>{children}</SpacerView>;
37: };

================
File: src/components/Switch/Switch.js
================
 1: import React, { useRef, useEffect } from "react";
 2: import { Animated, TouchableWithoutFeedback } from "react-native";
 3: 
 4: import * as DefaultStyles from "./Switch.styles";
 5: import * as AltStyles from "./SwitchAlternate.styles";
 6: 
 7: const SwitchContainer = ({
 8:   isOn,
 9:   setIsOn,
10:   leftLabel,
11:   rightLabel,
12:   variant = "default",
13: }) => {
14: 
15:   const Styles = variant === "alternate" ? AltStyles : DefaultStyles;
16: 
17: 
18:   const capsulePosition = useRef(new Animated.Value(isOn ? 96 : 0)).current;
19: 
20:   useEffect(() => {
21:     Animated.timing(capsulePosition, {
22:       toValue: isOn ? 96 : 0,
23:       duration: 200,
24:       useNativeDriver: false,
25:     }).start();
26:   }, [isOn]);
27: 
28:   return (
29:     <Styles.Container>
30:       <Styles.SwitchBackground>
31:         <Styles.Capsule style={{ left: capsulePosition }} />
32:         <TouchableWithoutFeedback onPress={() => setIsOn(false)}>
33:           <Styles.TextWrapper>
34:             {}
35:             <Styles.Label active={!isOn}>{leftLabel}</Styles.Label>
36:           </Styles.TextWrapper>
37:         </TouchableWithoutFeedback>
38:         <TouchableWithoutFeedback onPress={() => setIsOn(true)}>
39:           <Styles.TextWrapper>
40:             {}
41:             <Styles.Label active={isOn}>{rightLabel}</Styles.Label>
42:           </Styles.TextWrapper>
43:         </TouchableWithoutFeedback>
44:       </Styles.SwitchBackground>
45:     </Styles.Container>
46:   );
47: };
48: 
49: export default SwitchContainer;

================
File: src/components/Switch/Switch.styles.js
================
 1: import styled from "styled-components/native";
 2: import { Animated, Text } from "react-native";
 3: 
 4: export const Container = styled.View`
 5:   flex-direction: row;
 6:   justify-content: center;
 7:   align-items: center;
 8:   margin: 10px;
 9: `;
10: 
11: export const SwitchBackground = styled.View`
12:   flex-direction: row;
13:   justify-content: space-around;
14:   align-items: center;
15:   background-color: ${(props) => props.theme.colors.ui.disabled};
16:   border-radius: 25px;
17:   width: 200px;
18:   height: 50px;
19:   padding: 3px;
20: `;
21: 
22: export const Capsule = styled(Animated.View)`
23:   position: absolute;
24:   width: 50%;
25:   height: 100%;
26:   background-color: ${(props) => props.theme.colors.bg.primary};
27:   border-radius: 25px;
28:   margin: 3px;
29: `;
30: 
31: export const TextWrapper = styled.View`
32:   flex: 1;
33:   align-items: center;
34:   justify-content: center;
35: `;
36: 
37: export const Label = styled(Text)`
38:   font-size: ${(props) => props.theme.fontSizes.button};
39:   color: ${(props) => props.theme.colors.text.primary};
40: `;

================
File: src/components/Switch/SwitchAlternate.styles.js
================
 1: import styled from "styled-components/native";
 2: import { Animated, Text } from "react-native";
 3: 
 4: export const Container = styled.View`
 5:   flex-direction: row;
 6:   justify-content: center;
 7:   align-items: center;
 8:   margin: ${(props) => props.theme.space[2]};
 9: `;
10: 
11: export const SwitchBackground = styled.View`
12:   flex-direction: row;
13:   justify-content: space-around;
14:   align-items: center;
15:   background-color: ${(props) =>
16:     props.theme.colors.ui.disabled};
17:   border-radius: 25px;
18:   width: 200px;
19:   height: 50px;
20:   padding: ${(props) => props.theme.space[1]};
21: `;
22: 
23: export const Capsule = styled(Animated.View)`
24:   position: absolute;
25:   width: 50%;
26:   height: 100%;
27:   background-color: ${(props) =>
28:     props.theme.colors.ui.primary};
29:   border-radius: 25px;
30:   margin: ${(props) => props.theme.space[1]};
31: `;
32: 
33: export const TextWrapper = styled.View`
34:   flex: 1;
35:   align-items: center;
36:   justify-content: center;
37: `;
38: 
39: export const Label = styled(Text)`
40:   font-size: ${(props) => props.theme.fontSizes.button};
41:   font-family: ${(props) => props.theme.fonts.body};
42:   color: ${(props) =>
43:     props.active
44:       ? props.theme.colors.text.inverse
45:       : props.theme.colors.text.primary};
46: `;

================
File: src/components/TimeScroll/TimeScroll.js
================
  1: import React, { useRef } from "react";
  2: import styled from "styled-components/native";
  3: import { Animated } from "react-native";
  4: import { LinearGradient } from "expo-linear-gradient";
  5: 
  6: const ITEM_HEIGHT = 50;
  7: const VISIBLE_ITEMS = 5;
  8: const CONTAINER_HEIGHT = ITEM_HEIGHT * VISIBLE_ITEMS;
  9: const CONTAINER_WIDTH = 60;
 10: const PADDING_VERTICAL = (CONTAINER_HEIGHT - ITEM_HEIGHT) / 2;
 11: 
 12: const Container = styled.View`
 13:   height: ${CONTAINER_HEIGHT}px;
 14:   width: ${CONTAINER_WIDTH}px;
 15:   background-color: ${(props) => props.theme.colors.bg.secondary};
 16:   overflow: hidden;
 17:   border-radius: 30px;
 18:   position: relative;
 19: `;
 20: 
 21: const StyledAnimatedItem = styled(Animated.View)`
 22:   height: ${ITEM_HEIGHT}px;
 23:   justify-content: center;
 24:   align-items: center;
 25: `;
 26: 
 27: const TimeText = styled.Text`
 28:   color: ${(props) => props.theme.colors.text.primary};
 29:   font-size: 18px;
 30:   font-family: ${(props) => props.theme.fonts.body};
 31: `;
 32: 
 33: export const TimeScroll = ({
 34:   times,
 35:   selectedTime,
 36:   onTimeChange,
 37:   containerHeight = CONTAINER_HEIGHT,
 38:   containerWidth = CONTAINER_WIDTH,
 39:   itemHeight = ITEM_HEIGHT,
 40:   visibleItems = VISIBLE_ITEMS,
 41: }) => {
 42:   const scrollY = useRef(new Animated.Value(0)).current;
 43:   const paddingVertical = (containerHeight - itemHeight) / 2;
 44: 
 45:   const handleMomentumScrollEnd = (event) => {
 46:     const offsetY = event.nativeEvent.contentOffset.y;
 47:     const index = Math.round(offsetY / itemHeight);
 48:     if (index >= 0 && index < times.length) {
 49:       onTimeChange(times[index]);
 50:     }
 51:   };
 52: 
 53:   return (
 54:     <Container style={{ height: containerHeight, width: containerWidth }}>
 55:       <Animated.ScrollView
 56:         contentContainerStyle={{ paddingVertical: paddingVertical }}
 57:         showsVerticalScrollIndicator={false}
 58:         snapToInterval={itemHeight}
 59:         decelerationRate="fast"
 60:         bounces={false}
 61:         onMomentumScrollEnd={handleMomentumScrollEnd}
 62:         onScroll={Animated.event(
 63:           [{ nativeEvent: { contentOffset: { y: scrollY } } }],
 64:           { useNativeDriver: true }
 65:         )}
 66:         scrollEventThrottle={16}
 67:       >
 68:         {times.map((time, index) => {
 69:           const inputRange = [
 70:             (index - 1) * itemHeight,
 71:             index * itemHeight,
 72:             (index + 1) * itemHeight,
 73:           ];
 74: 
 75:           const scale = scrollY.interpolate({
 76:             inputRange,
 77:             outputRange: [0.7, 1, 0.7],
 78:             extrapolate: "clamp",
 79:           });
 80: 
 81:           const opacity = scrollY.interpolate({
 82:             inputRange,
 83:             outputRange: [0.3, 1, 0.3],
 84:             extrapolate: "clamp",
 85:           });
 86: 
 87:           const rotateX = scrollY.interpolate({
 88:             inputRange,
 89:             outputRange: ["30deg", "0deg", "-30deg"],
 90:             extrapolate: "clamp",
 91:           });
 92: 
 93:           return (
 94:             <StyledAnimatedItem
 95:               key={index}
 96:               style={{
 97:                 height: itemHeight,
 98:                 transform: [{ perspective: 1000 }, { rotateX }, { scale }],
 99:                 opacity,
100:               }}
101:             >
102:               <TimeText>{time}</TimeText>
103:             </StyledAnimatedItem>
104:           );
105:         })}
106:       </Animated.ScrollView>
107:       {}
108:       <LinearGradient
109:         colors={["rgba(241,241,241,1)", "rgba(241,241,241,0)"]}
110:         style={{
111:           position: "absolute",
112:           top: 0,
113:           left: 0,
114:           right: 0,
115:           height: 20,
116:         }}
117:         pointerEvents="none"
118:       />
119:       {}
120:       <LinearGradient
121:         colors={["rgba(241,241,241,0)", "rgba(241,241,241,1)"]}
122:         style={{
123:           position: "absolute",
124:           bottom: 0,
125:           left: 0,
126:           right: 0,
127:           height: 20,
128:         }}
129:         pointerEvents="none"
130:       />
131:     </Container>
132:   );
133: };
134: 
135: export default TimeScroll;

================
File: src/components/WebApp/styles.js
================
 1: import styled from "styled-components/native";
 2: import { WebView } from "react-native-webview";
 3: import { TouchableOpacity, Text, View } from "react-native";
 4: 
 5: 
 6: export const Container = styled.View`
 7:   width: 100%;
 8:   height: ${({ height }) => height}px;
 9:   background-color: ${({ theme }) => theme.colors.bg.primary};
10: `;
11: 
12: // Styled WebView
13: export const StyledWebView = styled(WebView)`
14:   flex: 1;
15:   width: 100%;
16: `;
17: 
18: // Footer container
19: export const Footer = styled.View`
20:   padding: ${({ theme }) => theme.space[3]};
21:   background-color: ${({ theme }) => theme.colors.ui.tertiary};
22:   flex-direction: row;
23:   justify-content: space-between;
24:   align-items: center;
25: `;
26: 
27: // Text displaying selected chairs
28: export const SelectedText = styled(Text)`
29:   flex: 1;
30:   margin-right: ${({ theme }) => theme.space[2]};
31:   color: ${({ theme }) => theme.colors.text.primary};
32:   font-size: ${({ theme }) => theme.fontSizes.body};
33:   font-family: ${({ theme }) => theme.fonts.body};
34: `;
35: 
36: // Cancel button
37: export const CancelButton = styled(TouchableOpacity)`
38:   padding: ${({ theme }) => theme.space[2]};
39:   background-color: ${({ theme }) => theme.colors.ui.error};
40:   border-radius: 4px;
41: `;
42: 
43: // Text inside the Cancel button
44: export const CancelButtonText = styled(Text)`
45:   color: ${({ theme }) => theme.colors.text.inverse};
46:   font-size: ${({ theme }) => theme.fontSizes.button};
47:   font-family: ${({ theme }) => theme.fonts.body};
48:   text-align: center;
49: `;

================
File: src/components/WebApp/useStaticServer.js
================
 1: import { useEffect, useState } from "react";
 2: import StaticServer from "react-native-static-server";
 3: import RNFS from "react-native-fs";
 4: 
 5: const useStaticServer = () => {
 6:   const [url, setUrl] = useState("");
 7: 
 8:   useEffect(() => {
 9:     let server = null;
10: 
11:     const startServer = async () => {
12:       const path = `${RNFS.MainBundlePath}/3d_build`; // Ensure this path exists and contains your web app
13:       console.log(`Inner webapp path verified: ${path}`);
14:       server = new StaticServer(0, path, { localOnly: true });
15:       try {
16:         const serverUrl = await server.start();
17:         setUrl(serverUrl);
18:         console.log(`Server hosting at: ${serverUrl}`);
19:       } catch (error) {
20:         console.error("Failed to start server:", error);
21:       }
22:     };
23: 
24:     startServer();
25: 
26: 
27:     return () => {
28:       if (server) {
29:         server.stop();
30:       }
31:     };
32:   }, []);
33: 
34:   return url;
35: };
36: 
37: export default useStaticServer;

================
File: src/components/WebApp/WebApp.js
================
  1: import React, { useEffect, useRef, useState, useCallback } from "react";
  2: import { View, ActivityIndicator } from "react-native";
  3: import { WebView } from "react-native-webview";
  4: import styled from "styled-components/native";
  5: import useStaticServer from "./useStaticServer";
  6: 
  7: import {
  8:   Container,
  9:   StyledWebView,
 10:   Footer,
 11:   SelectedText,
 12:   CancelButton,
 13:   CancelButtonText,
 14: } from "./styles";
 15: 
 16: const WebApp = ({ onInteractionStart, onInteractionEnd }) => {
 17:   const serverUrl = useStaticServer();
 18:   const webViewRef = useRef(null);
 19:   const [webViewHeight, setWebViewHeight] = useState(200);
 20:   const [selectedChairs, setSelectedChairs] = useState([]);
 21:   const [occupiedChairs, setOccupiedChairs] = useState(["CHAIR2", "CHAIR4"]);
 22:   const [isServerReady, setIsServerReady] = useState(false);
 23: 
 24: 
 25:   useEffect(() => {
 26:     if (serverUrl) {
 27:       setIsServerReady(true);
 28:     }
 29:   }, [serverUrl]);
 30: 
 31:   const sendChairsToWebView = useCallback(() => {
 32:     if (webViewRef.current) {
 33:       const script = `
 34:         (function() {
 35:           if (window.updateChairs) {
 36:             window.updateChairs({
 37:               selectedChairs: ${JSON.stringify(selectedChairs)},
 38:               occupiedChairs: ${JSON.stringify(occupiedChairs)}
 39:             });
 40:           }
 41:         })();
 42:         true;
 43:       `;
 44:       webViewRef.current.injectJavaScript(script);
 45:     }
 46:   }, [selectedChairs, occupiedChairs]);
 47: 
 48:   useEffect(() => {
 49:     sendChairsToWebView();
 50:   }, [selectedChairs, occupiedChairs, sendChairsToWebView]);
 51: 
 52:   const handleWebViewMessage = useCallback(
 53:     (event) => {
 54:       try {
 55:         const messageData = JSON.parse(event.nativeEvent.data);
 56: 
 57:         switch (messageData.type) {
 58:           case "chairClicked":
 59:             if (occupiedChairs.includes(messageData.name)) {
 60:               return;
 61:             }
 62:             setSelectedChairs((prevSelected) => {
 63:               if (prevSelected.includes(messageData.name)) {
 64:                 return prevSelected.filter((name) => name !== messageData.name);
 65:               } else {
 66:                 return [...prevSelected, messageData.name];
 67:               }
 68:             });
 69:             break;
 70: 
 71:           case "contentHeight":
 72:             const height = Number(messageData.height);
 73:             if (height > 0 && height !== webViewHeight) {
 74:               setWebViewHeight(height);
 75:             }
 76:             break;
 77: 
 78:           case "interactionStart":
 79:             if (onInteractionStart) {
 80:               onInteractionStart();
 81:             }
 82:             break;
 83: 
 84:           case "interactionEnd":
 85:             if (onInteractionEnd) {
 86:               onInteractionEnd();
 87:             }
 88:             break;
 89: 
 90:           default:
 91:             console.warn("Unhandled message type:", messageData.type);
 92:         }
 93:       } catch (error) {
 94:         console.error("Failed to parse message from WebView:", error);
 95:       }
 96:     },
 97:     [occupiedChairs, webViewHeight, onInteractionStart, onInteractionEnd]
 98:   );
 99: 
100:   const cancelSelection = () => {
101:     setSelectedChairs([]);
102:   };
103: 
104:   return (
105:     <View style={{ flex: 1 }}>
106:       {isServerReady ? (
107:         <Container height={webViewHeight}>
108:           <StyledWebView
109:             ref={webViewRef}
110:             source={{ uri: serverUrl }}
111:             scrollEnabled={false}
112:             cacheEnabled={false}
113:             cacheMode="LOAD_NO_CACHE"
114:             originWhitelist={["*"]}
115:             onError={(syntheticEvent) => {
116:               const { nativeEvent } = syntheticEvent;
117:               console.warn("WebView error: ", nativeEvent);
118:             }}
119:             onMessage={handleWebViewMessage}
120:             onLoadEnd={() => {
121:               sendChairsToWebView();
122:             }}
123:           />
124:         </Container>
125:       ) : (
126:         <View
127:           style={{ flex: 1, justifyContent: "center", alignItems: "center" }}
128:         >
129:           <ActivityIndicator size="large" color="#0000ff" />
130:         </View>
131:       )}
132:       <Footer>
133:         <SelectedText>
134:           Selected Chairs: {selectedChairs.join(", ") || "None"}
135:         </SelectedText>
136:         <CancelButton onPress={cancelSelection}>
137:           <CancelButtonText>Cancel Selection</CancelButtonText>
138:         </CancelButton>
139:       </Footer>
140:     </View>
141:   );
142: };
143: 
144: export default WebApp;

================
File: src/data/mockData.js
================
  1: export const restaurants = [
  2:   {
  3:     name: "La Piazza",
  4:     icon: "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
  5:     photos: [
  6:       "https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8Zm9vZHxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60",
  7:     ],
  8:     address: "123 Piazza Street",
  9:     isOpenNow: true,
 10:     rating: 4.5,
 11:     isClosedTemporarily: false,
 12:     placeId: "1",
 13:   },
 14:   {
 15:     name: "Sushi World",
 16:     icon: "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
 17:     photos: ["https://images.unsplash.com/photo-1553621042-f6e147245754"],
 18:     address: "456 Sushi Lane",
 19:     isOpenNow: true,
 20:     rating: 5,
 21:     isClosedTemporarily: false,
 22:     placeId: "2",
 23:   },
 24:   {
 25:     name: "Burger House",
 26:     icon: "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
 27:     photos: ["https://images.unsplash.com/photo-1550547660-d9450f859349"],
 28:     address: "789 Burger Blvd",
 29:     isOpenNow: false,
 30:     rating: 3.8,
 31:     isClosedTemporarily: false,
 32:     placeId: "3",
 33:   },
 34:   {
 35:     name: "Ocean Breeze Café",
 36:     icon: "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
 37:     photos: [
 38:       "https://images.unsplash.com/photo-1544511916-0148ccdeb877?auto=format&fit=crop&w=400&q=60",
 39:     ],
 40:     address: "101 Ocean Drive",
 41:     isOpenNow: true,
 42:     rating: 4.2,
 43:     isClosedTemporarily: false,
 44:     placeId: "4",
 45:   },
 46: ];
 47: 
 48: export const reservations = [
 49:   {
 50:     id: 1,
 51:     restaurant: restaurants[0],
 52:     date: "2024-04-01",
 53:     time: "7:00 PM",
 54:     seatsNumber: 4,
 55:     status: "Confirmed",
 56:   },
 57:   {
 58:     id: 2,
 59:     restaurant: restaurants[1],
 60:     date: "2024-03-15",
 61:     time: "6:30 PM",
 62:     seatsNumber: 2,
 63:     status: "Completed",
 64:   },
 65:   {
 66:     id: 3,
 67:     restaurant: restaurants[2],
 68:     date: "2024-03-20",
 69:     time: "6:00 PM",
 70:     seatsNumber: 3,
 71:     status: "Completed",
 72:   },
 73:   {
 74:     id: 4,
 75:     restaurant: restaurants[3],
 76:     date: "2024-03-28",
 77:     time: "6:00 PM",
 78:     seatsNumber: 3,
 79:     status: "Completed",
 80:   },
 81: ];
 82: 
 83: export const countryCodes = [
 84:   {
 85:     flag: "🇺🇸",
 86:     countryName: "United States",
 87:     code: "+1",
 88:   },
 89:   {
 90:     flag: "🇬🇧",
 91:     countryName: "United Kingdom",
 92:     code: "+44",
 93:   },
 94:   {
 95:     flag: "🇨🇦",
 96:     countryName: "Canada",
 97:     code: "+1",
 98:   },
 99:   {
100:     flag: "🇦🇺",
101:     countryName: "Australia",
102:     code: "+61",
103:   },
104:   {
105:     flag: "🇳🇿",
106:     countryName: "New Zealand",
107:     code: "+64",
108:   },
109:   {
110:     flag: "🇮🇳",
111:     countryName: "India",
112:     code: "+91",
113:   },
114:   {
115:     flag: "🇨🇳",
116:     countryName: "China",
117:     code: "+86",
118:   },
119:   {
120:     flag: "🇯🇵",
121:     countryName: "Japan",
122:     code: "+81",
123:   },
124: ];
125: 
126: export const users = [
127:   {
128:     username: "Vickers Zhu",
129:     email: "****@example.com",
130:     profileImage: require("../../assets/images/user_profile.jpg"),
131:     phoneNumber: "+81 **** ****",
132:   },
133: ];
134: 
135: export const tableStatuses = {
136:   "0-1": { id: 1, row: 0, col: 1, status: "empty" },
137:   "0-2": { id: 2, row: 0, col: 2, status: "empty" },
138:   "1-0": { id: 3, row: 1, col: 0, status: "empty" },
139:   "1-1": { id: 4, row: 1, col: 1, status: "occupied" },
140:   "1-2": { id: 5, row: 1, col: 2, status: "empty" },
141:   "1-3": { id: 6, row: 1, col: 3, status: "empty" },
142:   "2-0": { id: 7, row: 2, col: 0, status: "reserved" },
143:   "2-1": { id: 8, row: 2, col: 1, status: "empty" },
144:   "2-2": { id: 9, row: 2, col: 2, status: "empty" },
145:   "2-3": { id: 10, row: 2, col: 3, status: "occupied" },
146:   "3-1": { id: 11, row: 3, col: 1, status: "empty" },
147:   "3-2": { id: 12, row: 3, col: 2, status: "empty" },
148: };
149: 
150: export const seatingData = {
151:   tables: [
152:     {
153:       id: 1,
154:       chairs: [
155:         { id: "1A", status: "occupied" },
156:         { id: "1B", status: "empty" },
157:         { id: "1C", status: "empty" },
158:       ],
159:     },
160:     {
161:       id: 2,
162:       chairs: [
163:         { id: "2A", status: "empty" },
164:         { id: "2B", status: "empty" },
165:         { id: "2C", status: "reserved" },
166:         { id: "2D", status: "reserved" },
167:       ],
168:     },
169:     {
170:       id: 3,
171:       chairs: ["3A", "3B", "3C", "3D", "3E", "3F", "3G", "3H", "3I", "3J"].map(
172:         (chairId, index) => {
173:           if (index === 2 || index === 5) {
174:             return { id: chairId, status: "occupied" };
175:           }
176:           return { id: chairId, status: "empty" };
177:         }
178:       ),
179:     },
180:     {
181:       id: 4,
182:       chairs: [
183:         { id: "4A", status: "empty" },
184:         { id: "4B", status: "occupied" },
185:         { id: "4C", status: "empty" },
186:         { id: "4D", status: "empty" },
187:       ],
188:     },
189:     {
190:       id: 5,
191:       chairs: [
192:         { id: "5A", status: "empty" },
193:         { id: "5B", status: "reserved" },
194:         { id: "5C", status: "empty" },
195:       ],
196:     },
197:     {
198:       id: 6,
199:       chairs: [
200:         { id: "6A", status: "occupied" },
201:         { id: "6B", status: "occupied" },
202:       ],
203:     },
204:     {
205:       id: 7,
206:       chairs: ["7A", "7B", "7C", "7D", "7E", "7F", "7G", "7H", "7I", "7J"].map(
207:         (chairId, index) => {
208:           return index % 3 === 0
209:             ? { id: chairId, status: "reserved" }
210:             : { id: chairId, status: "empty" };
211:         }
212:       ),
213:     },
214:     {
215:       id: 8,
216:       chairs: [
217:         { id: "8A", status: "empty" },
218:         { id: "8B", status: "occupied" },
219:       ],
220:     },
221:     {
222:       id: 9,
223:       chairs: [
224:         { id: "9A", status: "empty" },
225:         { id: "9B", status: "empty" },
226:         { id: "9C", status: "reserved" },
227:       ],
228:     },
229:     {
230:       id: 10,
231:       chairs: [
232:         "10A",
233:         "10B",
234:         "10C",
235:         "10D",
236:         "10E",
237:         "10F",
238:         "10G",
239:         "10H",
240:         "10I",
241:         "10J",
242:       ].map((chairId, index) => {
243:         if (index === 4) return { id: chairId, status: "occupied" };
244:         if (index === 7) return { id: chairId, status: "reserved" };
245:         return { id: chairId, status: "empty" };
246:       }),
247:     },
248:     {
249:       id: 11,
250:       chairs: [
251:         { id: "11A", status: "empty" },
252:         { id: "11B", status: "empty" },
253:       ],
254:     },
255:     {
256:       id: 12,
257:       chairs: [
258:         { id: "12A", status: "occupied" },
259:         { id: "12B", status: "empty" },
260:         { id: "12C", status: "empty" },
261:       ],
262:     },
263:   ],
264:   counterSeats: Array.from({ length: 30 }, (_, i) => ({
265:     id: `C${i + 1}`,
266:     status: i % 5 === 0 ? "occupied" : i % 7 === 0 ? "reserved" : "empty",
267:   })),
268: };
269: 
270: export const merchantReservations = [
271:   {
272:     id: 1,
273:     customerName: "John Smith",
274:     people: 2,
275:     time: "11:00",
276:     duration: 90,
277:     tableId: 2,
278:     chairs: ["2A", "2B"],
279:     status: "confirmed",
280:     note: "Anniversary celebration",
281:   },
282:   {
283:     id: 2,
284:     customerName: "Emma Wilson",
285:     people: 4,
286:     time: "12:30",
287:     duration: 120,
288:     tableId: 4,
289:     chairs: ["4A", "4B", "4C", "4D"],
290:     status: "pending",
291:     note: "Window seat preferred",
292:   },
293:   {
294:     id: 3,
295:     customerName: "David Lee",
296:     people: 1,
297:     time: "13:00",
298:     duration: 60,
299:     tableId: 6,
300:     chairs: ["6A"],
301:     status: "confirmed",
302:     note: "",
303:   },
304:   {
305:     id: 4,
306:     customerName: "Sarah Johnson",
307:     people: 3,
308:     time: "15:30",
309:     duration: 90,
310:     tableId: 1,
311:     chairs: ["1A", "1B", "1C"],
312:     status: "confirmed",
313:     note: "Allergic to nuts",
314:   },
315:   {
316:     id: 5,
317:     customerName: "Michael Brown",
318:     people: 2,
319:     time: "18:00",
320:     duration: 120,
321:     tableId: 5,
322:     chairs: ["5A", "5B"],
323:     status: "confirmed",
324:     note: "Birthday celebration",
325:   },
326:   {
327:     id: 9,
328:     customerName: "Lisa Wong",
329:     people: 3,
330:     time: "17:00",
331:     duration: 90,
332:     tableId: 7,
333:     chairs: ["7A", "7D", "7G"],
334:     status: "confirmed",
335:     note: "Family dinner",
336:   },
337:   {
338:     id: 10,
339:     customerName: "Tom Garcia",
340:     people: 2,
341:     time: "19:00",
342:     duration: 60,
343:     tableId: 10,
344:     chairs: ["10E"],
345:     status: "confirmed",
346:     note: "Quick business dinner",
347:   },
348:   {
349:     id: 11,
350:     customerName: "Rachel Kim",
351:     people: 2,
352:     time: "16:30",
353:     duration: 90,
354:     tableId: 12,
355:     chairs: ["12A"],
356:     status: "confirmed",
357:     note: "Late lunch",
358:   },
359:   {
360:     id: 12,
361:     customerName: "Mark Rodriguez",
362:     people: 1,
363:     time: "20:00",
364:     duration: 60,
365:     tableId: 8,
366:     chairs: ["8B"],
367:     status: "confirmed",
368:     note: "Solo dinner",
369:   },
370: 
371:   {
372:     id: 6,
373:     customerName: "Alex Chen",
374:     people: 1,
375:     time: "10:00",
376:     duration: 60,
377:     counterSeatId: "C3",
378:     isCounterSeat: true,
379:     status: "confirmed",
380:     note: "Business breakfast",
381:   },
382:   {
383:     id: 7,
384:     customerName: "Jessica Miller",
385:     people: 1,
386:     time: "14:00",
387:     duration: 90,
388:     counterSeatId: "C7",
389:     isCounterSeat: true,
390:     status: "confirmed",
391:     note: "Solo diner",
392:   },
393:   {
394:     id: 8,
395:     customerName: "Robert Taylor",
396:     people: 1,
397:     time: "19:30",
398:     duration: 60,
399:     counterSeatId: "C15",
400:     isCounterSeat: true,
401:     status: "pending",
402:     note: "Late dinner",
403:   },
404:   {
405:     id: 13,
406:     customerName: "Emily Chen",
407:     people: 1,
408:     time: "11:30",
409:     duration: 45,
410:     counterSeatId: "C10",
411:     isCounterSeat: true,
412:     status: "confirmed",
413:     note: "Quick lunch",
414:   },
415:   {
416:     id: 14,
417:     customerName: "Alex Johnson",
418:     people: 1,
419:     time: "17:45",
420:     duration: 75,
421:     counterSeatId: "C20",
422:     isCounterSeat: true,
423:     status: "confirmed",
424:     note: "After-work drink",
425:   },
426: ];
427: 
428: 
429: export const timeSlots = [
430:   "09:00",
431:   "09:30",
432:   "10:00",
433:   "10:30",
434:   "11:00",
435:   "11:30",
436:   "12:00",
437:   "12:30",
438:   "13:00",
439:   "13:30",
440:   "14:00",
441:   "14:30",
442:   "15:00",
443:   "15:30",
444:   "16:00",
445:   "16:30",
446:   "17:00",
447:   "17:30",
448:   "18:00",
449:   "18:30",
450:   "19:00",
451:   "19:30",
452:   "20:00",
453:   "20:30",
454:   "21:00",
455:   "21:30",
456:   "22:00",
457:   "22:30",
458: ];

================
File: src/features/auth/components/CountryListItem.js
================
 1: import React from "react";
 2: import {
 3:   ListItemContainer,
 4:   CountryInfoContainer,
 5:   FlagText,
 6:   CountryNameText,
 7:   CodeText,
 8: } from "./CountryListItem.styles";
 9: import { TouchableOpacity } from "react-native";
10: 
11: const CountryListItem = ({ item, onPress }) => (
12:   <TouchableOpacity onPress={() => onPress(item)} activeOpacity={0.6}>
13:     <ListItemContainer>
14:       <CountryInfoContainer>
15:         <FlagText>{item.flag}</FlagText>
16:         <CountryNameText>{item.countryName}</CountryNameText>
17:       </CountryInfoContainer>
18:       <CodeText>{item.code}</CodeText>
19:     </ListItemContainer>
20:   </TouchableOpacity>
21: );
22: 
23: export default CountryListItem;

================
File: src/features/auth/components/CountryListItem.styles.js
================
 1: import styled from "styled-components/native";
 2: 
 3: export const ListItemContainer = styled.View`
 4:   flex-direction: row;
 5:   align-items: center;
 6:   padding: ${(props) => props.theme.space[3]};
 7:   background-color: ${(props) => props.theme.colors.bg.primary};
 8:   border-bottom-width: 0.5px;
 9:   border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
10:   margin-horizontal: ${(props) => props.theme.space[2]};
11: `;
12: 
13: export const CountryInfoContainer = styled.View`
14:   flex-direction: row;
15:   align-items: center;
16:   flex: 1;
17: `;
18: 
19: export const FlagText = styled.Text`
20:   font-size: ${(props) => props.theme.fontSizes.title};
21:   margin-right: ${(props) => props.theme.space[3]};
22: `;
23: 
24: export const CountryNameText = styled.Text`
25:   font-family: ${(props) => props.theme.fonts.body};
26:   font-size: ${(props) => props.theme.fontSizes.body};
27:   color: ${(props) => props.theme.colors.text.primary};
28: `;
29: 
30: export const CodeText = styled.Text`
31:   font-family: ${(props) => props.theme.fonts.body};
32:   font-size: ${(props) => props.theme.fontSizes.body};
33:   color: ${(props) => props.theme.colors.text.secondary};
34:   margin-left: ${(props) => props.theme.space[2]};
35:   flex-shrink: 0;
36: `;

================
File: src/features/auth/components/LoginDropDownPicker.js
================
 1: import React, { useState } from "react";
 2: import { View } from "react-native";
 3: import { StyledDropDownPicker } from "./LoginDropDownPicker.styles";
 4: import CountryListItem from "./CountryListItem";
 5: 
 6: const LoginDropDownPicker = ({
 7:   countryCodes,
 8:   selectedCountry,
 9:   setSelectedCountry,
10:   containerWidth,
11: }) => {
12:   const [open, setOpen] = useState(false);
13: 
14:   return (
15:     <StyledDropDownPicker
16:       open={open}
17:       value={selectedCountry}
18:       items={countryCodes.map((item) => ({
19:         label: `${item.flag} ${item.code}`,
20:         value: item.countryName,
21:         countryName: item.countryName,
22:         code: item.code,
23:         flag: item.flag,
24:       }))}
25:       setOpen={setOpen}
26:       setValue={(val) => {
27:         const selectedItem = countryCodes.find(
28:           (item) => item.countryName === val
29:         );
30:         setSelectedCountry(selectedItem?.countryName);
31:       }}
32:       placeholder="Select"
33:       listMode="SCROLLVIEW"
34:       renderListItem={({ item }) => (
35:         <CountryListItem
36:           item={item}
37:           onPress={(selectedItem) => {
38:             setSelectedCountry(selectedItem.countryName);
39:             setOpen(false);
40:           }}
41:         />
42:       )}
43:       containerWidth={containerWidth}
44:     />
45:   );
46: };
47: 
48: export default LoginDropDownPicker;

================
File: src/features/auth/components/LoginDropDownPicker.styles.js
================
 1: import styled from "styled-components/native";
 2: import DropDownPicker from "react-native-dropdown-picker";
 3: 
 4: export const StyledDropDownPicker = styled(DropDownPicker).attrs(
 5:   ({ theme, containerWidth }) => ({
 6:     style: {
 7:       backgroundColor: theme.colors.bg.secondary,
 8:       borderColor: theme.colors.ui.primary,
 9:       borderRadius: theme.space[3],
10:       minHeight: 50,
11:     },
12:     dropDownContainerStyle: {
13:       position: "absolute",
14:       width: containerWidth,
15:       backgroundColor: theme.colors.bg.primary,
16:       borderColor: theme.colors.ui.secondary,
17:     },
18:   })
19: )``;

================
File: src/features/auth/screens/LoginScreen.js
================
  1: import React, { useState } from "react";
  2: import { View } from "react-native";
  3: import { Formik } from "formik";
  4: import * as yup from "yup";
  5: import { countryCodes } from "../../../data/mockData";
  6: import {
  7:   Container,
  8:   TopRightContainer,
  9:   Logo,
 10:   InputContainer,
 11:   FlexContainer,
 12:   TextInput,
 13:   Button,
 14:   ButtonText,
 15:   LinkText,
 16:   ErrorText,
 17:   TitleText,
 18: } from "./LoginScreen.styles";
 19: import LoginDropDownPicker from "../components/LoginDropDownPicker";
 20: import SwitchContainer from "../../../components/Switch/Switch";
 21: import { useAuthentication } from "../../../services/AuthenticationContext";
 22: 
 23: 
 24: const validationSchema = yup.object().shape({
 25:   phone: yup
 26:     .string()
 27:     .required("Phone number is required")
 28:     .matches(/^\d+$/, "Phone number must contain only digits"),
 29:   password: yup
 30:     .string()
 31:     .min(6, "Password must be at least 6 characters")
 32:     .required("Password is required"),
 33: });
 34: 
 35: export const LoginScreen = ({ navigation }) => {
 36:   const [selectedCountry, setSelectedCountry] = useState("United States");
 37:   const [containerWidth, setContainerWidth] = useState(380);
 38: 
 39:   const [isMerchant, setIsMerchant] = useState(false);
 40:   const { onLogin, isLoading, error } = useAuthentication();
 41: 
 42:   const handleLogin = (values) => {
 43:     const selectedCode =
 44:       countryCodes.find((country) => country.countryName === selectedCountry)
 45:         ?.code || "+1";
 46:     onLogin(
 47:       `${selectedCode}${values.phone}`,
 48:       values.password,
 49:       isMerchant ? "merchant" : "customer"
 50:     );
 51:   };
 52: 
 53:   return (
 54:     <Container>
 55:       {}
 56:       <TopRightContainer style={{ transform: [{ scale: 0.8 }] }}>
 57:         <SwitchContainer
 58:           isOn={isMerchant}
 59:           setIsOn={setIsMerchant}
 60:           leftLabel="Customer"
 61:           rightLabel="Merchant"
 62:           variant="alternate"
 63:         />
 64:       </TopRightContainer>
 65: 
 66:       <Logo source={require("../../../../assets/images/splash copy.png")} />
 67:       <TitleText variant="title">Login</TitleText>
 68: 
 69:       <Formik
 70:         initialValues={{ phone: "", password: "" }}
 71:         validationSchema={validationSchema}
 72:         onSubmit={handleLogin}
 73:       >
 74:         {({
 75:           handleChange,
 76:           handleBlur,
 77:           handleSubmit,
 78:           values,
 79:           errors,
 80:           touched,
 81:           isValid,
 82:         }) => (
 83:           <>
 84:             <InputContainer
 85:               style={{ zIndex: 2000, elevation: 2000 }}
 86:               onLayout={(event) => {
 87:                 const { width } = event.nativeEvent.layout;
 88:                 setContainerWidth(width);
 89:               }}
 90:             >
 91:               <FlexContainer>
 92:                 <View
 93:                   style={{
 94:                     flex: 0.29,
 95:                     marginRight: "2%",
 96:                     zIndex: 9000,
 97:                     elevation: 9000,
 98:                   }}
 99:                 >
100:                   <LoginDropDownPicker
101:                     countryCodes={countryCodes}
102:                     selectedCountry={selectedCountry}
103:                     setSelectedCountry={setSelectedCountry}
104:                     containerWidth={containerWidth}
105:                   />
106:                 </View>
107:                 <View style={{ flex: 0.71 }}>
108:                   <TextInput
109:                     placeholder="Phone number"
110:                     placeholderTextColor="#9C9C9C"
111:                     keyboardType="number-pad"
112:                     onChangeText={handleChange("phone")}
113:                     onBlur={handleBlur("phone")}
114:                     value={values.phone}
115:                   />
116:                 </View>
117:               </FlexContainer>
118:               {errors.phone && touched.phone && (
119:                 <ErrorText>{errors.phone}</ErrorText>
120:               )}
121:             </InputContainer>
122: 
123:             <InputContainer>
124:               <TextInput
125:                 placeholder="Password"
126:                 placeholderTextColor="#9C9C9C"
127:                 secureTextEntry
128:                 autoCapitalize="none"
129:                 onChangeText={handleChange("password")}
130:                 onBlur={handleBlur("password")}
131:                 value={values.password}
132:               />
133:               {errors.password && touched.password && (
134:                 <ErrorText>{errors.password}</ErrorText>
135:               )}
136:             </InputContainer>
137: 
138:             <Button onPress={handleSubmit} disabled={!isValid}>
139:               <ButtonText> {isLoading ? "Logging in..." : "Login"} </ButtonText>
140:             </Button>
141:             {error && <ErrorText>{error}</ErrorText>}
142: 
143:             <LinkText onPress={() => console.log("Navigate to SignUp")}>
144:               Don't have an account? Sign Up
145:             </LinkText>
146:           </>
147:         )}
148:       </Formik>
149:     </Container>
150:   );
151: };

================
File: src/features/auth/screens/LoginScreen.styles.js
================
 1: import styled from "styled-components/native";
 2: import { CustomText } from "../../../components/CustomText/CustomText";
 3: 
 4: export const Container = styled.View`
 5:   flex: 1;
 6:   justify-content: flex-start;
 7:   align-items: center;
 8:   background-color: ${(props) => props.theme.colors.bg.primary};
 9:   padding: ${(props) => props.theme.space[4]};
10: `;
11: 
12: export const Logo = styled.Image`
13:   height: 100px;
14:   width: 100px;
15:   margin-bottom: ${(props) => props.theme.space[4]};
16: `;
17: 
18: export const InputContainer = styled.View`
19:   width: 100%;
20:   margin-bottom: ${(props) => props.theme.space[3]};
21: `;
22: 
23: export const TextInput = styled.TextInput`
24:   width: 100%;
25:   padding: ${(props) => props.theme.space[3]};
26:   font-size: ${(props) => props.theme.fontSizes.body};
27:   color: ${(props) => props.theme.colors.text.primary};
28:   background-color: ${(props) => props.theme.colors.bg.secondary};
29:   border-radius: ${(props) => props.theme.space[2]};
30: `;
31: 
32: export const FlexContainer = styled.View`
33:   z-index: 9999;
34:   elevation: 9999;
35:   flex-direction: row;
36:   align-items: center;
37:   width: 100%;
38: `;
39: 
40: export const Button = styled.TouchableOpacity`
41:   width: 90%;
42:   padding: ${(props) => props.theme.space[3]};
43:   background-color: ${(props) => props.theme.colors.ui.primary};
44:   border-radius: ${(props) => props.theme.space[1]};
45:   align-items: center;
46:   margin-top: ${(props) => props.theme.space[3]};
47: `;
48: 
49: export const ButtonText = styled(CustomText)`
50:   color: ${(props) => props.theme.colors.text.inverse};
51:   font-size: ${(props) => props.theme.fontSizes.body};
52: `;
53: 
54: export const LinkText = styled(CustomText)`
55:   margin-top: ${(props) => props.theme.space[2]};
56:   color: ${(props) => props.theme.colors.text.secondary};
57:   text-decoration: underline;
58:   font-size: ${(props) => props.theme.fontSizes.caption};
59: `;
60: 
61: export const ErrorText = styled(CustomText)`
62:   color: ${(props) => props.theme.colors.text.error};
63:   font-size: ${(props) => props.theme.fontSizes.caption};
64:   margin-top: ${(props) => props.theme.space[1]};
65: `;
66: 
67: export const TitleText = styled(CustomText)`
68:   color: ${(props) => props.theme.colors.text.primary};
69:   padding-bottom: ${(props) => props.theme.space[4]};
70:   font-size: ${(props) => props.theme.fontSizes.title};
71: `;
72: 
73: export const TopRightContainer = styled.View`
74:   position: absolute;
75:   top: ${(props) => props.theme.space[0]};
76:   right: ${(props) => props.theme.space[0]};
77:   z-index: 10000;
78: `;

================
File: src/features/customer/reservations/components/PastReservationCard.js
================
 1: import React from "react";
 2: import { View } from "react-native";
 3: import { useNavigation } from "@react-navigation/native";
 4: import styled, { useTheme } from "styled-components/native";
 5: 
 6: import { Spacer } from "../../../../components/Spacer/Spacer";
 7: import { CustomText } from "../../../../components/CustomText/CustomText";
 8: 
 9: import {
10:   PastReservationCardContainer,
11:   CircleImage,
12:   InfoContainer,
13:   InfoText,
14:   StatusText,
15:   ViewStoreButton,
16:   ViewStoreButtonText,
17: } from "./PastReservationCard.styles";
18: 
19: export const PastReservationCard = ({ reservation = {} }) => {
20:   const navigation = useNavigation();
21: 
22:   const {
23:     restaurant = {},
24:     date = "2024-04-01",
25:     status = "Completed",
26:   } = reservation;
27: 
28:   return (
29:     <PastReservationCardContainer>
30:       <CircleImage source={{ uri: restaurant.photos[0] }} />
31:       <InfoContainer>
32:         <CustomText variant="title">{restaurant.name}</CustomText>
33:         <Spacer position="top" size="small" />
34:         <InfoText>Reserved Date: {date}</InfoText>
35:         <Spacer position="top" size="small" />
36:         <StatusText>{status}</StatusText>
37:       </InfoContainer>
38:       <ViewStoreButton
39:         onPress={() => {
40:           navigation.navigate("RestaurantDetailScreen", {
41:             restaurant: restaurant,
42:           });
43:         }}
44:       >
45:         <ViewStoreButtonText>View Store</ViewStoreButtonText>
46:       </ViewStoreButton>
47:     </PastReservationCardContainer>
48:   );
49: };

================
File: src/features/customer/reservations/components/PastReservationCard.styles.js
================
 1: import styled from "styled-components/native";
 2: import { View, Text, Image, TouchableOpacity } from "react-native";
 3: 
 4: 
 5: 
 6: 
 7: 
 8: 
 9: export const PastReservationCardContainer = styled(View)`
10:   flex-direction: row;
11:   align-items: center;
12:   padding-left: ${(props) => props.theme.space[3]};
13:   padding-right: ${(props) => props.theme.space[3]};
14:   border-radius: 8px;
15:   margin-vertical: ${(props) => props.theme.space[2]};
16: `;
17: 
18: 
19: export const CircleImage = styled(Image)`
20:   width: 50px;
21:   height: 50px;
22:   border-radius: 25px;
23: `;
24: 
25: 
26: export const InfoContainer = styled(View)`
27:   flex: 1;
28:   margin-left: ${(props) => props.theme.space[3]};
29: `;
30: 
31: 
32: export const InfoText = styled(Text)`
33:   font-family: ${(props) => props.theme.fonts.body};
34:   font-size: ${(props) => props.theme.fontSizes.body};
35:   color: ${(props) => props.theme.colors.text.primary};
36: `;
37: 
38: 
39: export const StatusText = styled(Text)`
40:   font-family: ${(props) => props.theme.fonts.body};
41:   font-size: ${(props) => props.theme.fontSizes.body};
42:   color: ${(props) => props.theme.colors.text.primary};
43: `;
44: 
45: 
46: export const ViewStoreButton = styled(TouchableOpacity)`
47:   padding-vertical: ${(props) => props.theme.space[2]};
48:   padding-horizontal: ${(props) => props.theme.space[2]};
49:   background-color: ${(props) => props.theme.colors.ui.tertiary};
50:   border-radius: 25px;
51: `;
52: 
53: 
54: export const ViewStoreButtonText = styled(Text)`
55:   font-family: ${(props) => props.theme.fonts.body};
56:   font-size: ${(props) => props.theme.fontSizes.button};
57:   color: ${(props) => props.theme.colors.text.primary};
58:   text-align: center;
59: `;

================
File: src/features/customer/reservations/components/ReservationCard.js
================
 1: import React from "react";
 2: import { View } from "react-native";
 3: import { useNavigation } from "@react-navigation/native";
 4: import styled, { useTheme } from "styled-components/native";
 5: 
 6: import { Spacer } from "../../../../components/Spacer/Spacer";
 7: import { CustomText } from "../../../../components/CustomText/CustomText";
 8: 
 9: import {
10:   ReservationCardContainer,
11:   ReservationCardCover,
12:   Info,
13:   Section,
14:   ReservationDetails,
15:   DetailText,
16:   TrackButton,
17:   TrackButtonText,
18: } from "./ReservationCard.styles";
19: 
20: export const ReservationCard = ({ reservation = {} }) => {
21:   const navigation = useNavigation();
22:   const theme = useTheme();
23: 
24:   const {
25:     restaurant = {},
26:     date = "2024-04-01",
27:     time = "7:00 PM",
28:     seatsNumber = 4,
29:     status = "Confirmed",
30:   } = reservation;
31: 
32:   return (
33:     <ReservationCardContainer elevation={0}>
34:       <ReservationCardCover source={{ uri: restaurant.photos[0] }} />
35:       <Info>
36:         <CustomText variant="title">{restaurant.name}</CustomText>
37:         <Section>
38:           <ReservationDetails>
39:             <DetailText>Time: {time}</DetailText>
40:             <DetailText>Seats: {seatsNumber}</DetailText>
41:             <DetailText>Date: {date}</DetailText>
42:           </ReservationDetails>
43:           <TrackButton
44:             onPress={() => {
45:               navigation.navigate("RestaurantDetailScreen", {
46:                 restaurant: restaurant,
47:                 presentationStyle: "modal",
48:                 openReservationView: true,
49:               });
50:             }}
51:           >
52:             <TrackButtonText>Track</TrackButtonText>
53:           </TrackButton>
54:         </Section>
55:       </Info>
56:     </ReservationCardContainer>
57:   );
58: };

================
File: src/features/customer/reservations/components/ReservationCard.styles.js
================
 1: import styled from "styled-components/native";
 2: import { Image, View, TouchableOpacity, Text } from "react-native";
 3: import { Card } from "react-native-paper";
 4: 
 5: 
 6: 
 7: 
 8: 
 9: 
10: export const ReservationCardContainer = styled(Card)`
11:   background-color: ${(props) => props.theme.colors.bg.primary};
12:   width: 98%;
13:   align-self: center;
14:   border-radius: 8px;
15: 
16:   /* Remove elevation for Android */
17:   elevation: 0;
18: 
19:   /* Remove shadow for iOS */
20:   shadow-color: transparent;
21:   shadow-opacity: 0;
22:   shadow-radius: 0px;
23: `;
24: 
25: 
26: export const ReservationCardCover = styled(Card.Cover)`
27:   padding: ${(props) => props.theme.space[3]};
28:   background-color: ${(props) => props.theme.colors.bg.primary};
29:   height: 150px;
30:   border-top-left-radius: 8px;
31:   border-top-right-radius: 8px;
32: `;
33: 
34: 
35: export const Info = styled(View)`
36:   padding-left: ${(props) => props.theme.space[3]};
37:   padding-right: ${(props) => props.theme.space[3]};
38:   padding-bottom: 0;
39:   margin-top: -5px;
40: `;
41: 
42: 
43: export const Section = styled(View)`
44:   flex-direction: row;
45:   justify-content: space-between;
46:   align-items: center;
47:   margin-top: ${(props) => props.theme.space[2]};
48: `;
49: 
50: 
51: export const ReservationDetails = styled(View)`
52:   flex-direction: column;
53: `;
54: 
55: 
56: export const DetailText = styled(Text)`
57:   font-family: ${(props) => props.theme.fonts.body};
58:   font-size: ${(props) => props.theme.fontSizes.body};
59:   color: ${(props) => props.theme.colors.text.primary};
60: `;
61: 
62: 
63: export const TrackButton = styled(TouchableOpacity)`
64:   padding: ${(props) => props.theme.space[1]} ${(props) => props.theme.space[2]};
65:   background-color: ${(props) => props.theme.colors.ui.primary};
66:   border-radius: 25px;
67: `;
68: 
69: 
70: export const TrackButtonText = styled(Text)`
71:   padding: ${(props) => props.theme.space[2]};
72:   font-family: ${(props) => props.theme.fonts.body};
73:   font-size: ${(props) => props.theme.fontSizes.body};
74:   color: ${(props) => props.theme.colors.bg.primary};
75:   text-align: center;
76: `;

================
File: src/features/customer/reservations/screens/ReservationsScreen.js
================
 1: import React from "react";
 2: import styled from "styled-components/native";
 3: import { ScrollView } from "react-native";
 4: import { useNavigation } from "@react-navigation/native";
 5: 
 6: import { reservations } from "../../../../data/mockData";
 7: import { CustomText } from "../../../../components/CustomText/CustomText";
 8: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
 9: import { Spacer } from "../../../../components/Spacer/Spacer";
10: import { Separator } from "../../../../components/Separator/Separator";
11: import { ReservationCard } from "../components/ReservationCard";
12: import { PastReservationCard } from "../components/PastReservationCard";
13: 
14: const Container = styled(SafeArea)`
15:   flex: 1;
16:   background-color: ${(props) => props.theme.colors.bg.primary};
17:   padding: ${(props) => props.theme.space[3]};
18: `;
19: 
20: const SectionTitle = styled(CustomText)`
21:   margin-left: ${(props) => props.theme.space[2]};
22:   padding-left: ${(props) => props.theme.space[2]};
23: `;
24: 
25: export const ReservationsScreen = () => {
26:   const navigation = useNavigation();
27: 
28: 
29:   const currentReservations = reservations.filter(
30:     (reservation) =>
31:       reservation.status === "Confirmed" || reservation.status === "Pending"
32:   );
33:   const pastReservations = reservations.filter(
34:     (reservation) => reservation.status === "Completed"
35:   );
36: 
37:   return (
38:     <Container>
39:       <ScrollView>
40:         {}
41:         <Spacer position="top" size="small" />
42:         <SectionTitle variant="title">Current Reservations</SectionTitle>
43:         {currentReservations.map((reservation, index) => (
44:           <React.Fragment key={reservation.id}>
45:             <ReservationCard reservation={reservation} />
46:             {currentReservations.length > 2 &&
47:               index < currentReservations.length - 1 && (
48:                 <Separator type="full" />
49:               )}
50:           </React.Fragment>
51:         ))}
52:         <Separator type="full" />
53: 
54:         {}
55:         <SectionTitle variant="title">Past Reservations</SectionTitle>
56:         <Spacer position="top" size="small" />
57:         {pastReservations.map((reservation, index) => (
58:           <React.Fragment key={reservation.id}>
59:             <PastReservationCard reservation={reservation} />
60:             {index < pastReservations.length - 1 && (
61:               <Separator type="partial" />
62:             )}
63:           </React.Fragment>
64:         ))}
65:       </ScrollView>
66:     </Container>
67:   );
68: };

================
File: src/features/customer/restaurants/components/Others.js
================
 1: import React from "react";
 2: import { View, Text } from "react-native";
 3: import { List, Divider } from "react-native-paper";
 4: 
 5: const Others = () => (
 6:   <View>
 7:     <Text style={{ fontSize: 24, margin: 16 }}>Others</Text>
 8:     <List.Accordion
 9:       title="Others"
10:       left={(props) => <List.Icon {...props} icon="dots-horizontal" />}
11:     >
12:       {Array.from({ length: 50 }, (_, index) => (
13:         <List.Item key={index} title={`Other ${index + 1}`} />
14:       ))}
15:     </List.Accordion>
16:     <Divider />
17:   </View>
18: );
19: 
20: export default Others;

================
File: src/features/customer/restaurants/components/RestaurantInfoCard.js
================
 1: import React from "react";
 2: import { View } from "react-native";
 3: import { SvgXml } from "react-native-svg";
 4: 
 5: import { Spacer } from "../../../../components/Spacer/Spacer";
 6: import { CustomText } from "../../../../components/CustomText/CustomText";
 7: import { Favourite } from "../../../../components/Favourite/Favourite";
 8: 
 9: import star from "../../../../../assets/icons/star";
10: import open from "../../../../../assets/icons/open";
11: 
12: import {
13:   RestaurantCard,
14:   RestaurantCardCover,
15:   Address,
16:   Info,
17:   Section,
18:   Rating,
19:   OperationStatus,
20:   Icon,
21: } from "./RestaurantInfoCard.styles";
22: 
23: export const RestaurantInfoCard = ({ restaurant = {}, elevation = 5 }) => {
24:   const {
25:     name = "Sick Eats",
26:     icon = "https://maps.gstatic.com/mapfiles/place_api/icons/v1/png_71/lodging-71.png",
27:     photos = [
28:       "https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8Zm9vZHxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60",
29:     ],
30:     address = "100 random sick avenue",
31:     isOpenNow = true,
32:     rating = 4,
33:     isClosedTemporarily = true,
34:     placeId,
35:   } = restaurant;
36:   const ratingArray = Array.from(new Array(Math.floor(rating)));
37:   return (
38:     <RestaurantCard elevation={elevation}>
39:       <View>
40:         <Favourite restaurant={restaurant} />
41:         <RestaurantCardCover key={name} source={{ uri: photos[0] }} />
42:       </View>
43:       <Info>
44:         <CustomText variant="label">{name}</CustomText>
45:         <Section>
46:           <Rating>
47:             {ratingArray.map((_, i) => (
48:               <SvgXml
49:                 key={`star-${placeId}-${i}`}
50:                 xml={star}
51:                 width={20}
52:                 height={20}
53:               />
54:             ))}
55:           </Rating>
56:           <OperationStatus>
57:             {isClosedTemporarily && (
58:               <CustomText variant="error">CLOSED TEMPORARILY</CustomText>
59:             )}
60:             {isOpenNow && <SvgXml xml={open} width={20} height={20} />}
61:             <Spacer position="left" size="large">
62:               <Icon source={{ uri: icon }} />
63:             </Spacer>
64:           </OperationStatus>
65:         </Section>
66:         <Address>{address}</Address>
67:       </Info>
68:     </RestaurantCard>
69:   );
70: };

================
File: src/features/customer/restaurants/components/RestaurantInfoCard.styles.js
================
 1: import { Image, View, Text } from 'react-native';
 2: import { Card } from 'react-native-paper';
 3: import styled from 'styled-components/native';
 4: 
 5: export const RestaurantCard = styled(Card)`
 6:   background-color: ${(props) => props.theme.colors.bg.primary};
 7:   width: 95%;
 8:   align-self: center;
 9: `;
10: 
11: export const RestaurantCardCover = styled(Card.Cover)`
12:   padding: ${(props) => props.theme.space[3]};
13:   background-color: ${(props) => props.theme.colors.bg.primary};
14: `;
15: 
16: export const Address = styled(Text)`
17:   font-family: ${(props) => props.theme.fonts.body};
18:   font-size: ${(props) => props.theme.fontSizes.caption};
19: `;
20: 
21: export const Info = styled(View)`
22:   padding: ${(props) => props.theme.space[3]};
23: `;
24: 
25: export const Section = styled(View)`
26:   flex-direction: row;
27:   align-items: center;
28: `;
29: 
30: export const Rating = styled(View)`
31:   flex-direction: row;
32:   padding-top: ${(props) => props.theme.space[2]};
33:   padding-bottom: ${(props) => props.theme.space[2]};
34: `;
35: 
36: export const OperationStatus = styled(View)`
37:   flex: 1;
38:   flex-direction: row;
39:   justify-content: flex-end;
40: `;
41: 
42: export const Icon = styled(Image)`
43:   width: 15px;
44:   height: 15px;
45: `;

================
File: src/features/customer/restaurants/components/RestaurantList.styles.js
================
 1: import { FlatList } from "react-native";
 2: import { Button } from "react-native-paper";
 3: import styled from "styled-components/native";
 4: 
 5: import { colors } from "../../../../infrastructure/theme/colors";
 6: 
 7: export const RestaurantList = styled(FlatList).attrs({
 8:   contentContainerStyle: {
 9:     padding: 16,
10:   },
11: })``;
12: 
13: export const OrderButton = styled(Button).attrs({
14:   color: colors.brand.primary,
15: })`
16:   padding: ${(props) => props.theme.space[2]};
17:   width: 80%;
18:   align-self: center;
19: `;

================
File: src/features/customer/restaurants/components/RestaurantMenu.js
================
 1: import React from "react";
 2: import { View, Text } from "react-native";
 3: import { List, Divider } from "react-native-paper";
 4: 
 5: const RestaurantMenu = () => (
 6:   <View>
 7:     <Text style={{ fontSize: 24, margin: 16 }}>Menu</Text>
 8:     <List.Accordion
 9:       title="Menu"
10:       left={(props) => <List.Icon {...props} icon="bread-slice" />}
11:     >
12:       {Array.from({ length: 30 }, (_, index) => (
13:         <List.Item key={index} title={`Item ${index + 1}`} />
14:       ))}
15:     </List.Accordion>
16:     <Divider />
17:   </View>
18: );
19: 
20: export default RestaurantMenu;

================
File: src/features/customer/restaurants/components/RestaurantTabBar.js
================
 1: import React from "react";
 2: import styled from "styled-components/native";
 3: import { TabBar as OriginalTabBar } from "react-native-tab-view";
 4: 
 5: const CustomTabBarContainer = styled(OriginalTabBar).attrs((props) => ({
 6:   indicatorStyle: {
 7:     backgroundColor: props.theme.colors.text.primary,
 8:   },
 9:   labelStyle: {
10:     color: props.theme.colors.text.primary,
11:   },
12: }))`
13:   background-color: ${(props) => props.theme.colors.bg.primary};
14: `;
15: 
16: const TabBar = (props) => {
17:   const { routes, scrollToTab, setIndex } = props;
18: 
19:   return (
20:     <CustomTabBarContainer
21:       {...props}
22:       onTabPress={({ route, preventDefault }) => {
23:         preventDefault();
24:         const tabIndex = routes.findIndex((r) => r.key === route.key);
25:         scrollToTab(route.key, tabIndex);
26:       }}
27:     />
28:   );
29: };
30: 
31: export default TabBar;

================
File: src/features/customer/restaurants/components/Reviews.js
================
 1: import React from "react";
 2: import { View, Text } from "react-native";
 3: import { List, Divider } from "react-native-paper";
 4: 
 5: const Reviews = () => (
 6:   <View>
 7:     <Text style={{ fontSize: 24, margin: 16 }}>Reviews</Text>
 8:     <List.Accordion
 9:       title="Reviews"
10:       left={(props) => <List.Icon {...props} icon="star" />}
11:     >
12:       {Array.from({ length: 50 }, (_, index) => (
13:         <List.Item key={index} title={`Review ${index + 1}`} />
14:       ))}
15:     </List.Accordion>
16:     <Divider />
17:   </View>
18: );
19: 
20: export default Reviews;

================
File: src/features/customer/restaurants/components/Search.js
================
 1: import React, { useContext, useState, useEffect } from "react";
 2: import { View } from "react-native";
 3: import { Searchbar } from "react-native-paper";
 4: import styled from "styled-components/native";
 5: 
 6: const SearchContainer = styled(View)`
 7:   padding: ${(props) => props.theme.space[3]};
 8:   background-color: ${(props) => props.theme.colors.brand.secondary};
 9: `;
10: 
11: export const Search = () => {
12:   keyword = "TestKeyword";
13:   const [searchKeyword, setSearchKeyword] = useState(keyword);
14: 
15:   useEffect(() => {
16:     setSearchKeyword(keyword);
17:   }, [keyword]);
18: 
19:   return (
20:     <SearchContainer>
21:       <Searchbar
22:         placeholder="Search"
23:         value={searchKeyword}
24:         onChangeText={(text) => setSearchKeyword(text)}
25:         style={{ backgroundColor: "#ffffff" }}
26:       />
27:     </SearchContainer>
28:   );
29: };

================
File: src/features/customer/restaurants/components/TabNavigation.js
================
 1: import React from "react";
 2: import { TabView, SceneMap } from "react-native-tab-view";
 3: import { Animated } from "react-native";
 4: import RestaurantMenu from "./RestaurantMenu";
 5: import Reviews from "./Reviews";
 6: import Others from "./Others";
 7: import TabBar from "./RestaurantTabBar";
 8: 
 9: const renderSceneMap = {
10:   menu: RestaurantMenu,
11:   reviews: Reviews,
12:   others: Others,
13: };
14: 
15: const TabNavigation = ({
16:   index,
17:   setIndex,
18:   routes,
19:   layout,
20:   renderOpacity,
21:   scrollToTab,
22:   heights,
23: }) => {
24:   return (
25:     <Animated.View style={{ opacity: renderOpacity }}>
26:       <TabView
27:         navigationState={{ index, routes }}
28:         renderScene={SceneMap(renderSceneMap)}
29:         renderTabBar={(props) => (
30:           <TabBar
31:             {...props}
32:             routes={routes}
33:             scrollToTab={scrollToTab}
34:             setIndex={setIndex}
35:           />
36:         )}
37:         onIndexChange={setIndex}
38:         initialLayout={{ width: layout.width }}
39:       />
40:     </Animated.View>
41:   );
42: };
43: 
44: export default TabNavigation;

================
File: src/features/customer/restaurants/hooks/useReservationHandler.js
================
 1: import { useState } from "react";
 2: import { Animated } from "react-native";
 3: 
 4: const useReservationHandler = () => {
 5:   const [isReservation, setIsReservation] = useState(false);
 6:   const [isShowReservationContent, setIsShowReservationContent] =
 7:     useState(false);
 8:   const [opacity] = useState(new Animated.Value(1));
 9: 
10:   const animateAndSwitch = (newIsReservation) => {
11:     Animated.timing(opacity, {
12:       toValue: 0,
13:       duration: 200,
14:       useNativeDriver: true,
15:     }).start(() => {
16:       setIsReservation(newIsReservation);
17:       setTimeout(() => {
18:         setIsShowReservationContent(newIsReservation);
19:         Animated.timing(opacity, {
20:           toValue: 1,
21:           duration: 200,
22:           useNativeDriver: true,
23:         }).start();
24:       }, 200);
25:     });
26:   };
27: 
28:   return {
29:     isReservation,
30:     isShowReservationContent,
31:     opacity,
32:     animateAndSwitch,
33:   };
34: };
35: 
36: export default useReservationHandler;

================
File: src/features/customer/restaurants/hooks/useScrollHandler.js
================
 1: import { useState, useCallback } from "react";
 2: 
 3: const useScrollHandler = (routes, heights, setIndex) => {
 4:   const handleScroll = useCallback(
 5:     (event) => {
 6:       const scrollYValue = event.nativeEvent.contentOffset.y;
 7:       let accumulatedHeight = heights.restaurantInfoCard + heights.switch;
 8:       for (let i = 0; i < routes.length; i++) {
 9:         if (
10:           scrollYValue <
11:           accumulatedHeight + (heights.content[routes[i].key] || 0) / 2
12:         ) {
13:           setIndex(i);
14:           break;
15:         }
16:         accumulatedHeight += heights.content[routes[i].key] || 0;
17:       }
18:     },
19:     [routes, heights, setIndex]
20:   );
21: 
22:   return handleScroll;
23: };
24: 
25: export default useScrollHandler;

================
File: src/features/customer/restaurants/screens/RestaurantDetailScreen.js
================
  1: import React, { useState, useRef, useEffect } from "react";
  2: import { Animated, Dimensions, View } from "react-native";
  3: import styled from "styled-components/native";
  4: import { IconButton } from "react-native-paper";
  5: 
  6: import { CustomText } from "../../../../components/CustomText/CustomText";
  7: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
  8: import SwitchContainer from "../../../../components/Switch/Switch";
  9: import WebApp from "../../../../components/WebApp/WebApp";
 10: import ErrorBoundary from "../../../../components/ErrorBoundary/ErrorBoundary";
 11: 
 12: import { RestaurantInfoCard } from "../components/RestaurantInfoCard";
 13: import RestaurantMenu from "../components/RestaurantMenu";
 14: import Reviews from "../components/Reviews";
 15: import Others from "../components/Others";
 16: import TabNavigation from "../components/TabNavigation";
 17: import useScrollHandler from "../hooks/useScrollHandler";
 18: import useReservationHandler from "../hooks/useReservationHandler";
 19: 
 20: const Spacing = styled.View`
 21:   padding-bottom: ${(props) => props.theme.space[2]};
 22: `;
 23: 
 24: export const Header = styled.View`
 25:   flex-direction: row;
 26:   align-items: center;
 27:   justify-content: center;
 28:   padding: ${(props) => props.theme.space[2]};
 29:   position: relative;
 30:   background-color: ${(props) => props.theme.colors.bg.primary};
 31: `;
 32: 
 33: export const CloseButtonWrapper = styled.View`
 34:   position: absolute;
 35:   left: ${(props) => props.theme.space[2]};
 36: `;
 37: 
 38: const RestaurantDetailScreen = ({ route, navigation }) => {
 39:   const { restaurant, openReservationView } = route.params;
 40:   const layout = useRef(Dimensions.get("window")).current;
 41:   const [index, setIndex] = useState(0);
 42:   const [routes] = useState([
 43:     { key: "menu", title: "Menu" },
 44:     { key: "reviews", title: "Reviews" },
 45:     { key: "others", title: "Others" },
 46:   ]);
 47: 
 48:   const scrollY = useRef(new Animated.Value(0)).current;
 49:   const scrollViewRef = useRef(null);
 50: 
 51:   const [heights, setHeights] = useState({
 52:     restaurantInfoCard: 0,
 53:     switch: 0,
 54:     content: {},
 55:   });
 56: 
 57:   useEffect(() => {
 58:     if (openReservationView) {
 59:       animateAndSwitch(true);
 60:     }
 61:   }, [openReservationView]);
 62: 
 63:   const { isReservation, isShowReservationContent, opacity, animateAndSwitch } =
 64:     useReservationHandler();
 65: 
 66:   const [scrollEnabled, setScrollEnabled] = useState(true);
 67: 
 68:   const handleScroll = useScrollHandler(routes, heights, setIndex);
 69: 
 70:   const scrollToTab = (tabKey, newIndex) => {
 71:     let yPosition = heights.restaurantInfoCard + heights.switch;
 72:     for (let i = 0; i < routes.length; i++) {
 73:       if (routes[i].key === tabKey) break;
 74:       yPosition += heights.content[routes[i].key] || 0;
 75:     }
 76:     scrollViewRef.current.scrollTo({ y: yPosition, animated: true });
 77:     setIndex(newIndex);
 78:   };
 79: 
 80: 
 81:   const handleInteractionStart = () => {
 82:     setScrollEnabled(false);
 83:   };
 84: 
 85: 
 86:   const handleInteractionEnd = () => {
 87:     setScrollEnabled(true);
 88:   };
 89: 
 90:   return (
 91:     <SafeArea>
 92:       <Header>
 93:         {}
 94:         <CloseButtonWrapper>
 95:           <IconButton
 96:             icon="arrow-left"
 97:             size={24}
 98:             onPress={() => navigation.goBack()}
 99:             accessibilityLabel="Close"
100:           />
101:         </CloseButtonWrapper>
102: 
103:         {}
104:         <CustomText variant="title">RestaurantDetail</CustomText>
105:       </Header>
106:       <View style={{ flex: 1 }}>
107:         <Animated.ScrollView
108:           scrollEnabled={scrollEnabled}
109:           ref={scrollViewRef}
110:           scrollEventThrottle={16}
111:           onScroll={Animated.event(
112:             [{ nativeEvent: { contentOffset: { y: scrollY } } }],
113:             { listener: handleScroll, useNativeDriver: false }
114:           )}
115:           stickyHeaderIndices={isReservation ? [] : [2]}
116:         >
117:           <Spacing
118:             onLayout={(event) =>
119:               setHeights({
120:                 ...heights,
121:                 restaurantInfoCard: event.nativeEvent.layout.height,
122:               })
123:             }
124:           >
125:             <RestaurantInfoCard restaurant={restaurant} elevation={0} />
126:           </Spacing>
127: 
128:           <View
129:             onLayout={(event) =>
130:               setHeights({
131:                 ...heights,
132:                 switch: event.nativeEvent.layout.height,
133:               })
134:             }
135:           >
136:             <SwitchContainer
137:               isOn={isReservation}
138:               setIsOn={(newValue) => animateAndSwitch(newValue)}
139:               leftLabel="General"
140:               rightLabel="Reservation"
141:               variant="default"
142:             />
143:           </View>
144: 
145:           {!isShowReservationContent && !isReservation && (
146:             <TabNavigation
147:               index={index}
148:               setIndex={setIndex}
149:               routes={routes}
150:               layout={layout}
151:               renderOpacity={opacity}
152:               scrollToTab={scrollToTab}
153:               heights={heights}
154:             />
155:           )}
156: 
157:           {!isShowReservationContent &&
158:             !isReservation &&
159:             routes.map((route) => (
160:               <Animated.View key={route.key} style={{ opacity }}>
161:                 <View
162:                   onLayout={(event) =>
163:                     setHeights({
164:                       ...heights,
165:                       content: {
166:                         ...heights.content,
167:                         [route.key]: event.nativeEvent.layout.height,
168:                       },
169:                     })
170:                   }
171:                 >
172:                   {React.createElement(
173:                     route.key === "menu"
174:                       ? RestaurantMenu
175:                       : route.key === "reviews"
176:                       ? Reviews
177:                       : Others
178:                   )}
179:                 </View>
180:               </Animated.View>
181:             ))}
182: 
183:           {isShowReservationContent && isReservation && (
184:             <Animated.View style={{ opacity, flex: 1 }}>
185:               <ErrorBoundary>
186:                 <WebApp
187:                   onInteractionStart={handleInteractionStart}
188:                   onInteractionEnd={handleInteractionEnd}
189:                 />
190:               </ErrorBoundary>
191:             </Animated.View>
192:           )}
193:         </Animated.ScrollView>
194:       </View>
195:     </SafeArea>
196:   );
197: };
198: 
199: export { RestaurantDetailScreen };

================
File: src/features/customer/restaurants/screens/RestaurantsScreen.js
================
 1: import React, { useContext, useState } from "react";
 2: import { View, TouchableOpacity } from "react-native";
 3: import { ActivityIndicator, Colors } from "react-native-paper";
 4: import styled from "styled-components/native";
 5: 
 6: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
 7: import { FadeInView } from "../../../../components/FadeInView/FadeInView";
 8: import { Spacer } from "../../../../components/Spacer/Spacer";
 9: 
10: import { restaurants } from "../../../../data/mockData";
11: 
12: import { Search } from "../components/Search";
13: import { RestaurantList } from "../components/RestaurantList.styles";
14: import { RestaurantInfoCard } from "../components/RestaurantInfoCard";
15: 
16: const LoadingContainer = styled(View)`
17:   position: absolute;
18:   top: 50%;
19:   left: 50%;
20: `;
21: 
22: const Loading = styled(ActivityIndicator)`
23:   margin-left: -25px;
24: `;
25: 
26: export const RestaurantsScreen = ({ navigation }) => {
27:   const [isToggled, setIsToggled] = useState(false);
28: 
29:   return (
30:     <SafeArea>
31:       <Search
32:         isFavouritesToggled={isToggled}
33:         onFavouritesToggle={() => setIsToggled(!isToggled)}
34:       />
35:       <RestaurantList
36:         data={restaurants}
37:         renderItem={({ item }) => {
38:           return (
39:             <TouchableOpacity
40:               onPress={() =>
41:                 navigation.navigate("RestaurantDetailScreen", {
42:                   restaurant: item,
43:                 })
44:               }
45:             >
46:               <Spacer position="bottom" size="large">
47:                 <FadeInView>
48:                   <RestaurantInfoCard restaurant={item} />
49:                 </FadeInView>
50:               </Spacer>
51:             </TouchableOpacity>
52:           );
53:         }}
54:         keyExtractor={(item) => item.name}
55:       />
56:     </SafeArea>
57:   );
58: };

================
File: src/features/customer/settings/screens/AccountSettingsScreen.js
================
 1: import React, { useState } from "react";
 2: import { IconButton, Avatar } from "react-native-paper";
 3: 
 4: 
 5: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
 6: import { Separator } from "../../../../components/Separator/Separator";
 7: import { CustomText } from "../../../../components/CustomText/CustomText";
 8: 
 9: 
10: import { users } from "../../../../data/mockData";
11: 
12: 
13: import {
14:   SettingsContainer,
15:   Header,
16:   CloseButtonWrapper,
17:   SectionTitle,
18:   FrameLine,
19:   ProfileContainer,
20:   ItemContainer,
21:   ItemTextContainer,
22:   BoldText,
23:   InfoText,
24: } from "./AccountSettingsScreen.styles";
25: 
26: export const AccountSettingsScreen = ({ navigation }) => {
27:   const user = users[0];
28: 
29:   return (
30:     <SafeArea>
31:       <SettingsContainer>
32:         {}
33:         <Header>
34:           {}
35:           <CloseButtonWrapper>
36:             <IconButton
37:               icon="close"
38:               size={24}
39:               onPress={() => navigation.goBack()}
40:             />
41:           </CloseButtonWrapper>
42: 
43:           {}
44:           <CustomText variant="title">SeatMaster Account</CustomText>
45:         </Header>
46: 
47:         {}
48:         <FrameLine>
49:           <SectionTitle variant="h4">Account Info</SectionTitle>
50: 
51:           {}
52:           <ProfileContainer>
53:             <Avatar.Image size={80} source={user.profileImage} />
54:           </ProfileContainer>
55: 
56:           {}
57:           <SectionTitle variant="h5">Basic Info</SectionTitle>
58: 
59:           {}
60:           <ItemContainer>
61:             <ItemTextContainer>
62:               <BoldText variant="body">Name</BoldText>
63:               <InfoText variant="body">{user.username}</InfoText>
64:             </ItemTextContainer>
65:             <IconButton icon="chevron-right" size={24} />
66:           </ItemContainer>
67:           <Separator type="full" />
68: 
69:           {}
70:           <ItemContainer>
71:             <ItemTextContainer>
72:               <BoldText variant="body">Phone Number</BoldText>
73:               <InfoText variant="body">{user.phoneNumber}</InfoText>
74:             </ItemTextContainer>
75:             <IconButton icon="chevron-right" size={24} />
76:           </ItemContainer>
77:           <Separator type="full" />
78: 
79:           {}
80:           <ItemContainer>
81:             <ItemTextContainer>
82:               <BoldText variant="body">Email</BoldText>
83:               <InfoText variant="body">{user.email}</InfoText>
84:             </ItemTextContainer>
85:             <IconButton icon="chevron-right" size={24} />
86:           </ItemContainer>
87:           <Separator type="full" />
88:         </FrameLine>
89:       </SettingsContainer>
90:     </SafeArea>
91:   );
92: };

================
File: src/features/customer/settings/screens/AccountSettingsScreen.styles.js
================
 1: import styled from "styled-components/native";
 2: import { ScrollView, View } from "react-native";
 3: import { Avatar } from "react-native-paper";
 4: import { CustomText } from "../../../../components/CustomText/CustomText";
 5: 
 6: export const SettingsContainer = styled(ScrollView)`
 7:   background-color: ${(props) => props.theme.colors.bg.primary};
 8: `;
 9: 
10: export const Header = styled.View`
11:   flex-direction: row;
12:   align-items: center;
13:   justify-content: center;
14:   padding: ${(props) => props.theme.space[2]};
15:   position: relative;
16: `;
17: 
18: export const CloseButtonWrapper = styled.View`
19:   position: absolute;
20:   left: ${(props) => props.theme.space[2]};
21: `;
22: 
23: export const SectionTitle = styled(CustomText)`
24:   padding: ${(props) => props.theme.space[3]} ${(props) => props.theme.space[3]};
25:   font-weight: ${(props) => props.theme.fontWeights.bold};
26: `;
27: 
28: export const FrameLine = styled.View`
29:   border-width: 1px;
30:   border-color: rgba(0, 0, 0, 0.1);
31:   margin: ${(props) => props.theme.space[1]};
32:   border-radius: 8px;
33: `;
34: 
35: export const ProfileContainer = styled.View`
36:   flex-direction: row;
37:   align-items: center;
38:   padding: ${(props) => props.theme.space[3]};
39: `;
40: 
41: export const ItemContainer = styled.View`
42:   flex-direction: row;
43:   justify-content: space-between;
44:   align-items: center;
45:   padding-vertical: ${(props) => props.theme.space[0]};
46:   padding-horizontal: ${(props) => props.theme.space[3]};
47: `;
48: 
49: export const ItemTextContainer = styled.View`
50:   flex-direction: column;
51: `;
52: 
53: export const BoldText = styled(CustomText)`
54:   font-weight: ${(props) => props.theme.fontWeights.bold};
55: `;
56: 
57: export const InfoText = styled(CustomText)`
58:   color: ${(props) => props.theme.colors.text.secondary};
59: `;

================
File: src/features/customer/settings/screens/SettingsScreen.js
================
  1: import React from "react";
  2: import { TouchableOpacity } from "react-native";
  3: import { List, Avatar } from "react-native-paper";
  4: 
  5: import { useAuthentication } from "../../../../services/AuthenticationContext";
  6: 
  7: 
  8: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
  9: import { Spacer } from "../../../../components/Spacer/Spacer";
 10: import { CustomText } from "../../../../components/CustomText/CustomText";
 11: 
 12: 
 13: import { users } from "../../../../data/mockData";
 14: 
 15: 
 16: import {
 17:   SettingsContainer,
 18:   ProfileContainer,
 19:   UserInfoContainer,
 20:   AvatarContainer,
 21:   SettingsItem,
 22:   EmailText,
 23: } from "./SettingsScreen.styles";
 24: import { use } from "react";
 25: 
 26: export const SettingsScreen = ({ navigation }) => {
 27:   const { onLogout } = useAuthentication();
 28:   const user = users[0];
 29: 
 30:   return (
 31:     <SafeArea>
 32:       <SettingsContainer>
 33:         <ProfileContainer>
 34:           <UserInfoContainer>
 35:             {}
 36:             <CustomText variant="h3">{user.username}</CustomText>
 37:             <Spacer position="top" size="small" />
 38:             {}
 39:             <EmailText variant="caption">{user.email}</EmailText>
 40:           </UserInfoContainer>
 41:           <AvatarContainer>
 42:             {}
 43:             <TouchableOpacity onPress={() => {}}>
 44:               <Avatar.Image
 45:                 size={100}
 46:                 source={user.profileImage}
 47:                 backgroundColor={(props) => props.theme.colors.brand.primary}
 48:               />
 49:             </TouchableOpacity>
 50:           </AvatarContainer>
 51:         </ProfileContainer>
 52: 
 53:         {}
 54:         <List.Section>
 55:           <SettingsItem
 56:             title="Account Settings"
 57:             left={(props) => (
 58:               <List.Icon
 59:                 {...props}
 60:                 color={(props) => props.theme.colors.text.primary}
 61:                 icon="account-cog"
 62:               />
 63:             )}
 64:             onPress={() => navigation.navigate("AccountSettings")}
 65:           />
 66:           <SettingsItem
 67:             title="Reservations"
 68:             left={(props) => (
 69:               <List.Icon
 70:                 {...props}
 71:                 color={(props) => props.theme.colors.text.primary}
 72:                 icon="book"
 73:               />
 74:             )}
 75:             onPress={() => navigation.navigate("Reservations")}
 76:           />
 77:           <SettingsItem
 78:             title="Payment Methods"
 79:             left={(props) => (
 80:               <List.Icon
 81:                 {...props}
 82:                 color={(props) => props.theme.colors.text.primary}
 83:                 icon="credit-card"
 84:               />
 85:             )}
 86:             onPress={() => navigation.navigate("PaymentMethods")}
 87:           />
 88:           <SettingsItem
 89:             title="Help"
 90:             left={(props) => (
 91:               <List.Icon
 92:                 {...props}
 93:                 color={(props) => props.theme.colors.text.primary}
 94:                 icon="help-circle"
 95:               />
 96:             )}
 97:           />
 98:           <SettingsItem
 99:             title="Logout"
100:             left={(props) => (
101:               <List.Icon
102:                 {...props}
103:                 color={(props) => props.theme.colors.text.primary}
104:                 icon="logout"
105:               />
106:             )}
107: 
108:             onPress={() => {
109:               onLogout();
110:             }}
111:           />
112:         </List.Section>
113:       </SettingsContainer>
114:     </SafeArea>
115:   );
116: };

================
File: src/features/customer/settings/screens/SettingsScreen.styles.js
================
 1: import styled from "styled-components/native";
 2: import { ScrollView, View, TouchableOpacity } from "react-native";
 3: import { List } from "react-native-paper";
 4: import { CustomText } from "../../../../components/CustomText/CustomText";
 5: 
 6: export const SafeArea = styled.View`
 7:   flex: 1;
 8:   background-color: ${(props) => props.theme.colors.bg.primary};
 9: `;
10: 
11: export const SettingsContainer = styled(ScrollView)`
12:   background-color: ${(props) => props.theme.colors.bg.primary};
13: `;
14: 
15: export const ProfileContainer = styled(View)`
16:   flex-direction: row;
17:   justify-content: space-between;
18:   align-items: center;
19:   padding: ${(props) => props.theme.space[3]};
20: `;
21: 
22: export const UserInfoContainer = styled(View)`
23:   flex: 1;
24:   margin-right: ${(props) => props.theme.space[2]};
25:   align-items: flex-start;
26: `;
27: 
28: export const AvatarContainer = styled(View)`
29:   align-items: center;
30:   justify-content: center;
31: `;
32: 
33: export const SettingsItem = styled(List.Item)`
34:   padding: ${(props) => props.theme.space[3]};
35: `;
36: 
37: export const EmailText = styled(CustomText)`
38:   margin-left: ${(props) => props.theme.space[1]};
39: `;

================
File: src/features/merchant/dashboard/components/CounterSeats.js
================
 1: import React from "react";
 2: import styled from "styled-components/native";
 3: import { CustomText } from "../../../../components/CustomText/CustomText";
 4: import { SharedChairsRow, SharedChairItem } from "./SharedTableStyles.styles";
 5: 
 6: const CounterContainer = styled.View`
 7:   margin-bottom: ${({ theme }) => theme.space[1]};
 8:   padding: ${({ theme }) => theme.space[2]};
 9: `;
10: 
11: export const CounterSeats = ({ counterSeats }) => {
12:   return (
13:     <CounterContainer>
14:       <CustomText variant="label">Counter</CustomText>
15:       <SharedChairsRow>
16:         {counterSeats.map((seat) => {
17:           const seatData =
18:             typeof seat === "object" ? seat : { id: seat, status: "empty" };
19:           return (
20:             <SharedChairItem
21:               key={seatData.id}
22:               status={seatData.status || "empty"}
23:               style={{ width: 40, height: 40, margin: 4 }}
24:             >
25:               <CustomText variant="body">{seatData.id}</CustomText>
26:             </SharedChairItem>
27:           );
28:         })}
29:       </SharedChairsRow>
30:     </CounterContainer>
31:   );
32: };
33: 
34: export default CounterSeats;

================
File: src/features/merchant/dashboard/components/SeatView.js
================
 1: import React from "react";
 2: import { ScrollView } from "react-native";
 3: import styled from "styled-components/native";
 4: import { CustomText } from "../../../../components/CustomText/CustomText";
 5: import { Separator } from "../../../../components/Separator/Separator";
 6: import {
 7:   SharedTableItem,
 8:   SharedChairItem,
 9:   SharedChairsRow,
10:   VerticalSeparator as DefaultVerticalSeparator,
11: } from "./SharedTableStyles.styles";
12: import CounterSeats from "./CounterSeats";
13: 
14: const RowContainer = styled.View`
15:   flex-direction: row;
16:   align-items: center;
17:   margin-bottom: ${({ theme }) => theme.space[2]};
18: `;
19: 
20: const TableColumn = styled.View`
21:   width: 60px;
22:   align-items: center;
23: `;
24: 
25: const ChairsColumn = styled.View`
26:   flex: 1;
27:   padding-left: ${({ theme }) => theme.space[2]};
28: `;
29: 
30: const VerticalSeparator = styled(DefaultVerticalSeparator)`
31:   height: 60px;
32: `;
33: 
34: export const SeatView = ({ seatingData, tableStatuses }) => {
35:   return (
36:     <ScrollView>
37:       <CounterSeats counterSeats={seatingData.counterSeats} />
38:       <Separator type="full" />
39:       {seatingData.tables.map((table) => {
40:         const tableStatus = Object.values(tableStatuses || {}).find(
41:           (statusObj) => statusObj.id === table.id
42:         );
43:         return (
44:           <RowContainer key={table.id}>
45:             <TableColumn>
46:               <SharedTableItem
47:                 status={tableStatus ? tableStatus.status : "empty"}
48:                 style={{ width: 60, height: 60 }}
49:               >
50:                 <CustomText variant="label">{table.id}</CustomText>
51:               </SharedTableItem>
52:             </TableColumn>
53:             <VerticalSeparator />
54:             <ChairsColumn>
55:               <SharedChairsRow>
56:                 {table.chairs.map((chair) => {
57:                   const chairData =
58:                     typeof chair === "object"
59:                       ? chair
60:                       : { id: chair, status: "empty" };
61:                   return (
62:                     <SharedChairItem
63:                       key={chairData.id}
64:                       status={chairData.status || "empty"}
65:                       style={{ width: 40, height: 40, margin: 4 }}
66:                     >
67:                       <CustomText variant="body">{chairData.id}</CustomText>
68:                     </SharedChairItem>
69:                   );
70:                 })}
71:               </SharedChairsRow>
72:             </ChairsColumn>
73:           </RowContainer>
74:         );
75:       })}
76:     </ScrollView>
77:   );
78: };

================
File: src/features/merchant/dashboard/components/SharedTableStyles.styles.js
================
 1: import styled from "styled-components/native";
 2: import { TouchableOpacity, View } from "react-native";
 3: 
 4: export const SharedTableItem = styled(TouchableOpacity)`
 5:   background-color: ${({ status, theme }) =>
 6:     status === "occupied"
 7:       ? "#ff4d4d"
 8:       : status === "reserved"
 9:       ? "#ffd11a"
10:       : "#b3ffb3"};
11:   padding: 8px;
12:   border-radius: 8px;
13:   margin-bottom: ${({ theme }) => theme.space[2]};
14:   justify-content: center;
15:   align-items: center;
16:   min-width: 60px;
17:   min-height: 60px;
18: `;
19: 
20: 
21: export const SharedChairItem = styled(TouchableOpacity)`
22:   background-color: ${({ status, theme }) =>
23:     status === "occupied"
24:       ? "#ff4d4d"
25:       : status === "reserved"
26:       ? "#ffd11a"
27:       : "#b3ffb3"};
28:   padding: 4px;
29:   border-radius: 4px;
30:   margin: 4px;
31:   justify-content: center;
32:   align-items: center;
33:   min-width: 40px;
34:   min-height: 40px;
35: `;
36: 
37: export const SharedChairsRow = styled(View)`
38:   flex-direction: row;
39:   flex-wrap: wrap;
40: `;
41: 
42: export const VerticalSeparator = styled(View)`
43:   width: 1px;
44:   background-color: rgba(0, 0, 0, 0.1);
45:   margin-horizontal: ${({ theme }) => theme.space[2]};
46:   align-self: stretch;
47: `;

================
File: src/features/merchant/dashboard/components/TableMatrix.js
================
 1: import React, { useState } from "react";
 2: import { View, Text, useWindowDimensions } from "react-native";
 3: import styled from "styled-components/native";
 4: import { SharedTableItem } from "./SharedTableStyles.styles";
 5: 
 6: const Row = styled.View`
 7:   flex-direction: row;
 8:   margin-bottom: ${({ theme }) => theme.space[2]};
 9: `;
10: 
11: const FIXED_BUTTON_SIZE = 60;
12: const FIXED_MARGIN_RIGHT = 16;
13: 
14: export const TableMatrix = ({
15:   tableStatuses: initialTableStatuses,
16:   onTablePress,
17: }) => {
18:   const [tableStatuses, setTableStatuses] = useState(initialTableStatuses);
19:   const { width: screenWidth } = useWindowDimensions();
20: 
21:   // Calculate maximum rows and columns based on tableStatuses keys (assumed format "row-col")
22:   const entries = Object.values(tableStatuses);
23:   const maxRow =
24:     entries.length > 0 ? Math.max(...entries.map((e) => e.row)) : 0;
25:   const maxCol =
26:     entries.length > 0 ? Math.max(...entries.map((e) => e.col)) : 0;
27:   const rows = maxRow + 1;
28:   const columns = maxCol + 1;
29: 
30:   const horizontalPadding = 32;
31:   const totalRequiredWidth =
32:     columns * FIXED_BUTTON_SIZE + (columns - 1) * FIXED_MARGIN_RIGHT;
33:   const availableWidth = screenWidth - horizontalPadding;
34:   const scale =
35:     totalRequiredWidth > availableWidth
36:       ? availableWidth / totalRequiredWidth
37:       : 1;
38: 
39:   const buttonSize = FIXED_BUTTON_SIZE * scale;
40:   const marginRight = FIXED_MARGIN_RIGHT * scale;
41: 
42:   const handlePress = (row, col, currentStatus) => {
43:     const key = `${row}-${col}`;
44:     const newStatus = currentStatus === "empty" ? "occupied" : "empty";
45:     console.log(
46:       `Table pressed: key=${key}, oldStatus=${currentStatus}, newStatus=${newStatus}`
47:     );
48:     setTableStatuses((prev) => ({
49:       ...prev,
50:       [key]: { id: prev[key]?.id || key, row, col, status: newStatus },
51:     }));
52:     if (onTablePress) {
53:       onTablePress(key, newStatus);
54:     }
55:   };
56: 
57:   return (
58:     <View style={{ padding: 16 }}>
59:       {Array.from({ length: rows }).map((_, rowIndex) => (
60:         <Row key={rowIndex}>
61:           {Array.from({ length: columns }).map((_, colIndex) => {
62:             const key = `${rowIndex}-${colIndex}`;
63:             const entry = tableStatuses[key];
64:             if (entry) {
65:               return (
66:                 <SharedTableItem
67:                   key={entry.id}
68:                   status={entry.status}
69:                   onPress={() => handlePress(rowIndex, colIndex, entry.status)}
70:                   style={{ width: buttonSize, height: buttonSize, marginRight }}
71:                 >
72:                   <Text>{entry.id}</Text>
73:                 </SharedTableItem>
74:               );
75:             } else {
76:               return (
77:                 <View
78:                   key={key}
79:                   style={{ width: buttonSize, height: buttonSize, marginRight }}
80:                 />
81:               );
82:             }
83:           })}
84:         </Row>
85:       ))}
86:     </View>
87:   );
88: };

================
File: src/features/merchant/dashboard/screens/MerchantHomeScreen.js
================
  1: import React, { useState, useEffect, useRef } from "react";
  2: import { Animated, ScrollView, View } from "react-native";
  3: import styled from "styled-components/native";
  4: import SwitchContainer from "../../../../components/Switch/Switch";
  5: import { Separator } from "../../../../components/Separator/Separator";
  6: import { TimeScroll } from "../../../../components/TimeScroll/TimeScroll";
  7: 
  8: import { tableStatuses, seatingData } from "../../../../data/mockData";
  9: 
 10: import { TableMatrix } from "../components/TableMatrix";
 11: import { SeatView } from "../components/SeatView";
 12: import CounterSeats from "../components/CounterSeats";
 13: 
 14: const Container = styled.View`
 15:   flex: 1;
 16:   background-color: ${(props) => props.theme.colors.bg.primary};
 17:   padding: 16px;
 18:   position: relative;
 19: `;
 20: 
 21: const MatrixWrapper = styled.View`
 22:   flex: 1;
 23:   margin-top: 16px;
 24: `;
 25: 
 26: const AnimatedTimeScrollContainer = Animated.createAnimatedComponent(
 27:   styled.View`
 28:     position: absolute;
 29:     right: 16px;
 30:     top: 0;
 31:     bottom: 0;
 32:     justify-content: center;
 33:     align-items: center;
 34:   `
 35: );
 36: 
 37: export const MerchantHomeScreen = () => {
 38:   const [times, setTimes] = useState(generateTimes(5));
 39:   const [selectedTime, setSelectedTime] = useState(times[0]);
 40:   const [isSeatMode, setIsSeatMode] = useState(false);
 41:   const [tableStatusesState, setTableStatusesState] = useState(tableStatuses);
 42:   const overlayOpacity = useRef(new Animated.Value(1)).current;
 43: 
 44:   function generateTimes(count) {
 45:     let timesArray = [];
 46:     let current = new Date();
 47:     current.setSeconds(0);
 48:     current.setMilliseconds(0);
 49:     for (let i = 0; i < count; i++) {
 50:       const hours = current.getHours();
 51:       const minutes = current.getMinutes();
 52:       const timeString = `${hours.toString().padStart(2, "0")}:${minutes
 53:         .toString()
 54:         .padStart(2, "0")}`;
 55:       timesArray.push(timeString);
 56:       current.setHours(current.getHours() + 1);
 57:     }
 58:     return timesArray;
 59:   }
 60: 
 61:   useEffect(() => {
 62:     const updateTimes = () => {
 63:       const newTimes = generateTimes(5);
 64:       setTimes(newTimes);
 65:       setSelectedTime(newTimes[0]);
 66:     };
 67:     updateTimes();
 68:     const interval = setInterval(updateTimes, 6000);
 69:     return () => clearInterval(interval);
 70:   }, []);
 71: 
 72:   const handleTimeChange = (time) => {
 73:     setSelectedTime(time);
 74:     console.log("Time changed to:", time);
 75:   };
 76: 
 77:   const handleTablePress = (key, status) => {
 78:     const newStatus = status === "empty" ? "occupied" : "empty";
 79:     console.log(`Table ${key} changed from ${status} to ${newStatus}`);
 80:     setTableStatusesState((prev) => ({
 81:       ...prev,
 82:       [key]: { ...prev[key], status: newStatus },
 83:     }));
 84:   };
 85: 
 86:   const onScrollBegin = () => {
 87:     Animated.timing(overlayOpacity, {
 88:       toValue: 0,
 89:       duration: 100,
 90:       useNativeDriver: true,
 91:     }).start();
 92:   };
 93: 
 94:   const onScrollEnd = () => {
 95:     Animated.timing(overlayOpacity, {
 96:       toValue: 1,
 97:       duration: 100,
 98:       useNativeDriver: true,
 99:     }).start();
100:   };
101: 
102:   return (
103:     <Container>
104:       <SwitchContainer
105:         isOn={isSeatMode}
106:         setIsOn={setIsSeatMode}
107:         leftLabel="Tables"
108:         rightLabel="Seats"
109:         variant="default"
110:       />
111:       <MatrixWrapper>
112:         {isSeatMode ? (
113:           <Animated.ScrollView
114:             onScrollBeginDrag={onScrollBegin}
115:             onScrollEndDrag={onScrollEnd}
116:             scrollEventThrottle={16}
117:           >
118:             <SeatView
119:               seatingData={seatingData}
120:               tableStatuses={tableStatusesState}
121:             />
122:           </Animated.ScrollView>
123:         ) : (
124:           <>
125:             <TableMatrix
126:               tableStatuses={tableStatusesState}
127:               onTablePress={handleTablePress}
128:             />
129:             <Separator type="full" />
130:             <CounterSeats counterSeats={seatingData.counterSeats} />
131:           </>
132:         )}
133:       </MatrixWrapper>
134:       <AnimatedTimeScrollContainer style={{ opacity: overlayOpacity }}>
135:         <TimeScroll
136:           times={times}
137:           selectedTime={selectedTime}
138:           onTimeChange={handleTimeChange}
139:         />
140:       </AnimatedTimeScrollContainer>
141:     </Container>
142:   );
143: };

================
File: src/features/merchant/reservations/components/ReservationComponents.js
================
  1: import React from "react";
  2: import { TouchableOpacity, View } from "react-native";
  3: import styled from "styled-components/native";
  4: import { CustomText } from "../../../../components/CustomText/CustomText";
  5: import {
  6:   SharedTableItem,
  7:   SharedChairItem,
  8: } from "../../dashboard/components/SharedTableStyles.styles";
  9: 
 10: 
 11: const ReservationBlockStyled = styled(TouchableOpacity)`
 12:   position: absolute;
 13:   left: ${(props) => props.left}px;
 14:   top: ${(props) => props.top}px;
 15:   width: ${(props) => props.width}px;
 16:   height: ${(props) => props.height}px;
 17:   background-color: ${(props) =>
 18:     props.status === "confirmed"
 19:       ? "#b3ffb3"
 20:       : props.status === "pending"
 21:       ? "#ffd11a"
 22:       : "#ff4d4d"};
 23:   border-radius: 5px;
 24:   padding: ${(props) => props.theme.space[1]};
 25:   justify-content: space-between;
 26:   z-index: 1;
 27:   box-sizing: border-box;
 28:   ${(props) =>
 29:     props.isSelected &&
 30:     `
 31:     border-width: 2px;
 32:     border-color: blue;
 33:   `}
 34: `;
 35: 
 36: const ReservationName = styled(CustomText)`
 37:   font-size: ${(props) => props.theme.fontSizes.caption};
 38:   font-weight: ${(props) => props.theme.fontWeights.bold};
 39: `;
 40: 
 41: const ReservationDetails = styled(CustomText)`
 42:   font-size: ${(props) => props.theme.fontSizes.caption};
 43: `;
 44: 
 45: const TableColumn = styled.View`
 46:   width: ${(props) => props.width}px;
 47:   align-items: center;
 48:   border-left-width: 1px;
 49:   border-left-color: ${(props) => props.theme.colors.ui.tertiary};
 50:   padding-horizontal: ${(props) => props.theme.space[2]};
 51:   padding-vertical: ${(props) => props.theme.space[2]};
 52: `;
 53: 
 54: const TableItem = styled.View`
 55:   align-items: center;
 56: `;
 57: 
 58: const ChairsGrid = styled.View`
 59:   flex-direction: column;
 60:   justify-content: center;
 61:   width: 58px;
 62:   margin-top: ${(props) => props.theme.space[1]};
 63: `;
 64: 
 65: const ChairRow = styled.View`
 66:   flex-direction: row;
 67:   justify-content: center;
 68:   margin-top: 1px;
 69: `;
 70: 
 71: const ChairItem = styled(SharedChairItem)`
 72:   width: 22px;
 73:   height: 22px;
 74:   margin: 2px;
 75:   justify-content: center;
 76:   align-items: center;
 77: `;
 78: 
 79: const ShowMoreButton = styled(TouchableOpacity)`
 80:   background-color: ${(props) => props.theme.colors.ui.tertiary};
 81:   padding-horizontal: ${(props) => props.theme.space[1]};
 82:   padding-vertical: 2px;
 83:   border-radius: 4px;
 84:   margin-top: 4px;
 85:   align-items: center;
 86: `;
 87: 
 88: const ButtonText = styled(CustomText)`
 89:   font-size: ${(props) => props.theme.fontSizes.caption};
 90: `;
 91: 
 92: const CounterSeatHeaderContainer = styled.View`
 93:   align-items: center;
 94:   justify-content: center;
 95:   margin-top: 40px;
 96: `;
 97: 
 98: const CounterSeatTitle = styled(CustomText)`
 99:   font-size: ${(props) => props.theme.fontSizes.caption};
100:   font-weight: ${(props) => props.theme.fontWeights.bold};
101:   margin-bottom: ${(props) => props.theme.space[1]};
102: `;
103: 
104: const ReservationPanelStyled = styled.View`
105:   background-color: ${(props) => props.theme.colors.bg.primary};
106:   padding: ${(props) => props.theme.space[3]};
107:   border-top-width: 1px;
108:   border-top-color: ${(props) => props.theme.colors.ui.tertiary};
109:   elevation: 5;
110:   shadow-color: #000;
111:   shadow-offset: 0px -2px;
112:   shadow-opacity: 0.1;
113:   shadow-radius: 4px;
114: `;
115: 
116: const ButtonsRow = styled.View`
117:   flex-direction: row;
118:   justify-content: space-between;
119: `;
120: 
121: const ActionButton = styled(TouchableOpacity)`
122:   padding: ${(props) => props.theme.space[2]};
123:   border-radius: 5px;
124:   min-width: 100px;
125:   align-items: center;
126:   background-color: ${(props) =>
127:     props.variant === "confirm" ? "#b3ffb3" : "#ff4d4d"};
128: `;
129: 
130: // Helper function for arranging chairs in rows
131: const getChairRows = (chairs, perRow = 2) => {
132:   const rows = [];
133:   for (let i = 0; i < chairs.length; i += perRow) {
134:     rows.push(chairs.slice(i, i + perRow));
135:   }
136:   return rows;
137: };
138: 
139: // Calculate the position of a reservation block
140: const getReservationPosition = (
141:   reservation,
142:   tables,
143:   counterSeats,
144:   tableWidth,
145:   counterSeatWidth,
146:   timeSlotHeight,
147:   isCounterSeat = false
148: ) => {
149:   if (isCounterSeat) {
150:     const counterSeatIndex = counterSeats.findIndex(
151:       (seat) => seat.id === reservation.counterSeatId
152:     );
153: 
154:     if (counterSeatIndex === -1) return null;
155: 
156:     const left = counterSeatIndex * counterSeatWidth;
157: 
158:     const [hours, minutes] = reservation.time.split(":").map(Number);
159:     const startMinutes = (hours - 9) * 60 + minutes;
160:     const top = (startMinutes / 30) * timeSlotHeight;
161: 
162:     const height = (reservation.duration / 30) * timeSlotHeight;
163: 
164:     return {
165:       left,
166:       top,
167:       width: counterSeatWidth,
168:       height,
169:     };
170:   } else {
171:     const tableIndex = tables.findIndex(
172:       (table) => table.id === reservation.tableId
173:     );
174: 
175:     if (tableIndex === -1) return null;
176: 
177:     const counterSeatsWidth = counterSeats.length * counterSeatWidth;
178:     const left = counterSeatsWidth + tableIndex * tableWidth;
179: 
180:     const [hours, minutes] = reservation.time.split(":").map(Number);
181:     const startMinutes = (hours - 9) * 60 + minutes;
182:     const top = (startMinutes / 30) * timeSlotHeight;
183: 
184:     const height = (reservation.duration / 30) * timeSlotHeight;
185: 
186:     return {
187:       left,
188:       top,
189:       width: tableWidth,
190:       height,
191:     };
192:   }
193: };
194: 
195: // Table header component
196: export const TableHeader = ({
197:   table,
198:   isExpanded,
199:   toggleExpand,
200:   width = 100,
201: }) => {
202:   const chairRows = getChairRows(table.chairs, 2);
203:   const rowsToDisplay = isExpanded ? chairRows : chairRows.slice(0, 1);
204: 
205:   return (
206:     <TableColumn style={{ width }}>
207:       <TableItem>
208:         <SharedTableItem
209:           status={table.status || "empty"}
210:           style={{ width: width * 0.6, height: 40 }}
211:         >
212:           <CustomText variant="caption">Table {table.id}</CustomText>
213:         </SharedTableItem>
214: 
215:         <ChairsGrid>
216:           {rowsToDisplay.map((row, rowIndex) => (
217:             <ChairRow key={`row-${rowIndex}`}>
218:               {row.map((chair) => {
219:                 const chairData =
220:                   typeof chair === "object"
221:                     ? chair
222:                     : { id: chair, status: "empty" };
223:                 return (
224:                   <ChairItem key={chairData.id} status={chairData.status}>
225:                     <CustomText
226:                       variant="caption"
227:                       style={{ fontSize: 10, fontWeight: "bold" }}
228:                     >
229:                       {chairData.id.toString().slice(-1)}
230:                     </CustomText>
231:                   </ChairItem>
232:                 );
233:               })}
234:             </ChairRow>
235:           ))}
236:         </ChairsGrid>
237: 
238:         {table.chairs.length > 2 && (
239:           <ShowMoreButton onPress={toggleExpand}>
240:             <ButtonText>
241:               {isExpanded ? "Hide" : `+${table.chairs.length - 2}`}
242:             </ButtonText>
243:           </ShowMoreButton>
244:         )}
245:       </TableItem>
246:     </TableColumn>
247:   );
248: };
249: 
250: 
251: export const CounterSeatHeader = ({
252:   seat,
253:   isExpanded,
254:   toggleExpand,
255:   width = 60,
256: }) => {
257:   const seatData =
258:     typeof seat === "object" ? seat : { id: seat, status: "empty" };
259: 
260:   return (
261:     <TableColumn style={{ width }}>
262:       <CounterSeatHeaderContainer>
263:         <CounterSeatTitle></CounterSeatTitle>
264:         <ChairItem status={seatData.status || "empty"} onPress={toggleExpand}>
265:           <CustomText
266:             variant="caption"
267:             style={{ fontSize: 10, fontWeight: "bold" }}
268:           >
269:             {seatData.id}
270:           </CustomText>
271:         </ChairItem>
272:       </CounterSeatHeaderContainer>
273:     </TableColumn>
274:   );
275: };
276: 
277: 
278: export const ReservationBlock = ({
279:   reservation,
280:   tables,
281:   counterSeats,
282:   isSelected,
283:   onPress,
284:   tableWidth,
285:   counterSeatWidth,
286:   timeSlotHeight,
287:   isCounterSeat = false,
288: }) => {
289:   const position = getReservationPosition(
290:     reservation,
291:     tables,
292:     counterSeats,
293:     tableWidth,
294:     counterSeatWidth,
295:     timeSlotHeight,
296:     isCounterSeat
297:   );
298: 
299:   if (!position) return null;
300: 
301:   return (
302:     <ReservationBlockStyled
303:       {...position}
304:       status={reservation.status}
305:       onPress={() => onPress(reservation)}
306:       isSelected={isSelected}
307:     >
308:       <ReservationName>{reservation.customerName}</ReservationName>
309:       <ReservationDetails>
310:         {reservation.time} • {reservation.people}{" "}
311:         {reservation.people > 1 ? "people" : "person"}
312:       </ReservationDetails>
313:     </ReservationBlockStyled>
314:   );
315: };
316: 
317: 
318: export const ReservationDetailsPanel = ({ reservation, onClose }) => {
319:   if (!reservation) return null;
320: 
321:   return (
322:     <ReservationPanelStyled>
323:       <CustomText variant="title">{reservation.customerName}</CustomText>
324:       <View style={{ marginTop: 8 }}>
325:         <CustomText variant="body">
326:           Time: {reservation.time} ({reservation.duration} min)
327:         </CustomText>
328:         <CustomText variant="body">
329:           Party: {reservation.people}{" "}
330:           {reservation.people > 1 ? "people" : "person"}
331:         </CustomText>
332: 
333:         {reservation.isCounterSeat ? (
334:           <CustomText variant="body">
335:             Counter Seat: {reservation.counterSeatId}
336:           </CustomText>
337:         ) : (
338:           <CustomText variant="body">
339:             Table: {reservation.tableId} • Chairs:{" "}
340:             {reservation.chairs.join(", ")}
341:           </CustomText>
342:         )}
343: 
344:         {reservation.note && (
345:           <CustomText variant="body">Note: {reservation.note}</CustomText>
346:         )}
347:       </View>
348: 
349:       <View style={{ marginTop: 16 }}>
350:         <ButtonsRow>
351:           <ActionButton variant="confirm" onPress={onClose}>
352:             <CustomText>Confirm</CustomText>
353:           </ActionButton>
354:           <ActionButton onPress={onClose}>
355:             <CustomText>Cancel</CustomText>
356:           </ActionButton>
357:         </ButtonsRow>
358:       </View>
359:     </ReservationPanelStyled>
360:   );
361: };

================
File: src/features/merchant/reservations/components/ReservationsGrid.js
================
  1: const PendingBorder = styled(Animated.View)`
  2:   position: absolute;
  3:   top: -2px;
  4:   left: -2px;
  5:   right: -2px;
  6:   bottom: -2px;
  7:   border-width: 3px;
  8:   border-color: #ff6b6b;
  9:   border-radius: 7px;
 10:   z-index: 2;
 11:   pointer-events: none;
 12: `;
 13: import React, { useState, useRef, useEffect } from "react";
 14: import { View, ScrollView, Animated, TouchableOpacity } from "react-native";
 15: import { MaterialIcons } from "@expo/vector-icons";
 16: import styled from "styled-components/native";
 17: import { CustomText } from "../../../../components/CustomText/CustomText";
 18: 
 19: import {
 20:   TableHeader,
 21:   CounterSeatHeader,
 22:   ReservationBlock,
 23:   ReservationDetailsPanel,
 24: } from "./ReservationComponents";
 25: 
 26: const GRID_CONSTANTS = {
 27:   TABLE_WIDTH: 100,
 28:   COUNTER_SEAT_WIDTH: 60,
 29:   TIME_COLUMN_WIDTH: 60,
 30:   TIME_SLOT_HEIGHT: 30,
 31: };
 32: 
 33: const Container = styled.View`
 34:   flex: 1;
 35:   background-color: ${(props) => props.theme.colors.bg.primary};
 36: `;
 37: 
 38: // Simple tab bar
 39: const TabBar = styled.View`
 40:   flex-direction: row;
 41:   padding: 8px;
 42:   background-color: ${(props) => props.theme.colors.bg.primary};
 43: `;
 44: 
 45: const Tab = styled.TouchableOpacity`
 46:   flex: 1;
 47:   flex-direction: row;
 48:   align-items: center;
 49:   justify-content: center;
 50:   padding-vertical: 10px;
 51:   background-color: ${(props) => props.theme.colors.bg.primary};
 52:   border-width: ${(props) => (props.active ? "2px" : "1px")};
 53:   border-color: ${(props) =>
 54:     props.active
 55:       ? props.theme.colors.ui.primary
 56:       : props.theme.colors.ui.tertiary};
 57:   border-radius: 6px;
 58:   margin-horizontal: 4px;
 59:   elevation: ${(props) => (props.active ? 2 : 0)};
 60:   shadow-opacity: ${(props) => (props.active ? 0.2 : 0)};
 61:   shadow-radius: 4px;
 62:   shadow-color: #000;
 63:   shadow-offset: 0px 2px;
 64: `;
 65: 
 66: const TabText = styled(CustomText)`
 67:   margin-left: 8px;
 68:   font-size: ${(props) => props.theme.fontSizes.body};
 69:   color: ${(props) =>
 70:     props.active
 71:       ? props.theme.colors.ui.primary
 72:       : props.theme.colors.text.secondary};
 73:   font-weight: ${(props) => (props.active ? "bold" : "normal")};
 74: `;
 75: 
 76: const MainGrid = styled.View`
 77:   flex: 1;
 78:   flex-direction: column;
 79: `;
 80: 
 81: const HeaderContainer = styled.View`
 82:   background-color: ${(props) => props.theme.colors.bg.primary};
 83:   border-bottom-width: 1px;
 84:   border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
 85:   position: relative;
 86:   z-index: 2;
 87: `;
 88: 
 89: const LeftColumnContainer = styled.View`
 90:   position: absolute;
 91:   left: 0;
 92:   top: 0;
 93:   bottom: 0;
 94:   width: ${({ width }) => width}px;
 95:   background-color: ${(props) => props.theme.colors.bg.primary};
 96:   z-index: 10;
 97:   border-right-width: 1px;
 98:   border-right-color: ${(props) => props.theme.colors.ui.tertiary};
 99: `;
100: 
101: const TimeColumn = styled.View`
102:   width: ${({ width }) => width}px;
103: `;
104: 
105: const TimeSlot = styled.View`
106:   height: ${({ height }) => height}px;
107:   border-bottom-width: 1px;
108:   border-bottom-color: ${(props) => props.theme.colors.ui.tertiary};
109:   justify-content: center;
110:   align-items: center;
111: `;
112: 
113: const TimeText = styled(CustomText)`
114:   font-size: ${(props) => props.theme.fontSizes.caption};
115: `;
116: 
117: const ExpandAllButton = styled.TouchableOpacity`
118:   background-color: ${(props) => props.theme.colors.ui.disabled};
119:   padding: 4px 8px;
120:   border-radius: 12px;
121:   margin-vertical: 8px;
122:   align-items: center;
123:   justify-content: center;
124:   shadow-color: #000;
125:   shadow-offset: 0px 2px;
126:   shadow-opacity: 0.1;
127:   shadow-radius: 3px;
128:   elevation: 2;
129:   width: 80%;
130:   align-self: center;
131: `;
132: 
133: const ExpandAllButtonText = styled(CustomText)`
134:   font-size: ${(props) => props.theme.fontSizes.caption};
135:   color: ${(props) => props.theme.colors.text.primary};
136:   font-weight: ${(props) => props.theme.fontWeights.bold};
137: `;
138: 
139: const ContentContainer = styled.View`
140:   flex: 1;
141:   flex-direction: row;
142:   position: relative;
143: `;
144: 
145: const GridContainer = styled.View`
146:   flex: 1;
147:   position: relative;
148: `;
149: 
150: const TimeColumnHeader = styled.View`
151:   width: ${({ width }) => width}px;
152:   padding: ${(props) => props.theme.space[2]};
153:   padding-top: 40px;
154:   align-items: center;
155:   justify-content: center;
156:   background-color: ${(props) => props.theme.colors.bg.primary};
157: `;
158: 
159: const HeaderScrollView = styled.ScrollView`
160:   flex-direction: row;
161: `;
162: 
163: const HeaderRow = styled.View`
164:   flex-direction: row;
165:   padding-vertical: ${(props) => props.theme.space[2]};
166: `;
167: 
168: const CurrentTimeLine = styled(Animated.View)`
169:   position: absolute;
170:   left: 0;
171:   right: 0;
172:   height: 2px;
173:   background-color: #ff3b30;
174:   z-index: 5;
175: `;
176: 
177: const CurrentTimeIndicator = styled.View`
178:   position: absolute;
179:   left: -5px;
180:   width: 10px;
181:   height: 10px;
182:   border-radius: 5px;
183:   background-color: #ff3b30;
184:   top: -4px;
185: `;
186: 
187: // Utility functions
188: const calculateCurrentTimePosition = (timeSlotHeight) => {
189:   const now = new Date();
190:   const hours = now.getHours();
191:   const minutes = now.getMinutes();
192: 
193:   if (hours < 9 || (hours === 22 && minutes > 30) || hours > 22) {
194:     return -100;
195:   }
196: 
197:   const minutesSince9AM = (hours - 9) * 60 + minutes;
198:   return (minutesSince9AM / 30) * timeSlotHeight;
199: };
200: 
201: // Parse time strings into minutes since midnight
202: const parseTimeToMinutes = (timeStr) => {
203:   const [hours, minutes] = timeStr.split(":").map(Number);
204:   return hours * 60 + minutes;
205: };
206: 
207: // Get ID from item consistently
208: const getItemId = (item) => {
209:   return typeof item === "object" ? item.id : item;
210: };
211: 
212: // Sort all seating items (tables and counter seats) using smart sorting
213: const smartSortSeatingItems = (tables, counterSeats, reservations) => {
214:   if (!tables || !counterSeats || !reservations) {
215:     return [];
216:   }
217: 
218:   // Create a unified array with type information
219:   const allItems = [
220:     ...tables.map((table) => ({
221:       item: table,
222:       type: "table",
223:       id: getItemId(table),
224:     })),
225:     ...counterSeats.map((seat) => ({
226:       item: seat,
227:       type: "counterSeat",
228:       id: getItemId(seat),
229:     })),
230:   ];
231: 
232:   const now = new Date();
233:   const currentTimeInMinutes = now.getHours() * 60 + now.getMinutes();
234: 
235:   // Create a reservation map for quick lookups
236:   const reservationMap = new Map();
237: 
238:   // Process all reservations and organize by table/seat ID
239:   reservations.forEach((res) => {
240:     const itemKey = res.isCounterSeat
241:       ? `counter-${res.counterSeatId}`
242:       : `table-${res.tableId}`;
243: 
244:     if (!reservationMap.has(itemKey)) {
245:       reservationMap.set(itemKey, []);
246:     }
247: 
248:     const startTime = parseTimeToMinutes(res.time);
249:     const endTime = startTime + res.duration;
250: 
251:     reservationMap.get(itemKey).push({
252:       reservation: res,
253:       startTime,
254:       endTime,
255:       timeUntilStart: startTime - currentTimeInMinutes,
256:       timeUntilEnd: endTime - currentTimeInMinutes,
257:     });
258:   });
259: 
260:   // Process each seating item
261:   allItems.forEach((seatingItem) => {
262:     const itemKey = `${seatingItem.type === "table" ? "table" : "counter"}-${
263:       seatingItem.id
264:     }`;
265:     const itemReservations = reservationMap.get(itemKey) || [];
266: 
267:     if (itemReservations.length === 0) {
268:       // No reservations for this item
269:       seatingItem.status = "empty";
270:       seatingItem.priority = Number.MAX_SAFE_INTEGER;
271:       return;
272:     }
273: 
274:     // Find upcoming, current, and past reservations
275:     const upcomingReservations = itemReservations.filter(
276:       (r) => r.timeUntilStart > 0
277:     );
278:     const currentReservations = itemReservations.filter(
279:       (r) => r.timeUntilStart <= 0 && r.timeUntilEnd > 0
280:     );
281:     const pastReservations = itemReservations.filter(
282:       (r) => r.timeUntilEnd <= 0
283:     );
284: 
285:     // Determine status and priority
286:     if (upcomingReservations.length > 0) {
287:       // Sort by closest upcoming start time
288:       upcomingReservations.sort((a, b) => a.timeUntilStart - b.timeUntilStart);
289:       seatingItem.status = "upcoming";
290:       seatingItem.priority = upcomingReservations[0].timeUntilStart;
291:       seatingItem.reservation = upcomingReservations[0].reservation;
292:     } else if (currentReservations.length > 0) {
293:       // Sort by start time (earliest first)
294:       currentReservations.sort((a, b) => a.startTime - b.startTime);
295:       seatingItem.status = "current";
296:       seatingItem.priority = 1000000 + currentReservations[0].startTime;
297:       seatingItem.reservation = currentReservations[0].reservation;
298:     } else if (pastReservations.length > 0) {
299:       // Sort by most recent end time
300:       pastReservations.sort((a, b) => b.endTime - a.endTime);
301:       seatingItem.status = "past";
302:       seatingItem.priority = 2000000 + (1440 - pastReservations[0].endTime);
303:       seatingItem.reservation = pastReservations[0].reservation;
304:     }
305:   });
306: 
307:   // Sort the items
308:   allItems.sort((a, b) => {
309:     // First sort by reservation status
310:     const statusOrder = { upcoming: 0, current: 1, past: 2, empty: 3 };
311:     const aStatus = a.status || "empty";
312:     const bStatus = b.status || "empty";
313: 
314:     if (statusOrder[aStatus] !== statusOrder[bStatus]) {
315:       return statusOrder[aStatus] - statusOrder[bStatus];
316:     }
317: 
318:     // Then sort by priority within the same status
319:     if (a.priority !== b.priority) {
320:       return a.priority - b.priority;
321:     }
322: 
323:     // As a last resort, sort by ID
324:     return a.id.toString().localeCompare(b.id.toString());
325:   });
326: 
327:   return allItems;
328: };
329: 
330: // Traditional sorting: Tables first, then counter seats, both sorted by ID
331: const traditionalSortSeatingItems = (tables, counterSeats) => {
332:   if (!tables || !counterSeats) {
333:     return [];
334:   }
335: 
336:   // Create a unified array with type information, sort by ID numerically
337:   const tableItems = tables
338:     .map((table) => ({
339:       item: table,
340:       type: "table",
341:       id: getItemId(table),
342:     }))
343:     .sort((a, b) => {
344:       // Extract numeric part for sorting
345:       const aNum = parseInt(a.id.toString().replace(/\D/g, "")) || 0;
346:       const bNum = parseInt(b.id.toString().replace(/\D/g, "")) || 0;
347:       return aNum - bNum;
348:     });
349: 
350:   const counterItems = counterSeats
351:     .map((seat) => ({
352:       item: seat,
353:       type: "counterSeat",
354:       id: getItemId(seat),
355:     }))
356:     .sort((a, b) => {
357:       // Extract numeric part for sorting
358:       const aNum = parseInt(a.id.toString().replace(/\D/g, "")) || 0;
359:       const bNum = parseInt(b.id.toString().replace(/\D/g, "")) || 0;
360:       return aNum - bNum;
361:     });
362: 
363:   // Tables first, then counter seats
364:   return [...tableItems, ...counterItems];
365: };
366: 
367: // Main component
368: const ReservationsGrid = ({
369:   timeSlots,
370:   tables,
371:   counterSeats,
372:   reservations,
373: }) => {
374:   const {
375:     TABLE_WIDTH,
376:     COUNTER_SEAT_WIDTH,
377:     TIME_COLUMN_WIDTH,
378:     TIME_SLOT_HEIGHT,
379:   } = GRID_CONSTANTS;
380: 
381:   // State variables
382:   const [selectedReservation, setSelectedReservation] = useState(null);
383:   const [currentTimePosition, setCurrentTimePosition] = useState(0);
384:   const [expandedTableIds, setExpandedTableIds] = useState(new Set());
385:   const [expandedCounterSeatIds, setExpandedCounterSeatIds] = useState(
386:     new Set()
387:   );
388:   const [areAllExpanded, setAreAllExpanded] = useState(false);
389:   const [sortedItems, setSortedItems] = useState([]);
390:   const [isSmartSorting, setIsSmartSorting] = useState(true);
391: 
392:   // Pre-compute sorted items for both sorting methods to eliminate waiting when switching
393:   const [traditionalSorted, setTraditionalSorted] = useState([]);
394:   const [smartSorted, setSmartSorted] = useState([]);
395: 
396:   // Animation for breathing effect on pending reservations
397:   const [breathingAnim] = useState(new Animated.Value(0.4));
398: 
399:   // Set up breathing animation
400:   useEffect(() => {
401:     // Create the breathing animation sequence
402:     const breathe = () => {
403:       Animated.sequence([
404:         Animated.timing(breathingAnim, {
405:           toValue: 1,
406:           duration: 1000,
407:           useNativeDriver: false, // Changed to false for border animation
408:         }),
409:         Animated.timing(breathingAnim, {
410:           toValue: 0.4,
411:           duration: 1000,
412:           useNativeDriver: false, // Changed to false for border animation
413:         }),
414:       ]).start(() => breathe()); // Restart animation when complete
415:     };
416: 
417:     // Start the animation
418:     breathe();
419: 
420:     // Clean up
421:     return () => breathingAnim.stopAnimation();
422:   }, []);
423: 
424:   // Pre-compute all sorting options when data changes
425:   useEffect(() => {
426:     const traditional = traditionalSortSeatingItems(tables, counterSeats);
427:     const smart = smartSortSeatingItems(tables, counterSeats, reservations);
428: 
429:     setTraditionalSorted(traditional);
430:     setSmartSorted(smart);
431: 
432:     // Set the current sorted items based on selected mode
433:     setSortedItems(isSmartSorting ? smart : traditional);
434:   }, [tables, counterSeats, reservations]);
435: 
436:   // Update sorted items immediately when sorting method changes
437:   useEffect(() => {
438:     setSortedItems(isSmartSorting ? smartSorted : traditionalSorted);
439:   }, [isSmartSorting, smartSorted, traditionalSorted]);
440: 
441:   useEffect(() => {
442:     const updateTimePosition = () => {
443:       setCurrentTimePosition(calculateCurrentTimePosition(TIME_SLOT_HEIGHT));
444:     };
445: 
446:     updateTimePosition();
447:     const interval = setInterval(updateTimePosition, 60000);
448:     return () => clearInterval(interval);
449:   }, [TIME_SLOT_HEIGHT]);
450: 
451:   // Toggle expansion functions
452:   const toggleExpand = (id, isTable) => {
453:     if (isTable) {
454:       setExpandedTableIds((prevExpanded) => {
455:         const newExpanded = new Set(prevExpanded);
456:         if (newExpanded.has(id)) {
457:           newExpanded.delete(id);
458:         } else {
459:           newExpanded.add(id);
460:         }
461:         return newExpanded;
462:       });
463:     } else {
464:       setExpandedCounterSeatIds((prevExpanded) => {
465:         const newExpanded = new Set(prevExpanded);
466:         if (newExpanded.has(id)) {
467:           newExpanded.delete(id);
468:         } else {
469:           newExpanded.add(id);
470:         }
471:         return newExpanded;
472:       });
473:     }
474:   };
475: 
476:   const toggleAllTables = () => {
477:     if (areAllExpanded) {
478:       setExpandedTableIds(new Set());
479:       setExpandedCounterSeatIds(new Set());
480:     } else {
481:       setExpandedTableIds(new Set(tables.map((table) => getItemId(table))));
482:       setExpandedCounterSeatIds(
483:         new Set(counterSeats.map((seat) => getItemId(seat)))
484:       );
485:     }
486:     setAreAllExpanded(!areAllExpanded);
487:   };
488: 
489:   // Scroll sync handlers
490:   const handleHeaderScroll = (event) => {
491:     if (gridScrollRef.current) {
492:       gridScrollRef.current.scrollTo({
493:         x: event.nativeEvent.contentOffset.x,
494:         y: 0,
495:         animated: false,
496:       });
497:     }
498:   };
499: 
500:   const handleGridScroll = (event) => {
501:     if (headerScrollRef.current) {
502:       headerScrollRef.current.scrollTo({
503:         x: event.nativeEvent.contentOffset.x,
504:         y: 0,
505:         animated: false,
506:       });
507:     }
508:   };
509: 
510:   const handleVerticalScroll = (event) => {
511:     if (leftColumnScrollRef.current) {
512:       leftColumnScrollRef.current.scrollTo({
513:         y: event.nativeEvent.contentOffset.y,
514:         animated: false,
515:       });
516:     }
517:   };
518: 
519:   const handleLeftColumnScroll = (event) => {
520:     if (verticalScrollRef.current) {
521:       verticalScrollRef.current.scrollTo({
522:         y: event.nativeEvent.contentOffset.y,
523:         animated: false,
524:       });
525:     }
526:   };
527: 
528:   // Handle reservation click
529:   const handleReservationPress = (reservation) => {
530:     setSelectedReservation(
531:       selectedReservation?.id === reservation.id ? null : reservation
532:     );
533:   };
534: 
535:   // Refs for synchronized scrolling
536:   const verticalScrollRef = useRef(null);
537:   const leftColumnScrollRef = useRef(null);
538:   const headerScrollRef = useRef(null);
539:   const gridScrollRef = useRef(null);
540: 
541:   // Calculate content height
542:   const contentHeight = timeSlots.length * TIME_SLOT_HEIGHT;
543: 
544:   // Render header for an item (either table or counter seat)
545:   const renderItemHeader = (seatingItem) => {
546:     const { item, type, id } = seatingItem;
547: 
548:     if (type === "table") {
549:       const isExpanded = expandedTableIds.has(id);
550:       return (
551:         <TableHeader
552:           key={`table-${id}`}
553:           table={item}
554:           isExpanded={isExpanded}
555:           toggleExpand={() => toggleExpand(id, true)}
556:           width={TABLE_WIDTH}
557:         />
558:       );
559:     } else {
560:       // counter seat
561:       const isExpanded = expandedCounterSeatIds.has(id);
562:       return (
563:         <CounterSeatHeader
564:           key={`counter-${id}`}
565:           seat={item}
566:           isExpanded={isExpanded}
567:           toggleExpand={() => toggleExpand(id, false)}
568:           width={COUNTER_SEAT_WIDTH}
569:         />
570:       );
571:     }
572:   };
573: 
574:   // Get width for an item based on its type
575:   const getItemWidth = (type) => {
576:     return type === "table" ? TABLE_WIDTH : COUNTER_SEAT_WIDTH;
577:   };
578: 
579:   // Render reservation blocks
580:   const renderReservationBlocks = () => {
581:     // Create a map of the sorted item positions
582:     const itemPositionMap = {};
583:     let currentPosition = 0;
584: 
585:     sortedItems.forEach((item) => {
586:       const key = `${item.type === "table" ? "table" : "counter"}-${item.id}`;
587:       itemPositionMap[key] = currentPosition;
588:       currentPosition += getItemWidth(item.type);
589:     });
590: 
591:     return (
592:       <>
593:         {reservations.map((reservation) => {
594:           const isCounterSeat = !!reservation.isCounterSeat;
595:           const itemKey = isCounterSeat
596:             ? `counter-${reservation.counterSeatId}`
597:             : `table-${reservation.tableId}`;
598: 
599:           // Skip if we don't have this item in our sorted grid
600:           if (!(itemKey in itemPositionMap)) {
601:             return null;
602:           }
603: 
604:           // Calculate position based on the sortedItems layout
605:           const position = itemPositionMap[itemKey];
606:           const width = isCounterSeat ? COUNTER_SEAT_WIDTH : TABLE_WIDTH;
607: 
608:           return (
609:             <ReservationBlockStyled
610:               key={`res-${reservation.id}`}
611:               left={position}
612:               top={
613:                 ((parseTimeToMinutes(reservation.time) - 9 * 60) / 30) *
614:                 TIME_SLOT_HEIGHT
615:               }
616:               width={width}
617:               height={(reservation.duration / 30) * TIME_SLOT_HEIGHT}
618:               status={reservation.status}
619:               onPress={() => handleReservationPress(reservation)}
620:               isSelected={selectedReservation?.id === reservation.id}
621:               isPending={reservation.status === "pending"}
622:             >
623:               {reservation.status === "pending" && (
624:                 <PendingBorder style={{ opacity: breathingAnim }} />
625:               )}
626:               <ReservationName>{reservation.customerName}</ReservationName>
627:               <ReservationDetails>
628:                 {reservation.time} • {reservation.people}{" "}
629:                 {reservation.people > 1 ? "people" : "person"}
630:               </ReservationDetails>
631:             </ReservationBlockStyled>
632:           );
633:         })}
634:       </>
635:     );
636:   };
637: 
638:   // Define the reservation block styled component directly here
639:   // This ensures we have access to the component for use in the render method
640:   const ReservationBlockStyled = styled.TouchableOpacity`
641:     position: absolute;
642:     left: ${(props) => props.left}px;
643:     top: ${(props) => props.top}px;
644:     width: ${(props) => props.width}px;
645:     height: ${(props) => props.height}px;
646:     background-color: ${(props) =>
647:       props.status === "confirmed"
648:         ? "#b3ffb3"
649:         : props.status === "pending"
650:         ? "#ffd11a"
651:         : "#ff4d4d"};
652:     border-radius: 5px;
653:     padding: ${(props) => props.theme.space[1]};
654:     justify-content: space-between;
655:     z-index: 1;
656:     box-sizing: border-box;
657:     ${(props) =>
658:       props.isSelected &&
659:       !props.isPending &&
660:       `
661:       border-width: 2px;
662:       border-color: blue;
663:     `}
664:   `;
665: 
666:   const ReservationName = styled(CustomText)`
667:     font-size: ${(props) => props.theme.fontSizes.caption};
668:     font-weight: ${(props) => props.theme.fontWeights.bold};
669:   `;
670: 
671:   const ReservationDetails = styled(CustomText)`
672:     font-size: ${(props) => props.theme.fontSizes.caption};
673:   `;
674: 
675:   return (
676:     <Container>
677:       {/* Simple Tab Bar */}
678:       <TabBar>
679:         <Tab
680:           active={!isSmartSorting}
681:           onPress={() => setIsSmartSorting(false)}
682:           activeOpacity={0.6}
683:         >
684:           <MaterialIcons
685:             name="format-list-numbered"
686:             size={20}
687:             color={!isSmartSorting ? "#262626" : "#757575"}
688:           />
689:           <TabText active={!isSmartSorting}>Traditional</TabText>
690:         </Tab>
691:         <Tab
692:           active={isSmartSorting}
693:           onPress={() => setIsSmartSorting(true)}
694:           activeOpacity={0.6}
695:         >
696:           <MaterialIcons
697:             name="auto-awesome"
698:             size={20}
699:             color={isSmartSorting ? "#262626" : "#757575"}
700:           />
701:           <TabText active={isSmartSorting}>Smart</TabText>
702:         </Tab>
703:       </TabBar>
704: 
705:       <MainGrid>
706:         <HeaderContainer>
707:           <LeftColumnContainer width={TIME_COLUMN_WIDTH}>
708:             <TimeColumnHeader width={TIME_COLUMN_WIDTH}>
709:               <ExpandAllButton
710:                 onPress={toggleAllTables}
711:                 areAllExpanded={areAllExpanded}
712:               >
713:                 <ExpandAllButtonText>
714:                   {areAllExpanded ? "Collapse All" : "Expand All"}
715:                 </ExpandAllButtonText>
716:               </ExpandAllButton>
717:             </TimeColumnHeader>
718:           </LeftColumnContainer>
719: 
720:           <HeaderScrollView
721:             ref={headerScrollRef}
722:             horizontal
723:             showsHorizontalScrollIndicator={false}
724:             onScroll={handleHeaderScroll}
725:             scrollEventThrottle={16}
726:             contentContainerStyle={{ paddingLeft: TIME_COLUMN_WIDTH }}
727:           >
728:             <HeaderRow>
729:               {/* Render all items headers in sorted order */}
730:               {sortedItems.map(renderItemHeader)}
731:             </HeaderRow>
732:           </HeaderScrollView>
733:         </HeaderContainer>
734: 
735:         <ContentContainer>
736:           <LeftColumnContainer width={TIME_COLUMN_WIDTH}>
737:             <ScrollView
738:               ref={leftColumnScrollRef}
739:               onScroll={handleLeftColumnScroll}
740:               scrollEventThrottle={16}
741:               showsVerticalScrollIndicator={true}
742:             >
743:               <TimeColumn width={TIME_COLUMN_WIDTH}>
744:                 {timeSlots.map((time) => (
745:                   <TimeSlot
746:                     key={time}
747:                     height={TIME_SLOT_HEIGHT}
748:                     width={TIME_COLUMN_WIDTH}
749:                   >
750:                     <TimeText>{time}</TimeText>
751:                   </TimeSlot>
752:                 ))}
753:               </TimeColumn>
754:             </ScrollView>
755:           </LeftColumnContainer>
756: 
757:           <HeaderScrollView
758:             ref={gridScrollRef}
759:             horizontal
760:             showsHorizontalScrollIndicator={false}
761:             onScroll={handleGridScroll}
762:             scrollEventThrottle={16}
763:             contentContainerStyle={{ paddingLeft: TIME_COLUMN_WIDTH }}
764:           >
765:             <ScrollView
766:               ref={verticalScrollRef}
767:               onScroll={handleVerticalScroll}
768:               scrollEventThrottle={16}
769:               showsVerticalScrollIndicator={false}
770:             >
771:               <GridContainer style={{ height: contentHeight }}>
772:                 {/* Render grid cells */}
773:                 <View style={{ flexDirection: "row" }}>
774:                   {/* All item columns */}
775:                   {sortedItems.map((seatingItem, index) => (
776:                     <View
777:                       key={`item-col-${seatingItem.id}`}
778:                       style={{ width: getItemWidth(seatingItem.type) }}
779:                     >
780:                       {timeSlots.map((time, timeIndex) => (
781:                         <View
782:                           key={`item-cell-${index}-${timeIndex}`}
783:                           style={{
784:                             width: getItemWidth(seatingItem.type),
785:                             height: TIME_SLOT_HEIGHT,
786:                             borderLeftWidth: 1,
787:                             borderBottomWidth: 1,
788:                             borderLeftColor: "#e1e1e1",
789:                             borderBottomColor: "#e1e1e1",
790:                           }}
791:                         />
792:                       ))}
793:                     </View>
794:                   ))}
795:                 </View>
796: 
797:                 {}
798:                 <CurrentTimeLine style={{ top: currentTimePosition }}>
799:                   <CurrentTimeIndicator />
800:                 </CurrentTimeLine>
801: 
802:                 {}
803:                 {renderReservationBlocks()}
804:               </GridContainer>
805:             </ScrollView>
806:           </HeaderScrollView>
807:         </ContentContainer>
808:       </MainGrid>
809: 
810:       {}
811:       {selectedReservation && (
812:         <ReservationDetailsPanel
813:           reservation={selectedReservation}
814:           onClose={() => setSelectedReservation(null)}
815:         />
816:       )}
817:     </Container>
818:   );
819: };
820: 
821: export default ReservationsGrid;

================
File: src/features/merchant/reservations/screens/MerchantReservationsScreen.js
================
 1: import React from "react";
 2: import { SafeArea } from "../../../../components/SafeArea/SafeArea";
 3: import { seatingData, merchantReservations } from "../../../../data/mockData";
 4: import { generateTimeSlots } from "../utils/timeUtils";
 5: import ReservationsGrid from "../components/ReservationsGrid";
 6: 
 7: export const MerchantReservationsScreen = () => {
 8:   const timeSlots = generateTimeSlots();
 9: 
10:   return (
11:     <SafeArea>
12:       <ReservationsGrid
13:         timeSlots={timeSlots}
14:         tables={seatingData.tables}
15:         counterSeats={seatingData.counterSeats}
16:         reservations={merchantReservations}
17:       />
18:     </SafeArea>
19:   );
20: };

================
File: src/features/merchant/reservations/utils/timeUtils.js
================
 1: export const generateTimeSlots = () => {
 2:   const slots = [];
 3:   for (let hour = 9; hour <= 22; hour++) {
 4:     const hourStr = hour.toString().padStart(2, "0");
 5:     slots.push(`${hourStr}:00`);
 6:     slots.push(`${hourStr}:30`);
 7:   }
 8:   return slots;
 9: };
10: 
11: 
12: 
13: 
14: 
15: 
16: export const calculateCurrentTimePosition = (timeSlotHeight) => {
17:   const now = new Date();
18:   const hours = now.getHours();
19:   const minutes = now.getMinutes();
20: 
21: 
22:   if (hours < 9 || (hours === 22 && minutes > 30) || hours > 22) {
23:     return -100;
24:   }
25: 
26:   const minutesSince9AM = (hours - 9) * 60 + minutes;
27:   return (minutesSince9AM / 30) * timeSlotHeight;
28: };
29: 
30: 
31: 
32: 
33: 
34: 
35: export const parseTimeString = (timeString) => {
36:   return timeString.split(":").map(Number);
37: };
38: 
39: 
40: 
41: 
42: 
43: 
44: export const convertToMinutesSince9AM = (timeString) => {
45:   const [hours, minutes] = parseTimeString(timeString);
46:   return (hours - 9) * 60 + minutes;
47: };
48: 
49: 
50: 
51: 
52: 
53: 
54: export const getTimeSlotIndex = (timeString) => {
55:   const minutesSince9AM = convertToMinutesSince9AM(timeString);
56:   return Math.floor(minutesSince9AM / 30);
57: };
58: 
59: 
60: 
61: 
62: 
63: 
64: export const formatTimeFromDate = (date) => {
65:   const hours = date.getHours().toString().padStart(2, "0");
66:   const minutes = date.getMinutes().toString().padStart(2, "0");
67:   return `${hours}:${minutes}`;
68: };
69: 
70: 
71: 
72: 
73: 
74: 
75: export const generateCurrentDayTimes = (count = 5) => {
76:   let timesArray = [];
77:   let current = new Date();
78:   current.setSeconds(0);
79:   current.setMilliseconds(0);
80: 
81: 
82:   const minutes = current.getMinutes();
83:   current.setMinutes(minutes >= 30 ? 30 : 0);
84: 
85:   for (let i = 0; i < count; i++) {
86:     timesArray.push(formatTimeFromDate(current));
87:     current.setMinutes(current.getMinutes() + 30);
88:   }
89:   return timesArray;
90: };

================
File: src/features/merchant/settings/screens/MerchantSettingsScreen.js
================
 1: import React from "react";
 2: import styled from "styled-components/native";
 3: import { TouchableOpacity } from "react-native";
 4: 
 5: import { useAuthentication } from "../../../../services/AuthenticationContext";
 6: 
 7: const Container = styled.View`
 8:   flex: 1;
 9:   justify-content: center;
10:   align-items: center;
11:   background-color: ${(props) => props.theme.colors.bg.secondary};
12: `;
13: 
14: const Title = styled.Text`
15:   font-family: ${(props) => props.theme.fonts.heading};
16:   font-size: ${(props) => props.theme.fontSizes.title};
17:   color: ${(props) => props.theme.colors.text.primary};
18: `;
19: 
20: const LogoutButton = styled(TouchableOpacity)`
21:   margin-top: 20px;
22:   padding: 10px 20px;
23:   background-color: ${(props) => props.theme.colors.ui.error};
24:   border-radius: 8px;
25: `;
26: 
27: const LogoutButtonText = styled.Text`
28:   color: ${(props) => props.theme.colors.text.inverse};
29:   font-size: ${(props) => props.theme.fontSizes.body};
30:   font-family: ${(props) => props.theme.fonts.body};
31: `;
32: 
33: export const MerchantSettingsScreen = () => {
34:   const { onLogout } = useAuthentication();
35: 
36:   return (
37:     <Container>
38:       <Title>Merchant Settings Screen</Title>
39:       <LogoutButton onPress={onLogout}>
40:         <LogoutButtonText>Logout</LogoutButtonText>
41:       </LogoutButton>
42:     </Container>
43:   );
44: };

================
File: src/infrastructure/navigation/AppNavigator.js
================
  1: import React from "react";
  2: import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
  3: import { createStackNavigator } from "@react-navigation/stack";
  4: import { Ionicons } from "@expo/vector-icons";
  5: import { NavigationContainer } from "@react-navigation/native";
  6: 
  7: import { useAuthentication } from "../../services/AuthenticationContext";
  8: import { globalScreenOptions } from "../options/GlobalScreenOptions";
  9: import { RestaurantsNavigator } from "./RestaurantsNavigator";
 10: import { CheckoutNavigator } from "./CheckoutNavigator";
 11: import { ReservationsNavigator } from "./ReservationsNavigator";
 12: import { MerchantNavigator } from "./MerchantNavigator";
 13: import { SettingsNavigator } from "./SettingsNavigator";
 14: import { RestaurantDetailScreen } from "../../features/customer/restaurants/screens/RestaurantDetailScreen";
 15: import { AccountSettingsScreen } from "../../features/customer/settings/screens/AccountSettingsScreen";
 16: 
 17: const TAB_ICON = {
 18:   Restaurants: "restaurant",
 19:   Checkout: "cart",
 20:   Reservations: "book",
 21:   Settings: "settings",
 22: };
 23: 
 24: const Tab = createBottomTabNavigator();
 25: const Stack = createStackNavigator();
 26: 
 27: const createTabScreenOptions = ({ route }) => {
 28:   const iconName = TAB_ICON[route.name];
 29: 
 30:   return {
 31:     tabBarIcon: ({ size, color }) => (
 32:       <Ionicons name={iconName} size={size} color={color} />
 33:     ),
 34:   };
 35: };
 36: 
 37: 
 38: const HomeTabs = () => (
 39:   <Tab.Navigator screenOptions={createTabScreenOptions}>
 40:     <Tab.Screen
 41:       name="Restaurants"
 42:       component={RestaurantsNavigator}
 43:       options={{ headerShown: false }}
 44:     />
 45:     <Tab.Screen
 46:       name="Checkout"
 47:       component={CheckoutNavigator}
 48:       options={{ headerShown: false }}
 49:     />
 50:     <Tab.Screen
 51:       name="Reservations"
 52:       component={ReservationsNavigator}
 53:       options={{ header: () => null }}
 54:     />
 55:     <Tab.Screen
 56:       name="Settings"
 57:       component={SettingsNavigator}
 58:       options={{ headerShown: false }}
 59:     />
 60:   </Tab.Navigator>
 61: );
 62: 
 63: 
 64: export const AppNavigator = () => {
 65:   const { user } = useAuthentication();
 66:   const role = user?.role;
 67:   return (
 68:     <Stack.Navigator
 69:       screenOptions={{
 70:         headerShown: false,
 71:       }}
 72:     >
 73:       {role === "customer" ? (
 74:         <>
 75:           {}
 76:           <Stack.Screen name="Home" component={HomeTabs} />
 77:           {}
 78: 
 79:           <Stack.Screen
 80:             name="RestaurantDetailScreen"
 81:             component={RestaurantDetailScreen}
 82:             options={({ route }) => ({
 83:               ...globalScreenOptions.restaurantDetail,
 84:               presentation:
 85:                 route.params?.presentationStyle === "modal" ? "modal" : "card",
 86:             })}
 87:           />
 88:           <Stack.Screen
 89:             name="AccountSettings"
 90:             component={AccountSettingsScreen}
 91:             options={globalScreenOptions.common}
 92:           />
 93:         </>
 94:       ) : (
 95:         <>
 96:           <Stack.Screen name="Merchant" component={MerchantNavigator} />
 97:         </>
 98:       )}
 99:     </Stack.Navigator>
100:   );
101: };

================
File: src/infrastructure/navigation/AuthNavigator.js
================
 1: import React from "react";
 2: import { createStackNavigator } from "@react-navigation/stack";
 3: 
 4: import { LoginScreen } from "../../features/auth/screens/LoginScreen";
 5: import { globalScreenOptions } from "../options/GlobalScreenOptions";
 6: 
 7: const Stack = createStackNavigator();
 8: 
 9: export const AuthNavigator = () => {
10:   return (
11:     <Stack.Navigator screenOptions={globalScreenOptions.nonHeader}>
12:       <Stack.Screen name="Login" component={LoginScreen} />
13:       {}
14:     </Stack.Navigator>
15:   );
16: };

================
File: src/infrastructure/navigation/CheckoutNavigator.js
================
 1: import React from "react";
 2: import {
 3:   ScrollView,
 4:   TextInput,
 5:   Text,
 6:   TouchableOpacity,
 7:   View,
 8:   StyleSheet,
 9: } from "react-native";
10: import * as FileSystem from "expo-file-system";
11: 
12: import { createStackNavigator } from "@react-navigation/stack";
13: 
14: const CheckoutStack = createStackNavigator();
15: 
16: export const CheckoutNavigator = () => {
17:   return (
18:     <View style={{ flex: 1 }}>
19:       <Text>Checkout Navigator</Text>
20:     </View>
21:   );
22: };

================
File: src/infrastructure/navigation/index.js
================
 1: import { NavigationContainer } from "@react-navigation/native";
 2: import { AppNavigator } from "./AppNavigator";
 3: import { GlobalWrapper } from "../../components/GlobalWrapper/GlobalWrapper";
 4: import { AuthNavigator } from "./AuthNavigator";
 5: import { useAuthentication } from "../../services/AuthenticationContext";
 6: 
 7: export const Navigation = () => {
 8:   const { isAuthenticated } = useAuthentication();
 9: 
10:   return (
11:     <GlobalWrapper>
12:       <NavigationContainer>
13:         {isAuthenticated ? <AppNavigator /> : <AuthNavigator />}
14:       </NavigationContainer>
15:     </GlobalWrapper>
16:   );
17: };

================
File: src/infrastructure/navigation/MerchantNavigator.js
================
 1: import React from "react";
 2: import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
 3: import { Ionicons } from "@expo/vector-icons";
 4: import { useTheme } from "styled-components/native";
 5: 
 6: import { MerchantHomeScreen } from "../../features/merchant/dashboard/screens/MerchantHomeScreen";
 7: import { MerchantSettingsScreen } from "../../features/merchant/settings/screens/MerchantSettingsScreen";
 8: import { MerchantReservationsScreen } from "../../features/merchant/reservations/screens/MerchantReservationsScreen";
 9: 
10: const Tab = createBottomTabNavigator();
11: 
12: export const MerchantNavigator = () => {
13:   const theme = useTheme();
14:   return (
15:     <Tab.Navigator
16:       screenOptions={({ route }) => ({
17:         headerShown: false,
18:         tabBarIcon: ({ color, size }) => {
19:           let iconName;
20:           if (route.name === "Home") {
21:             iconName = "home";
22:           } else if (route.name === "Settings") {
23:             iconName = "settings";
24:           } else if (route.name === "Reservations") {
25:             iconName = "calendar";
26:           }
27:           return <Ionicons name={iconName} size={size} color={color} />;
28:         },
29:         tabBarActiveTintColor: theme.colors.text.primary,
30:         tabBarInactiveTintColor: theme.colors.text.secondary,
31:         tabBarStyle: {
32:           backgroundColor: theme.colors.bg.primary,
33:         },
34:       })}
35:     >
36:       <Tab.Screen name="Home" component={MerchantHomeScreen} />
37:       <Tab.Screen name="Reservations" component={MerchantReservationsScreen} />
38:       <Tab.Screen name="Settings" component={MerchantSettingsScreen} />
39:     </Tab.Navigator>
40:   );
41: };

================
File: src/infrastructure/navigation/ReservationsNavigator.js
================
 1: import React from "react";
 2: import { createStackNavigator } from "@react-navigation/stack";
 3: import { useTheme } from "styled-components/native";
 4: 
 5: import { ReservationsScreen } from "../../features/customer/reservations/screens/ReservationsScreen";
 6: 
 7: const ReservationStack = createStackNavigator();
 8: 
 9: export const ReservationsNavigator = () => {
10:   const theme = useTheme();
11:   const getNumericValue = (value) => parseInt(value.replace("px", ""), 10);
12: 
13:   return (
14:     <ReservationStack.Navigator
15:       screenOptions={{
16:         headerShown: true,
17:         headerTitleAlign: "left",
18:         headerTintColor: theme.colors.text.primary,
19:         headerStyle: {
20:           backgroundColor: theme.colors.bg.primary,
21:           shadowColor: "transparent",
22:           elevation: 0,
23:         },
24:         headerTitleStyle: {
25:           fontSize: getNumericValue(theme.fontSizes.h4),
26:           fontFamily: theme.fonts.heading,
27:           fontWeight: theme.fontWeights.regular,
28:           lineHeight: getNumericValue(theme.fontSizes.h2),
29:           paddingLeft: getNumericValue(theme.space[2]),
30:         },
31:       }}
32:     >
33:       <ReservationStack.Screen
34:         name="ReservationsScreen"
35:         component={ReservationsScreen}
36:         options={{
37:           headerTitle: "Reservations",
38:         }}
39:       />
40:     </ReservationStack.Navigator>
41:   );
42: };

================
File: src/infrastructure/navigation/RestaurantsNavigator.js
================
 1: import React from "react";
 2: import { ScrollView, TextInput, Text, TouchableOpacity } from "react-native";
 3: import {
 4:   createStackNavigator,
 5:   TransitionPresets,
 6: } from "@react-navigation/stack";
 7: 
 8: import { RestaurantsScreen } from "../../features/customer/restaurants/screens/RestaurantsScreen";
 9: import { RestaurantDetailScreen } from "../../features/customer/restaurants/screens/RestaurantDetailScreen";
10: 
11: const RestaurantStack = createStackNavigator();
12: 
13: export const RestaurantsNavigator = () => {
14:   return (
15: 
16:     <RestaurantStack.Navigator
17:       screenOptions={{
18:         headerShown: false,
19:         ...TransitionPresets.ModalPresentationIOS,
20:       }}
21:     >
22:       <RestaurantStack.Screen
23:         name="RestaurantsScreen"
24:         component={RestaurantsScreen}
25:         options={{ headerShown: false }}
26:       />
27:     </RestaurantStack.Navigator>
28:   );
29: };

================
File: src/infrastructure/navigation/SettingsNavigator.js
================
 1: import React from "react";
 2: import {
 3:   createStackNavigator,
 4:   CardStyleInterpolators,
 5: } from "@react-navigation/stack";
 6: 
 7: import { SettingsScreen } from "../../features/customer/settings/screens/SettingsScreen";
 8: 
 9: const SettingsStack = createStackNavigator();
10: 
11: export const SettingsNavigator = () => {
12:   return (
13:     <SettingsStack.Navigator
14:       screenOptions={{
15:         headerShown: false,
16:         cardStyleInterpolator: CardStyleInterpolators.forHorizontalIOS,
17:       }}
18:     >
19:       <SettingsStack.Screen name="SettingsScreen" component={SettingsScreen} />
20:     </SettingsStack.Navigator>
21:   );
22: };

================
File: src/infrastructure/options/GlobalScreenOptions.js
================
 1: import { Platform } from "react-native";
 2: import { colors } from "../../infrastructure/theme/colors";
 3: import { TransitionPresets } from "@react-navigation/stack";
 4: 
 5: const commonHeaderOptions = {
 6:   headerStyle: {
 7:     height: Platform.select({ ios: 56, android: 66 }),
 8:     backgroundColor: colors.bg.primary,
 9:   },
10:   headerTitleStyle: {
11:     fontWeight: "bold",
12:     fontSize: 20,
13:     color: colors.text.primary,
14:     textAlign: "center",
15:   },
16:   headerBackTitleVisible: false,
17:   headerTitleAlign: "center",
18:   headerLeftContainerStyle: {
19:     marginTop: Platform.select({ ios: -45, android: -41 }),
20:   },
21:   headerTitleContainerStyle: {
22:     marginTop: Platform.select({ ios: -50, android: -45 }),
23:   },
24: };
25: 
26: 
27: export const globalScreenOptions = {
28:   common: commonHeaderOptions,
29:   nonHeader: {
30:     ...commonHeaderOptions,
31:     headerShown: false,
32:   },
33:   restaurantDetail: {
34:     headerShown: false,
35: 
36: 
37: 
38:   },
39: };

================
File: src/infrastructure/theme/colors.js
================
 1: export const colors = {
 2:   brand: {
 3:     primary: "#FFFFFF",
 4:     secondary: "#757575",
 5:     muted: "#C6DAF7",
 6:   },
 7:   ui: {
 8:     primary: "#262626",
 9:     secondary: "#757575",
10:     tertiary: "#F1F1F1",
11:     quaternary: "#FFFFFF",
12:     disabled: "#DEDEDE",
13:     error: "#D0421B",
14:     success: "#138000",
15:   },
16:   bg: {
17:     primary: "#FFFFFF",
18:     secondary: "#F1F1F1",
19:   },
20:   text: {
21:     primary: "#262626",
22:     secondary: "#757575",
23:     disabled: "#9C9C9C",
24:     inverse: "#FFFFFF",
25:     error: "#D0421B",
26:     success: "#138000",
27:   },
28: };

================
File: src/infrastructure/theme/fonts.js
================
 1: export const fonts = {
 2:   body: "Oswald_400Regular",
 3:   heading: "Lato_400Regular",
 4:   monospace: "Oswald_400Regular",
 5: };
 6: 
 7: export const fontWeights = {
 8:   regular: 400,
 9:   medium: 500,
10:   bold: 700,
11: };
12: 
13: export const fontSizes = {
14:   caption: "12px",
15:   button: "14px",
16:   body: "16px",
17:   title: "20px",
18:   h5: "24px",
19:   h4: "34px",
20:   h3: "45px",
21:   h2: "56px",
22:   h1: "112px",
23: };

================
File: src/infrastructure/theme/index.js
================
 1: import { colors } from './colors';
 2: import { sizes } from './sizes';
 3: import { space, lineHeights } from './spacing';
 4: import { fonts, fontWeights, fontSizes } from './fonts';
 5: 
 6: export const theme = {
 7:   colors,
 8:   sizes,
 9:   space,
10:   lineHeights,
11:   fonts,
12:   fontSizes,
13:   fontWeights,
14: };

================
File: src/infrastructure/theme/sizes.js
================
1: export const sizes = ['8px', '16px', '32px', '64px', '128px'];

================
File: src/infrastructure/theme/spacing.js
================
1: export const lineHeights = {
2:     title: '28px',
3:     copy: '20px',
4:   };
5: 
6:   export const space = ['0px', '4px', '8px', '16px', '32px', '64px'];

================
File: src/services/AuthenticationContext.js
================
 1: import React, { useState, createContext, useContext } from "react";
 2: 
 3: export const AuthenticationContext = createContext();
 4: 
 5: export const AuthenticationContextProvider = ({ children }) => {
 6:   const [user, setUser] = useState(null);
 7:   const [isLoading, setIsLoading] = useState(false);
 8:   const [error, setError] = useState(null);
 9: 
10: 
11:   const onLogin = async (username, password, role) => {
12:     setIsLoading(true);
13:     setError(null);
14: 
15: 
16:     setTimeout(() => {
17: 
18:       if (username === "+1123" && password === "123123") {
19:         setUser({ username, role });
20:       } else {
21:         setError("Invalid credentials");
22:       }
23:       setIsLoading(false);
24:     }, 1000);
25:   };
26: 
27: 
28:   const onRegister = async (username, password, repeatedPassword, role) => {
29:     setIsLoading(true);
30:     setError(null);
31: 
32:     if (password !== repeatedPassword) {
33:       setError("Passwords do not match");
34:       setIsLoading(false);
35:       return;
36:     }
37: 
38: 
39:     setTimeout(() => {
40: 
41:       setUser({ username, role });
42:       setIsLoading(false);
43:     }, 1000);
44:   };
45: 
46:   const onLogout = () => {
47:     setUser(null);
48:   };
49: 
50:   return (
51:     <AuthenticationContext.Provider
52:       value={{
53:         user,
54:         isAuthenticated: !!user,
55:         isLoading,
56:         error,
57:         onLogin,
58:         onRegister,
59:         onLogout,
60:       }}
61:     >
62:       {children}
63:     </AuthenticationContext.Provider>
64:   );
65: };
66: 
67: 
68: export const useAuthentication = () => useContext(AuthenticationContext);

================
File: .cursorignore
================
1: # Add directories or file patterns to ignore during indexing (e.g. foo/ or *.csv)
2: assets/
3: android/
4: node_modules/

================
File: .gitignore
================
 1: # Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files
 2: 
 3: .vscode
 4: 
 5: # dependencies
 6: node_modules/
 7: 
 8: # Expo
 9: .expo/
10: dist/
11: web-build/
12: ios/
13: android/
14: 
15: # Native
16: *.orig.*
17: *.jks
18: *.p8
19: *.p12
20: *.key
21: *.mobileprovision
22: 
23: # Metro
24: .metro-health-check*
25: 
26: # debug
27: npm-debug.*
28: yarn-debug.*
29: yarn-error.*
30: 
31: # macOS
32: .DS_Store
33: *.pem
34: 
35: # local env files
36: .env*.local
37: 
38: # typescript
39: *.tsbuildinfo
40: 
41: # @generated expo-cli sync-2b81b286409207a5da26e14c78851eb30d8ccbdb
42: # The following patterns were generated by expo-cli
43: 
44: expo-env.d.ts
45: # @end expo-cli

================
File: App.js
================
 1: import { theme } from "./src/infrastructure/theme";
 2: import { ThemeProvider } from "styled-components/native";
 3: import { AuthenticationContextProvider } from "./src/services/AuthenticationContext";
 4: import { Navigation } from "./src/infrastructure/navigation";
 5: import { StatusBar as ExpoStatusBar } from "expo-status-bar";
 6: import Constants from "expo-constants";
 7: 
 8: export default function App() {
 9:   return (
10:     <>
11:       <AuthenticationContextProvider>
12:         <ThemeProvider theme={theme}>
13:           <Navigation />
14:         </ThemeProvider>
15:       </AuthenticationContextProvider>
16:       <ExpoStatusBar style="auto" />
17:     </>
18:   );
19: }

================
File: app.json
================
 1: {
 2:   "expo": {
 3:     "name": "seat-master-js",
 4:     "slug": "seat-master-js",
 5:     "version": "1.0.0",
 6:     "assetBundlePatterns": [
 7:       "**/*"
 8:     ],
 9:     "orientation": "portrait",
10:     "icon": "./assets/images/icon.png",
11:     "scheme": "myapp",
12:     "userInterfaceStyle": "automatic",
13:     "splash": {
14:       "image": "./assets/images/splash.png",
15:       "resizeMode": "contain",
16:       "backgroundColor": "#ffffff"
17:     },
18:     "ios": {
19:       "supportsTablet": true,
20:       "bundleIdentifier": "com.vickerszhu.seatmasterjs"
21:     },
22:     "android": {
23:       "adaptiveIcon": {
24:         "foregroundImage": "./assets/images/adaptive-icon.png",
25:         "backgroundColor": "#ffffff"
26:       },
27:       "package": "com.vickerszhu.seatmasterjs"
28:     },
29:     "web": {
30:       "bundler": "metro",
31:       "output": "static",
32:       "favicon": "./assets/images/favicon.png"
33:     },
34:     "plugins": [
35:       "expo-router"
36:     ],
37:     "experiments": {
38:       "typedRoutes": true
39:     },
40:     "extra": {
41:       "router": {
42:         "origin": false
43:       },
44:       "eas": {
45:         "projectId": "c6d8ffc4-9bc2-4f22-a564-ff0301c850a4"
46:       }
47:     }
48:   }
49: }

================
File: babel.config.js
================
1: module.exports = function (api) {
2:   api.cache(true);
3:   return {
4:     presets: ['babel-preset-expo']
5:   };
6: };

================
File: eas.json
================
 1: {
 2:   "build": {
 3:     "development": {
 4:       "developmentClient": true,
 5:       "distribution": "internal"
 6:     },
 7:     "preview": {
 8:       "distribution": "internal"
 9:     },
10:     "production": {}
11:   }
12: }

================
File: metro.config.js
================
1: const { getDefaultConfig } = require('expo/metro-config');
2: 
3: const defaultConfig = getDefaultConfig(__dirname);
4: 
5: defaultConfig.resolver.assetExts.push('glb', 'gltf');
6: 
7: module.exports = defaultConfig;

================
File: package.json
================
 1: {
 2:   "name": "seat-master-js",
 3:   "main": "node_modules/expo/AppEntry.js",
 4:   "version": "1.0.0",
 5:   "scripts": {
 6:     "start": "expo start",
 7:     "android": "expo run:android",
 8:     "ios": "expo run:ios",
 9:     "web": "expo start --web",
10:     "test": "jest --watchAll"
11:   },
12:   "jest": {
13:     "preset": "jest-expo"
14:   },
15:   "dependencies": {
16:     "@expo/vector-icons": "^14.0.2",
17:     "@react-navigation/native": "^6.1.18",
18:     "@react-navigation/stack": "^6.4.1",
19:     "expo": "~51.0.22",
20:     "expo-asset": "^10.0.10",
21:     "expo-dev-client": "^4.0.22",
22:     "expo-file-system": "^17.0.1",
23:     "expo-font": "~12.0.9",
24:     "expo-gl": "^14.0.2",
25:     "expo-linear-gradient": "~13.0.2",
26:     "expo-linking": "~6.3.1",
27:     "expo-router": "~3.5.18",
28:     "expo-splash-screen": "~0.27.5",
29:     "expo-status-bar": "~1.12.1",
30:     "expo-system-ui": "~3.0.7",
31:     "expo-web-browser": "~13.0.3",
32:     "firebase": "^11.1.0",
33:     "formik": "^2.4.6",
34:     "react": "18.2.0",
35:     "react-dom": "18.2.0",
36:     "react-native": "^0.74.5",
37:     "react-native-asset": "^2.1.1",
38:     "react-native-collapsible-tab-view": "^8.0.0",
39:     "react-native-dropdown-picker": "^5.4.6",
40:     "react-native-fs": "^2.20.0",
41:     "react-native-gesture-handler": "^2.20.0",
42:     "react-native-pager-view": "6.3.0",
43:     "react-native-paper": "^5.12.3",
44:     "react-native-reanimated": "~3.10.1",
45:     "react-native-safe-area-context": "4.10.5",
46:     "react-native-static-server": "^0.5.0",
47:     "react-native-svg": "15.2.0",
48:     "react-native-tab-view": "^3.5.2",
49:     "react-native-web": "~0.19.10",
50:     "react-native-webview": "13.8.6",
51:     "react-native-webview-autoheight": "^1.0.6",
52:     "react-promise-suspense": "^0.3.4",
53:     "styled-components": "^6.1.12",
54:     "yup": "^1.5.0"
55:   },
56:   "devDependencies": {
57:     "@babel/core": "^7.20.0",
58:     "@types/react": "~18.2.45",
59:     "@types/react-native": "^0.73.0",
60:     "depcheck": "^1.4.7",
61:     "jest": "^29.2.1",
62:     "jest-expo": "~51.0.3",
63:     "react-test-renderer": "18.2.0",
64:     "typescript": "~5.3.3"
65:   },
66:   "private": true
67: }

================
File: repomix.config.json
================
 1: {
 2:   "include": ["src/**/*", "*.*"],
 3:   "ignore": {
 4:     "customPatterns": ["**/*.log", "node_modules/**/*"]
 5:   },
 6:   "output": {
 7:     "style": "plain",
 8:     "filePath": "repomix-output.txt",
 9:     "removeComments": true,
10:     "showLineNumbers": true,
11:     "topFilesLength": 10
12:   }
13: }

================
File: tsconfig.json
================
 1: {
 2:   "extends": "expo/tsconfig.base",
 3:   "compilerOptions": {
 4:     "jsx": "react-jsx",
 5:     "strict": true,
 6:     "paths": {
 7:       "@/*": [
 8:         "./*"
 9:       ]
10:     }
11:   },
12:   "include": [
13:     "**/*.ts",
14:     "**/*.tsx",
15:     ".expo/types/**/*.ts",
16:     "expo-env.d.ts"
17:   ]
18: }



================================================================
End of Codebase
================================================================
